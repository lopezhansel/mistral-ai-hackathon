{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Number Line Arithmetic\"\n    animation: Begin with a title slide with the title, then animate a point moving along a number line to the right for addition and to the left for subtraction, illustrating basic arithmetic operations.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass NumberLineArithmetic(Scene):\n    def construct(self):\n        title = Text(\"Number Line Arithmetic\").scale(0.9)\n        self.play(Write(title))\n        self.wait(1)\n        self.play(FadeOut(title))\n\n        number_line = NumberLine(x_range=[-5, 5, 1], length=10, color=WHITE, include_numbers=True)\n        self.play(Create(number_line))\n        dot = Dot(point=number_line.n2p(0), color=YELLOW)\n        self.play(FadeIn(dot))\n\n        # Addition\n        self.play(dot.animate.move_to(number_line.n2p(2)))\n        self.wait(1)\n\n        # Subtraction\n        self.play(dot.animate.move_to(number_line.n2p(-1)))\n        self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Understanding Angles\"\nanimation: Begin with a title slide with the title, then animate the formation of angles by rotating one line around a fixed point where it intersects another line. Highlight acute, obtuse, and right angles to illustrate the concept of angles.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass UnderstandingAngles(Scene):\n    def construct(self):\n        title = Text(\"Understanding Angles\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create lines\n        line1 = Line(ORIGIN, 2*RIGHT, color=WHITE)\n        line2 = Line(ORIGIN, 2*UP, color=WHITE).rotate_about_origin(PI/4)\n        dot = Dot(ORIGIN, color=YELLOW)\n\n        self.play(Create(line1), Create(dot))\n        self.play(Rotate(line2, angle=-PI/4, about_point=ORIGIN), run_time=2)\n        self.wait(1)\n\n        # Acute angle\n        acute_angle = Angle(line1, line2, radius=0.5, color=GREEN)\n        self.play(Create(acute_angle))\n        self.wait(1)\n\n        # Right angle\n        self.play(Rotate(line2, angle=PI/4, about_point=ORIGIN), run_time=2)\n        right_angle = RightAngle(line1, line2, length=0.5, color=BLUE)\n        self.play(Transform(acute_angle, right_angle))\n        self.wait(1)\n\n        # Obtuse angle\n        self.play(Rotate(line2, angle=PI/2, about_point=ORIGIN), run_time=2)\n        obtuse_angle = Angle(line1, line2, radius=0.5, other_angle=True, color=RED)\n        self.play(Transform(acute_angle, obtuse_angle))\n        self.wait(2)\n\n        self.play(FadeOut(line1), FadeOut(line2), FadeOut(dot), FadeOut(acute_angle))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Simple Harmonic Motion\"\nanimation: Begin with a title slide with the title, then animate a pendulum swinging back and forth or a mass on a spring oscillating to demonstrate the basic idea of periodic motion.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass SimpleHarmonicMotion(Scene):\n    def construct(self):\n        title = Text(\"Simple Harmonic Motion\").scale(1.5)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Pendulum setup\n        pivot = Dot(ORIGIN).shift(UP*2)\n        bob = Dot().shift(DOWN*2)\n        rod = Line(pivot.get_center(), bob.get_center()).set_stroke(width=2)\n        pendulum = VGroup(pivot, rod, bob)\n\n        def update_pendulum(mob, dt):\n            rate = 2  # Speed of oscillation\n            mob.rotate(rate * dt, about_point=pivot.get_center())\n\n        pendulum.add_updater(update_pendulum)\n        self.add(pendulum)\n        self.wait(10)  # Let it swing for 10 seconds\n        pendulum.clear_updaters()\n        self.play(FadeOut(pendulum))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Visualizing Prime Numbers\"\nanimation: Begin with a title slide with the title, then display a grid of numbers where prime numbers are highlighted in one color and non-prime numbers in another color. Optionally, animate the sieve of Eratosthenes algorithm to demonstrate how prime numbers are identified.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nclass PrimeVisualization(Scene):\n    def construct(self):\n        title = Text(\"Visualizing Prime Numbers\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        grid = VGroup()\n        for i in range(1, 101):\n            color = GREEN if is_prime(i) else RED\n            number = Text(str(i), color=color).scale(0.5)\n            grid.add(number)\n\n        grid.arrange_in_grid(rows=10, cols=10, buff=0.5)\n        self.play(Write(grid), run_time=3)\n        self.wait(2)\n\n        # Optional: Animate Sieve of Eratosthenes\n        primes = []\n        for i in range(2, 101):\n            if is_prime(i):\n                primes.append(i)\n                for j in range(i*2, 101, i):\n                    grid[j-1].set_color(BLUE)\n                self.play(*[grid[j-1].animate.set_color(BLUE) for j in range(i*2, 101, i)], run_time=0.5)\n                self.wait(0.5)\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"The Water Cycle in Nature\"\n    animation: Begin with a title slide with the title, then animate clouds forming, raining, and the rainwater collecting back into a body of water, illustrating the process of evaporation, condensation, precipitation, and collection in the water cycle.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass WaterCycleScene(Scene):\n    def construct(self):\n        # Title\n        title = Text(\"The Water Cycle in Nature\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Clouds forming (Condensation)\n        cloud1 = Circle(color=WHITE).shift(LEFT*2)\n        cloud2 = Circle(color=WHITE).shift(LEFT*2 + UP*0.5)\n        cloud3 = Circle(color=WHITE).shift(RIGHT*2)\n        cloud4 = Circle(color=WHITE).shift(RIGHT*2 + UP*0.5)\n        clouds = VGroup(cloud1, cloud2, cloud3, cloud4).scale(0.5)\n        self.play(FadeIn(clouds))\n        self.wait(2)\n\n        # Rain (Precipitation)\n        raindrops = VGroup(*[Line(start=3*UP + i*RIGHT*0.5, end=2*DOWN + i*RIGHT*0.5) for i in range(-5, 6)])\n        self.play(ShowCreation(raindrops), run_time=2)\n        self.wait(1)\n        self.play(FadeOut(raindrops))\n\n        # Water collection (Collection)\n        water = Rectangle(width=FRAME_WIDTH, height=1, color=BLUE).shift(DOWN*1.5)\n        self.play(FadeIn(water))\n        self.wait(1)\n\n        # Evaporation\n        evaporation = Text(\"Evaporation\", font_size=24).shift(UP*3)\n        self.play(Write(evaporation))\n        self.wait(2)\n        self.play(FadeOut(evaporation), FadeOut(water), FadeOut(clouds))\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Electric Circuit Demonstration\"\nanimation: Begin with a title slide with the title, then animate a basic electrical circuit consisting of a battery, resistor, and a light bulb. Show the flow of current from the battery through the resistor, lighting up the bulb to demonstrate the circuit in action.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ElectricCircuitDemo(Scene):\n    def construct(self):\n        title = Text(\"Electric Circuit Demonstration\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Drawing the circuit components\n        battery = Rectangle(height=1, width=0.5).set_fill(BLUE, opacity=0.5)\n        battery_text = Text(\"Battery\", font_size=24).next_to(battery, UP)\n        resistor = Rectangle(height=0.5, width=1).set_fill(RED, opacity=0.5)\n        resistor_text = Text(\"Resistor\", font_size=24).next_to(resistor, UP)\n        bulb = Circle(radius=0.5).set_fill(YELLOW, opacity=0.5)\n        bulb_text = Text(\"Bulb\", font_size=24).next_to(bulb, UP)\n\n        # Positioning\n        battery.shift(LEFT * 3)\n        resistor.next_to(battery, RIGHT, buff=1)\n        bulb.next_to(resistor, RIGHT, buff=1)\n\n        # Drawing wires\n        wire1 = Line(battery.get_right(), resistor.get_left())\n        wire2 = Line(resistor.get_right(), bulb.get_center())\n        wire3 = Line(bulb.get_center(), battery.get_left())\n\n        self.play(FadeIn(battery, battery_text, resistor, resistor_text, bulb, bulb_text, wire1, wire2, wire3))\n\n        # Animate current flow\n        current_dots = [Dot(color=RED).move_to(wire1.get_start()) for _ in range(5)]\n        for dot in current_dots:\n            self.add(dot)\n            self.play(dot.animate(rate_func=linear).move_to(wire2.get_end()), run_time=2)\n            self.play(dot.animate(rate_func=linear).move_to(wire3.get_end()), run_time=2)\n            self.remove(dot)\n\n        # Light up the bulb\n        self.play(bulb.animate.set_fill(YELLOW, opacity=1))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Gravity in Action\"\nanimation: Begin with a title slide with the title, then animate objects of different masses falling towards the Earth at the same rate, disregarding air resistance, to illustrate the concept of gravity.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass GravityInAction(Scene):\n    def construct(self):\n        title = Text(\"Gravity in Action\").scale(1.5)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        earth = Circle(color=BLUE, fill_opacity=1).scale(0.5).shift(DOWN*3)\n        earth_text = Text(\"Earth\", color=WHITE).scale(0.5).next_to(earth, DOWN)\n        self.add(earth, earth_text)\n\n        # Objects with different masses\n        object1 = Circle(color=RED, fill_opacity=1).scale(0.2).shift(UP*3 + LEFT*3)\n        object2 = Square(color=YELLOW, fill_opacity=1).scale(0.3).shift(UP*3)\n        object3 = Triangle(color=GREEN, fill_opacity=1).scale(0.25).shift(UP*3 + RIGHT*3)\n\n        self.play(FadeIn(object1, object2, object3))\n        self.wait(1)\n\n        # Animate objects falling at the same rate\n        self.play(object1.animate.shift(DOWN*6), object2.animate.shift(DOWN*6), object3.animate.shift(DOWN*6), run_time=2, rate_func=linear)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Seasons Explained\"\n    animation: Begin with a title slide with the title, then animate the Earth's tilt and orbit around the Sun, demonstrating how the angle of sunlight changes over the course of a year and how this leads to the occurrence of seasons.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass SeasonsExplained(Scene):\n    def construct(self):\n        # Title\n        title = Text(\"Seasons Explained\", font_size=40)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Setup\n        sun = Circle(radius=0.5, color=YELLOW).shift(LEFT*3)\n        earth = Circle(radius=0.2, color=BLUE).shift(RIGHT*3)\n        orbit_path = Ellipse(width=6, height=3, color=WHITE).shift(LEFT*3)\n\n        # Earth's tilt\n        tilt_line = Line(earth.get_top(), earth.get_bottom(), color=WHITE)\n        earth.add(tilt_line)\n        earth_tilt = earth.copy().rotate(23.5 * DEGREES, about_point=earth.get_center())\n\n        # Animation\n        self.play(Create(sun), Create(orbit_path), Transform(earth, earth_tilt))\n        self.play(earth.animate.move_to(orbit_path.point_from_proportion(0)))\n        self.play(MoveAlongPath(earth, orbit_path), rate_func=linear, run_time=8)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Decimal to Binary Conversion\"\nanimation: Begin with a title slide with the title, then animate the conversion of decimal numbers to binary by lighting up bits (0s and 1s) in a row to represent different decimal values.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass DecimalToBinary(Scene):\n    def construct(self):\n        title = Text(\"Decimal to Binary Conversion\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n        for number in numbers:\n            binary_string = format(number, 'b')\n            binary_text = Text(binary_string, font_size=64)\n            self.play(Write(binary_text))\n            self.wait(1)\n            self.play(FadeOut(binary_text))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Caesar Cipher Encryption and Decryption\"\nanimation: Begin with a title slide with the title, then animate the process of encrypting a message using a Caesar cipher by shifting letters in the alphabet to the right, and decrypting the message by shifting letters to the left, visualizing simple data encryption and decryption.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass CaesarCipher(Scene):\n    def construct(self):\n        title = Text(\"Caesar Cipher Encryption and Decryption\").scale(0.7)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Encryption\n        plaintext = Text(\"HELLO\", font_size=48)\n        self.play(Write(plaintext))\n        self.wait(1)\n\n        shift_text = Text(\"Shift: 3\", font_size=36).next_to(plaintext, DOWN)\n        self.play(Write(shift_text))\n        self.wait(1)\n\n        encrypted_text = Text(\"KHOOR\", font_size=48).next_to(shift_text, DOWN)\n        self.play(Transform(plaintext, encrypted_text))\n        self.wait(2)\n\n        # Decryption\n        decrypt_text = Text(\"Decrypt\", font_size=36).next_to(encrypted_text, DOWN)\n        self.play(Write(decrypt_text))\n        self.wait(1)\n\n        decrypted_text = Text(\"HELLO\", font_size=48).move_to(plaintext.get_center())\n        self.play(Transform(encrypted_text, decrypted_text))\n        self.wait(2)\n\n        self.play(FadeOut(plaintext), FadeOut(shift_text), FadeOut(decrypted_text), FadeOut(decrypt_text))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Pythagorean Theorem Visualization\"\nanimation: Begin with a title slide with the title, then animate a right-angled triangle with squares drawn on each side. As the triangle changes size, show that the sum of the areas of the squares on the two shorter sides always equals the area of the square on the longest side, illustrating the Pythagorean Theorem.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass PythagoreanTheorem(Scene):\n    def construct(self):\n        title = Text(\"Pythagorean Theorem Visualization\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create a right-angled triangle\n        triangle = Polygon(ORIGIN, 4*RIGHT, 3*UP, color=WHITE)\n        square_hypotenuse = Square(side_length=5).move_to(triangle.get_center(), aligned_edge=DL).rotate_about_origin(triangle.get_angle()).set_color(BLUE)\n        square_adjacent = Square(side_length=4).next_to(triangle, DOWN, buff=0).set_color(RED)\n        square_opposite = Square(side_length=3).next_to(triangle, LEFT, buff=0).set_color(GREEN)\n\n        self.play(Create(triangle))\n        self.play(Create(square_hypotenuse), Create(square_adjacent), Create(square_opposite))\n        self.wait(2)\n\n        # Animate the triangle changing size\n        for factor in [0.8, 1.2, 1.0]:\n            new_triangle = Polygon(ORIGIN, 4*RIGHT*factor, 3*UP*factor, color=WHITE)\n            new_square_hypotenuse = Square(side_length=5*factor).move_to(new_triangle.get_center(), aligned_edge=DL).rotate_about_origin(new_triangle.get_angle()).set_color(BLUE)\n            new_square_adjacent = Square(side_length=4*factor).next_to(new_triangle, DOWN, buff=0).set_color(RED)\n            new_square_opposite = Square(side_length=3*factor).next_to(new_triangle, LEFT, buff=0).set_color(GREEN)\n\n            self.play(Transform(triangle, new_triangle), Transform(square_hypotenuse, new_square_hypotenuse), Transform(square_adjacent, new_square_adjacent), Transform(square_opposite, new_square_opposite), run_time=2)\n            self.wait(1)\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Doppler Effect Simulation\"\nanimation: Begin with a title slide with the title, then animate a sound source (e.g., an ambulance) moving past an observer. Show the sound waves being compressed in front of the source and stretched out behind it, illustrating the change in pitch heard by the observer.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass DopplerEffectSimulation(Scene):\n    def construct(self):\n        title = Text(\"Doppler Effect Simulation\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Sound source - Ambulance\n        ambulance = Circle(color=RED, fill_opacity=1).scale(0.5)\n        ambulance_text = Text(\"Ambulance\", font_size=24).next_to(ambulance, DOWN)\n        ambulance_group = VGroup(ambulance, ambulance_text)\n\n        # Observer\n        observer = Dot(color=BLUE).shift(4*RIGHT)\n        observer_text = Text(\"Observer\", font_size=24).next_to(observer, DOWN)\n        observer_group = VGroup(observer, observer_text)\n\n        self.play(FadeIn(ambulance_group), FadeIn(observer_group))\n        self.wait(1)\n\n        # Sound waves\n        waves = VGroup()\n        for i in range(5):\n            wave = Circle(color=BLUE, fill_opacity=0.2).scale(i*0.5)\n            wave.move_to(ambulance.get_center())\n            waves.add(wave)\n\n        def update_waves(waves):\n            new_waves = VGroup()\n            for wave in waves:\n                new_wave = wave.copy()\n                new_wave.scale(1.1, about_point=ambulance.get_center())\n                if new_wave.width < 0.1 or new_wave.height < 0.1:\n                    continue\n                new_waves.add(new_wave)\n            return new_waves\n\n        self.play(ambulance_group.animate.shift(8*LEFT), UpdateFromFunc(waves, update_waves), run_time=4, rate_func=linear)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Magnetic Fields Interaction\"\nanimation: Begin with a title slide with the title, then animate a bar magnet with field lines surrounding it. Introduce a second magnet and show how the field lines interact, demonstrating attraction and repulsion between the two magnets.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass MagneticFieldsInteraction(Scene):\n    def construct(self):\n        title = Text(\"Magnetic Fields Interaction\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Magnet 1\n        magnet1 = Rectangle(color=RED, height=1, width=2).shift(LEFT*3)\n        magnet1_label_n = Text(\"N\", color=WHITE).scale(0.5).next_to(magnet1, UP, buff=0.1)\n        magnet1_label_s = Text(\"S\", color=WHITE).scale(0.5).next_to(magnet1, DOWN, buff=0.1)\n        self.play(GrowFromCenter(magnet1), Write(magnet1_label_n), Write(magnet1_label_s))\n\n        # Field lines for Magnet 1\n        field_lines1 = VGroup(*[ArcBetweenPoints(start_point=magnet1.get_top() + UP*0.2 + LEFT*0.2*i,\n                                                 end_point=magnet1.get_bottom() + DOWN*0.2 + LEFT*0.2*i,\n                                                 angle=-TAU/4) for i in range(6)])\n        self.play(ShowCreation(field_lines1))\n\n        # Magnet 2\n        magnet2 = Rectangle(color=BLUE, height=1, width=2).shift(RIGHT*3)\n        magnet2_label_n = Text(\"N\", color=WHITE).scale(0.5).next_to(magnet2, UP, buff=0.1)\n        magnet2_label_s = Text(\"S\", color=WHITE).scale(0.5).next_to(magnet2, DOWN, buff=0.1)\n        self.play(GrowFromCenter(magnet2), Write(magnet2_label_n), Write(magnet2_label_s))\n\n        # Field lines for Magnet 2\n        field_lines2 = VGroup(*[ArcBetweenPoints(start_point=magnet2.get_top() + UP*0.2 + RIGHT*0.2*i,\n                                                 end_point=magnet2.get_bottom() + DOWN*0.2 + RIGHT*0.2*i,\n                                                 angle=TAU/4) for i in range(6)])\n        self.play(ShowCreation(field_lines2))\n\n        # Interaction\n        self.play(magnet2.animate.shift(LEFT*2.5), rate_func=there_and_back, run_time=2)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Projectile Motion Simulation\"\n    animation: Begin with a title slide with the title, then animate an object being launched at an angle, showing its path as a parabola. The horizontal motion should be constant, while the vertical motion should be affected by gravity, causing the object to follow a curved trajectory.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ProjectileMotion(Scene):\n    def construct(self):\n        title = Text(\"Projectile Motion Simulation\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Constants for the projectile motion\n        velocity = 5\n        angle = 45\n        gravity = 9.8\n        time_of_flight = 2 * velocity * np.sin(np.radians(angle)) / gravity\n        max_height = (velocity**2) * (np.sin(np.radians(angle))**2) / (2 * gravity)\n        range = velocity * np.cos(np.radians(angle)) * time_of_flight\n\n        # Creating the trajectory path\n        trajectory = FunctionGraph(\n            lambda x: x * np.tan(np.radians(angle)) - (gravity * x**2) / (2 * velocity**2 * np.cos(np.radians(angle))**2),\n            x_range=[0, range],\n            color=BLUE\n        )\n\n        # Creating the object\n        object = Dot(radius=0.1, color=YELLOW)\n        object.move_to(trajectory.points[0])\n\n        # Animating the object along the path\n        self.play(MoveAlongPath(object, trajectory, rate_func=linear), run_time=time_of_flight)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Photosynthesis in Action\"\n    animation: Begin with a title slide with the title, then animate a plant absorbing sunlight, CO2, and water to produce glucose and oxygen. Show the chloroplasts in the leaves and the chemical reaction taking place, illustrating the process of photosynthesis.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass PhotosynthesisInAction(Scene):\n    def construct(self):\n        # Title\n        title = Text(\"Photosynthesis in Action\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Elements of Photosynthesis\n        sun = Circle(color=YELLOW, fill_opacity=1).scale(0.5).shift(UP*3 + LEFT*4)\n        sun_text = Text(\"Sunlight\", color=BLACK).scale(0.3).next_to(sun, DOWN)\n        co2 = Text(\"CO2\", color=WHITE).scale(0.5).shift(UP*3 + RIGHT*4)\n        water = SVGMobject().set(width=0.5).move_to(DOWN*2 + LEFT*4)\n        water_text = Text(\"H2O\", color=WHITE).scale(0.5).next_to(water, DOWN)\n\n        # Plant\n        plant = Line(ORIGIN, DOWN*2, color=GREEN).shift(DOWN)\n        leaf_left = Ellipse(width=1.5, height=1, color=GREEN, fill_opacity=1).shift(DOWN + LEFT*0.75)\n        leaf_right = Ellipse(width=1.5, height=1, color=GREEN, fill_opacity=1).shift(DOWN + RIGHT*0.75)\n        chloroplasts = VGroup(*[Dot(color=DARK_GREEN).move_to(leaf_left.get_center() + point) for point in [UP*0.3, DOWN*0.3, LEFT*0.3, RIGHT*0.3]])\n\n        # Chemical Reaction\n        reactants = Text(\"6CO2 + 6H2O + Light -> C6H12O6 + 6O2\", color=WHITE).scale(0.5).shift(DOWN*3)\n\n        # Animation\n        self.play(FadeIn(sun), FadeIn(sun_text), FadeIn(co2), FadeIn(water), FadeIn(water_text))\n        self.play(GrowFromCenter(plant), GrowFromCenter(leaf_left), GrowFromCenter(leaf_right), FadeIn(chloroplasts))\n        self.wait(1)\n        self.play(ReplacementTransform(co2.copy(), chloroplasts), ReplacementTransform(water_text.copy(), chloroplasts), ReplacementTransform(sun_text.copy(), chloroplasts))\n        self.wait(1)\n        self.play(Write(reactants))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Archimedes' Principle Illustrated\"\nanimation: Begin with a title slide with the title, then animate an object being submerged in water. Show the water level rising and a force (buoyant force) pushing up on the object. Illustrate that the buoyant force equals the weight of the water displaced by the object.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ArchimedesPrinciple(Scene):\n    def construct(self):\n        title = Text(\"Archimedes' Principle Illustrated\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Water container\n        container = Rectangle(height=4, width=6).set_fill(BLUE, opacity=0.5).set_stroke(width=2)\n        self.play(Create(container))\n\n        # Object\n        object = Square(side_length=1).set_fill(GRAY, opacity=1).move_to(3*UP)\n        self.play(Create(object))\n        self.play(object.animate.shift(2.5*DOWN), run_time=2)\n\n        # Water level rise animation\n        displaced_water = Rectangle(height=0.3, width=6).set_fill(BLUE, opacity=0.8).next_to(container, UP, buff=0)\n        self.play(container.animate.set_fill(BLUE, opacity=0.8), GrowFromCenter(displaced_water))\n\n        # Buoyant force arrow\n        buoyant_force = Arrow(start=object.get_center(), end=object.get_center() + 1*UP, buff=0.1, color=YELLOW)\n        buoyant_force_label = Text(\"Buoyant Force\", font_size=24).next_to(buoyant_force, UP, buff=0.1)\n        self.play(GrowArrow(buoyant_force), Write(buoyant_force_label))\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Balancing Chemical Equations\"\nanimation: Begin with a title slide with the title, then animate reactant molecules combining to form product molecules, while ensuring that the number of each type of atom remains constant throughout the reaction.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass BalancingChemicalEquations(Scene):\n    def construct(self):\n        title = Text(\"Balancing Chemical Equations\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Reactants\n        reactant1 = Circle(color=BLUE).scale(0.5)\n        reactant1_text = Text(\"H\", color=WHITE).scale(0.5)\n        reactant1_group = VGroup(reactant1, reactant1_text)\n\n        reactant2 = Circle(color=RED).scale(0.5).next_to(reactant1, RIGHT, buff=0.1)\n        reactant2_text = Text(\"O\", color=WHITE).scale(0.5)\n        reactant2_group = VGroup(reactant2, reactant2_text)\n\n        reactants = VGroup(reactant1_group, reactant2_group).move_to(LEFT*3)\n\n        # Products\n        product1 = Circle(color=GREEN).scale(0.5)\n        product1_text = Text(\"H2O\", color=WHITE).scale(0.5)\n        product1_group = VGroup(product1, product1_text).move_to(RIGHT*3)\n\n        self.play(ShowCreation(reactant1), Write(reactant1_text), ShowCreation(reactant2), Write(reactant2_text))\n        self.wait(1)\n        self.play(Transform(reactant1_group, product1_group), Transform(reactant2_group, product1_group.copy().next_to(product1_group, RIGHT, buff=0.1)))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Centripetal Force in Action\"\n    animation: Begin with a title slide with the title, then animate an object moving in a circular path, with a force constantly pulling it towards the center of the circle, demonstrating the concept of centripetal force.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass CentripetalForceScene(Scene):\n    def construct(self):\n        title = Text(\"Centripetal Force in Action\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        circle = Circle(radius=2)\n        dot = Dot(circle.get_start())\n        arrow = Arrow(dot.get_center(), circle.get_center(), buff=0)\n\n        self.play(Create(circle))\n        self.play(FadeIn(dot))\n        self.play(ShowCreation(arrow))\n        self.play(MoveAlongPath(dot, circle), rate_func=linear, run_time=4)\n        self.play(FadeOut(dot), FadeOut(circle), FadeOut(arrow))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Resonance Phenomenon\"\nanimation: Begin with a title slide with the title, then animate a tuning fork vibrating at its natural frequency. Next, introduce a second tuning fork of the same frequency nearby and show it starting to vibrate due to resonance between the two forks.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ResonancePhenomenon(Scene):\n    def construct(self):\n        # Title slide\n        title = Text(\"Resonance Phenomenon\", font_size=48)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # First tuning fork\n        fork1 = Line(ORIGIN, UP * 2).shift(LEFT * 2)\n        fork1_head = VGroup(\n            Line(fork1.get_end(), fork1.get_end() + RIGHT * 0.5),\n            Line(fork1.get_end(), fork1.get_end() + LEFT * 0.5)\n        )\n        tuning_fork1 = VGroup(fork1, fork1_head)\n\n        # Second tuning fork\n        fork2 = Line(ORIGIN, UP * 2).shift(RIGHT * 2)\n        fork2_head = VGroup(\n            Line(fork2.get_end(), fork2.get_end() + RIGHT * 0.5),\n            Line(fork2.get_end(), fork2.get_end() + LEFT * 0.5)\n        )\n        tuning_fork2 = VGroup(fork2, fork2_head)\n\n        self.play(ShowCreation(tuning_fork1), ShowCreation(tuning_fork2))\n        self.wait(1)\n\n        # Animate first tuning fork vibrating\n        for _ in range(4):\n            self.play(tuning_fork1.animate.shift(RIGHT * 0.1), run_time=0.1)\n            self.play(tuning_fork1.animate.shift(LEFT * 0.2), run_time=0.2)\n            self.play(tuning_fork1.animate.shift(RIGHT * 0.1), run_time=0.1)\n\n        self.wait(1)\n\n        # Animate second tuning fork starting to vibrate due to resonance\n        for _ in range(4):\n            self.play(tuning_fork2.animate.shift(RIGHT * 0.1), run_time=0.1)\n            self.play(tuning_fork2.animate.shift(LEFT * 0.2), run_time=0.2)\n            self.play(tuning_fork2.animate.shift(RIGHT * 0.1), run_time=0.1)\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Ohm's Law Illustrated\"\nanimation: Begin with a title slide with the title, then animate a circuit with a battery, a resistor, and current flowing through the circuit. Show that the current is directly proportional to the voltage and inversely proportional to the resistance, as per Ohm's Law.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass OhmsLaw(Scene):\n    def construct(self):\n        title = Text(\"Ohm's Law Illustrated\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Circuit components\n        battery = Line(ORIGIN, UP).set_color(YELLOW)\n        battery.shift(LEFT*2)\n        resistor = Rectangle(width=1, height=0.5).set_color(RED)\n        resistor.next_to(battery, RIGHT, buff=1)\n        wire1 = Line(battery.get_right(), resistor.get_left()).set_color(GREY)\n        wire2 = Line(resistor.get_right(), resistor.get_right() + RIGHT).set_color(GREY)\n        wire3 = Line(battery.get_left(), battery.get_left() + LEFT).set_color(GREY)\n        wire4 = Line(battery.get_left() + LEFT, resistor.get_right() + RIGHT).set_color(GREY)\n        circuit = VGroup(battery, resistor, wire1, wire2, wire3, wire4)\n\n        # Current flow\n        current_dots = VGroup(*[Dot(radius=0.05, color=BLUE).move_to(wire4.get_start() + RIGHT*i*0.2) for i in range(5)])\n        current_animation = Succession(*[ApplyMethod(dot.move_to, wire4.get_start() + RIGHT*(i+1)*0.2) for i, dot in enumerate(current_dots)], lag_ratio=1)\n\n        self.play(FadeIn(circuit))\n        self.wait(1)\n        self.play(ShowCreation(current_dots), run_time=1)\n        self.play(current_animation, run_time=2, rate_func=linear)\n        self.wait(1)\n\n        # Ohm's Law Visualization\n        ohms_law_text = Text(\"V = I * R\", font_size=36)\n        ohms_law_text.to_edge(UP)\n\n        increasing_voltage = Text(\"Increasing Voltage\", font_size=24).next_to(battery, DOWN, buff=0.5)\n        decreasing_resistance = Text(\"Decreasing Resistance\", font_size=24).next_to(resistor, DOWN, buff=0.5)\n\n        self.play(Write(ohms_law_text))\n        self.wait(1)\n        self.play(Write(increasing_voltage))\n        self.play(battery.stretch, 1.5, 0, {\"about_edge\": UP})\n        self.wait(1)\n        self.play(ReplacementTransform(increasing_voltage, decreasing_resistance))\n        self.play(resistor.stretch, 0.5, 0, {\"about_edge\": RIGHT})\n        self.wait(2)\n\n        self.play(FadeOut(VGroup(circuit, current_dots, ohms_law_text, decreasing_resistance)))\n        self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Electromagnetic Induction Demonstration\"\n    animation: Begin with a title slide with the title, then animate a magnet moving through a coil of wire, showing the induced current flowing in the coil as a result of electromagnetic induction.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ElectromagneticInduction(Scene):\n    def construct(self):\n        title = Text(\"Electromagnetic Induction Demonstration\").scale(0.7)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Coil\n        coil = VGroup(*[Circle(arc_center=[i*0.2, 0, 0], radius=0.5) for i in range(-10, 11)])\n        coil.set_color(BLUE)\n        self.play(ShowCreation(coil))\n        \n        # Magnet\n        magnet = Rectangle(width=1, height=0.5, color=RED)\n        magnet_text = Text(\"N\", font_size=24).next_to(magnet, LEFT, buff=0.1)\n        magnet_text2 = Text(\"S\", font_size=24).next_to(magnet, RIGHT, buff=0.1)\n        magnet_group = VGroup(magnet, magnet_text, magnet_text2)\n        self.play(FadeIn(magnet_group))\n        \n        # Animate magnet moving through the coil\n        self.play(magnet_group.animate.shift(RIGHT*4), rate_func=there_and_back, run_time=4)\n        \n        # Induced current flow\n        current_flow = CurvedArrow(start_point=[-2, 0.5, 0], end_point=[2, 0.5, 0], color=YELLOW)\n        self.play(ShowCreation(current_flow))\n        self.wait(2)\n        self.play(FadeOut(coil), FadeOut(magnet_group), FadeOut(current_flow))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Newton's Third Law Illustrated\"\nanimation: Begin with a title slide with the title, then animate two objects, such as a book and a table, interacting with each other. Show equal and opposite forces acting on both objects, demonstrating Newton's Third Law of motion.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass NewtonsThirdLaw(Scene):\n    def construct(self):\n        title = Text(\"Newton's Third Law Illustrated\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create objects\n        book = Square(color=BLUE, fill_opacity=1).scale(0.5)\n        table = Rectangle(width=3, height=0.5, color=GREEN, fill_opacity=1).next_to(book, DOWN, buff=0)\n\n        book_text = Text(\"Book\", color=WHITE).scale(0.5).move_to(book)\n        table_text = Text(\"Table\", color=WHITE).scale(0.5).move_to(table)\n\n        # Add objects to scene\n        self.play(FadeIn(book), FadeIn(table), FadeIn(book_text), FadeIn(table_text))\n        self.wait(1)\n\n        # Forces\n        force_book = Arrow(book.get_top(), book.get_top() + UP, buff=0, color=RED)\n        force_table = Arrow(table.get_top(), table.get_top() + DOWN, buff=0, color=YELLOW)\n\n        force_book_label = Text(\"Force on Book\", color=RED).scale(0.5).next_to(force_book, UP, buff=0.1)\n        force_table_label = Text(\"Force on Table\", color=YELLOW).scale(0.5).next_to(force_table, DOWN, buff=0.1)\n\n        self.play(GrowArrow(force_book), GrowArrow(force_table), Write(force_book_label), Write(force_table_label))\n        self.wait(2)\n\n        # Demonstrating Newton's Third Law\n        self.play(book.shift, UP*0.5, table.shift, DOWN*0.5)\n        self.wait(1)\n\n        self.play(book.shift, DOWN*0.5, table.shift, UP*0.5)\n        self.wait(2)\n\n        self.play(FadeOut(book), FadeOut(table), FadeOut(book_text), FadeOut(table_text),\n                  FadeOut(force_book), FadeOut(force_table), FadeOut(force_book_label), FadeOut(force_table_label))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Normal Distribution Visualization\"\nanimation: Begin with a title slide with the title, then animate a normal distribution curve with the mean at the center and the standard deviations marked off. Show a point moving along the curve to represent a value and its corresponding probability.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass NormalDistributionVisualization(Scene):\n    def construct(self):\n        title = Text(\"Normal Distribution Visualization\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        axes = Axes(\n            x_range=[-4, 4, 1],\n            y_range=[0, 0.5, 0.1],\n            axis_config={\"color\": BLUE},\n        )\n\n        mean = 0\n        std_dev = 1\n        curve = axes.plot(lambda x: np.exp(-0.5 * ((x - mean) / std_dev) ** 2) / (std_dev * np.sqrt(2 * np.pi)), color=WHITE)\n        curve_label = axes.get_graph_label(curve, label='\\\\sigma')\n\n        self.play(Create(axes), Write(curve_label))\n        self.play(Create(curve))\n        self.wait(1)\n\n        dot = Dot(color=RED).move_to(axes.c2p(0, 0))\n        self.play(FadeIn(dot))\n\n        def update_dot(mob, alpha):\n            x = interpolate(-3, 3, alpha)\n            y = np.exp(-0.5 * ((x - mean) / std_dev) ** 2) / (std_dev * np.sqrt(2 * np.pi))\n            mob.move_to(axes.c2p(x, y))\n\n        self.play(UpdateFromAlphaFunc(dot, update_dot), run_time=4, rate_func=there_and_back)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Radioactive Decay Simulation\"\nanimation: Begin with a title slide with the title, then animate a group of unstable nuclei decaying over time, with the number of undecayed nuclei decreasing exponentially to illustrate radioactive decay.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass RadioactiveDecaySimulation(Scene):\n    def construct(self):\n        title = Text(\"Radioactive Decay Simulation\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Parameters\n        start_nuclei = 50\n        half_life = 2  # seconds\n        decay_rate = 0.5  # half per half_life\n        simulation_time = 8  # seconds\n\n        # Create initial nuclei\n        nuclei = VGroup(*[Dot(radius=0.05, color=BLUE) for _ in range(start_nuclei)])\n        nuclei.arrange_in_grid(rows=5, buff=0.5)\n        self.play(ShowCreation(nuclei))\n        self.wait(1)\n\n        # Simulate decay\n        for t in range(1, simulation_time + 1):\n            decayed = int(start_nuclei * (decay_rate ** (t / half_life)))\n            to_decay = start_nuclei - decayed\n            start_nuclei = decayed\n\n            if to_decay > 0:\n                decaying_nuclei = nuclei[:to_decay]\n                self.play(decaying_nuclei.animate.set_opacity(0.2), rate_func=linear, run_time=1)\n            self.wait(1)\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Electric Field Visualization\"\nanimation: Begin with a title slide with the title, then animate a positive charge and a negative charge on the screen, with electric field lines emanating from the positive charge and terminating on the negative charge, visually illustrating the concept of an electric field.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ElectricFieldVisualization(Scene):\n    def construct(self):\n        title = Text(\"Electric Field Visualization\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Charges\n        positive_charge = Circle(color=RED, fill_opacity=1).scale(0.5)\n        positive_charge_text = Text(\"+\", font_size=48).move_to(positive_charge)\n        positive_charge_group = VGroup(positive_charge, positive_charge_text).shift(LEFT*2)\n\n        negative_charge = Circle(color=BLUE, fill_opacity=1).scale(0.5)\n        negative_charge_text = Text(\"-\", font_size=48).move_to(negative_charge)\n        negative_charge_group = VGroup(negative_charge, negative_charge_text).shift(RIGHT*2)\n\n        self.play(FadeIn(positive_charge_group), FadeIn(negative_charge_group))\n        self.wait(1)\n\n        # Electric field lines\n        field_lines = []\n        for angle in np.linspace(0, 2*np.pi, 16, endpoint=False):\n            start_point = positive_charge.get_center() + np.array([np.cos(angle), np.sin(angle), 0])\n            end_point = negative_charge.get_center() + np.array([np.cos(angle+np.pi), np.sin(angle+np.pi), 0])*0.5\n            line = Arrow(start_point, end_point, buff=0.1)\n            field_lines.append(line)\n\n        self.play(*[GrowArrow(line) for line in field_lines], run_time=2)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Understanding Torque\"\nanimation: Begin with a title slide with the title, then animate a wrench turning a bolt, with the force applied at a distance from the axis of rotation. Show how the concept of torque is calculated as the product of force and distance.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass TorqueAnimation(Scene):\n    def construct(self):\n        title = Text(\"Understanding Torque\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Setup wrench and bolt\n        wrench = Line(ORIGIN, RIGHT * 2, color=BLUE).shift(LEFT)\n        bolt = Circle(radius=0.2, color=WHITE).shift(RIGHT * 2)\n        force_arrow = Arrow(start=wrench.get_end(), end=wrench.get_end() + UP * 1, buff=0, color=YELLOW)\n        distance_line = DashedLine(start=bolt.get_center(), end=wrench.get_end(), color=PURPLE)\n\n        # Labels\n        force_label = MathTex(\"F\", color=YELLOW).next_to(force_arrow, UP, buff=0.1)\n        distance_label = MathTex(\"d\", color=PURPLE).next_to(distance_line, DOWN, buff=0.1)\n        torque_label = MathTex(r\"\\tau = F \\times d\", color=GREEN).shift(DOWN * 2)\n\n        self.play(FadeIn(bolt), GrowFromPoint(wrench, point=wrench.get_start()))\n        self.play(ShowCreation(force_arrow), Write(force_label))\n        self.play(ShowCreation(distance_line), Write(distance_label))\n        self.wait(1)\n        self.play(Write(torque_label))\n        self.wait(1)\n\n        # Animate wrench turning\n        wrench_turn = Rotating(wrench, about_point=bolt.get_center(), radians=PI/2)\n        bolt_turn = Rotating(bolt, about_point=bolt.get_center(), radians=PI/2)\n        self.play(wrench_turn, bolt_turn, run_time=2)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Wave Interference Demonstration\"\nanimation: Begin with a title slide with the title, then animate two wave sources producing waves that overlap and form an interference pattern. Show areas of constructive interference where waves amplify each other, and areas of destructive interference where waves cancel each other out.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass WaveInterference(Scene):\n    def construct(self):\n        title = Text(\"Wave Interference Demonstration\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Parameters for wave sources and waves\n        source_a = Dot(point=LEFT*2, color=BLUE)\n        source_b = Dot(point=RIGHT*2, color=RED)\n        waves_a = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=BLUE).move_to(source_a.get_center()) for i in range(1, 20)])\n        waves_b = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=RED).move_to(source_b.get_center()) for i in range(1, 20)])\n        \n        self.play(FadeIn(source_a), FadeIn(source_b))\n        self.play(AnimationGroup(*[GrowFromCenter(wave) for wave in waves_a], lag_ratio=0.1),\n                  AnimationGroup(*[GrowFromCenter(wave) for wave in waves_b], lag_ratio=0.1),\n                  run_time=4, rate_func=linear)\n        \n        interference_text = Text(\"Interference Pattern\", color=YELLOW).to_edge(UP)\n        self.play(Write(interference_text))\n        self.wait(2)\n\n        # Highlight areas of constructive and destructive interference\n        constructive_area = Circle(radius=1, color=YELLOW).move_to(0.5*LEFT)\n        destructive_area = Circle(radius=1, color=WHITE).move_to(1.5*RIGHT)\n        self.play(ShowCreation(constructive_area), ShowCreation(destructive_area))\n        self.wait(2)\n\n        self.play(FadeOut(constructive_area), FadeOut(destructive_area), FadeOut(interference_text),\n                  FadeOut(waves_a), FadeOut(waves_b), FadeOut(source_a), FadeOut(source_b))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Bernoulli's Principle in Action\"\n    animation: Begin with a title slide with the title, then animate fluid flowing through a constricted pipe. Show the velocity increasing and the pressure decreasing in the constricted area, illustrating Bernoulli's Principle in action.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass BernoullisPrinciple(Scene):\n    def construct(self):\n        title = Text(\"Bernoulli's Principle in Action\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Pipe\n        pipe_start = Rectangle(width=6, height=1, color=BLUE)\n        pipe_constriction = Rectangle(width=2, height=0.5, color=BLUE)\n        pipe_end = Rectangle(width=6, height=1, color=BLUE)\n\n        pipe_constriction.next_to(pipe_start, RIGHT, buff=0)\n        pipe_end.next_to(pipe_constriction, RIGHT, buff=0)\n\n        self.play(DrawBorderThenFill(pipe_start), DrawBorderThenFill(pipe_constriction), DrawBorderThenFill(pipe_end))\n        \n        # Fluid flow\n        fluid_particles_start = VGroup(*[Circle(radius=0.1, color=WHITE).move_to(pipe_start.get_left() + RIGHT * x + 0.2 * UP * np.random.rand()) for x in np.linspace(0.5, 5.5, 20)])\n        fluid_particles_constriction = VGroup(*[Circle(radius=0.05, color=WHITE).move_to(pipe_constriction.get_left() + RIGHT * x + 0.1 * UP * np.random.rand()) for x in np.linspace(0.5, 1.5, 20)])\n        fluid_particles_end = VGroup(*[Circle(radius=0.1, color=WHITE).move_to(pipe_end.get_left() + RIGHT * x + 0.2 * UP * np.random.rand()) for x in np.linspace(0.5, 5.5, 20)])\n\n        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 6 * RIGHT)) for particle in fluid_particles_start], lag_ratio=0.1))\n        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 2 * RIGHT)) for particle in fluid_particles_constriction], lag_ratio=0.05))\n        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 6 * RIGHT)) for particle in fluid_particles_end], lag_ratio=0.1))\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Polarization of Light\"\nanimation: Begin with a title slide with the title, then animate a light wave passing through a polarizing filter. Show the wave being blocked when the filter is rotated perpendicular to the plane of polarization, demonstrating the concept of polarization.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass PolarizationOfLight(Scene):\n    def construct(self):\n        title = Text(\"Polarization of Light\").scale(1.5)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create a light wave\n        light_wave = FunctionGraph(lambda x: np.sin(x), x_range=[-PI, PI], color=YELLOW)\n        light_wave.move_to(3*LEFT)\n        self.play(ShowCreation(light_wave))\n        self.wait(1)\n\n        # Create a polarizing filter\n        filter_rect = Rectangle(height=2, width=0.2, fill_opacity=1, color=GREY)\n        filter_rect.next_to(light_wave, RIGHT, buff=1)\n        self.play(ShowCreation(filter_rect))\n        self.wait(1)\n\n        # Animate light wave passing through the filter\n        passed_wave = FunctionGraph(lambda x: np.sin(x), x_range=[-PI, PI], color=YELLOW)\n        passed_wave.next_to(filter_rect, RIGHT, buff=1)\n        self.play(Transform(light_wave, passed_wave))\n        self.wait(1)\n\n        # Rotate filter to block the wave\n        self.play(Rotate(filter_rect, angle=PI/2))\n        blocked_wave = FunctionGraph(lambda x: 0*x, x_range=[-PI, PI], color=RED)\n        blocked_wave.next_to(filter_rect, RIGHT, buff=1)\n        self.play(Transform(light_wave, blocked_wave))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Odd and Even Numbers on a Number Line\"\nanimation: Begin with a title slide with the title, then animate a number line with even numbers on one side and odd numbers on the other, visually distinguishing between them.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass OddEvenNumberLine(Scene):\n    def construct(self):\n        title = Text(\"Odd and Even Numbers on a Number Line\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        number_line = NumberLine(x_range=[-10, 10, 2], length=10, color=BLUE, include_numbers=True)\n        self.play(Create(number_line))\n        self.wait(1)\n\n        even_numbers = VGroup()\n        odd_numbers = VGroup()\n\n        for x in range(-10, 11, 2):\n            if x % 2 == 0:\n                even_dot = Dot(number_line.n2p(x), color=GREEN)\n                even_numbers.add(even_dot)\n            else:\n                odd_dot = Dot(number_line.n2p(x), color=RED)\n                odd_numbers.add(odd_dot)\n\n        self.play(FadeIn(even_numbers), FadeIn(odd_numbers))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Counting by Tens\"\nanimation: Begin with a title slide with the title, then show a number line with multiples of ten highlighted, and animate a point jumping from one multiple to the next, demonstrating counting by tens.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass CountingByTens(Scene):\n    def construct(self):\n        title = Text(\"Counting by Tens\").scale(1.5)\n        self.play(Write(title))\n        self.wait(1)\n        self.play(FadeOut(title))\n\n        number_line = NumberLine(\n            x_range=[0, 100, 10],\n            length=10,\n            color=BLUE,\n            include_numbers=True,\n            label_direction=DOWN,\n        )\n\n        self.play(Create(number_line))\n        self.wait(1)\n\n        for x in range(0, 101, 10):\n            dot = Dot(point=number_line.number_to_point(x), color=YELLOW)\n            self.play(MoveAlongPath(dot, Line(start=dot.get_center(), end=number_line.number_to_point(x))), run_time=0.5)\n            self.wait(0.5)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Exploring Triangle Types\"\n    animation: Begin with a title slide with the title, then animate and display an equilateral triangle, an isosceles triangle, and a scalene triangle, highlighting their differences in side lengths and angles.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass TriangleTypes(Scene):\n    def construct(self):\n        title = Text(\"Exploring Triangle Types\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Equilateral Triangle\n        equilateral_triangle = Polygon([0, 0, 0], [2, 0, 0], [1, np.sqrt(3), 0])\n        equilateral_label = Text(\"Equilateral\", font_size=24).next_to(equilateral_triangle, DOWN)\n        self.play(Create(equilateral_triangle))\n        self.play(Write(equilateral_label))\n        self.wait(2)\n        self.play(FadeOut(equilateral_triangle), FadeOut(equilateral_label))\n\n        # Isosceles Triangle\n        isosceles_triangle = Polygon([0, 0, 0], [2, 0, 0], [1, 1.5, 0])\n        isosceles_label = Text(\"Isosceles\", font_size=24).next_to(isosceles_triangle, DOWN)\n        self.play(Create(isosceles_triangle))\n        self.play(Write(isosceles_label))\n        self.wait(2)\n        self.play(FadeOut(isosceles_triangle), FadeOut(isosceles_label))\n\n        # Scalene Triangle\n        scalene_triangle = Polygon([0, 0, 0], [2.5, 0, 0], [2, 1.5, 0])\n        scalene_label = Text(\"Scalene\", font_size=24).next_to(scalene_triangle, DOWN)\n        self.play(Create(scalene_triangle))\n        self.play(Write(scalene_label))\n        self.wait(2)\n        self.play(FadeOut(scalene_triangle), FadeOut(scalene_label))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Complementary Colors and Neutral Tones\"\n    animation: Begin with a title slide with the title, then show a color wheel with complementary colors positioned opposite each other. Next, animate the mixing of these complementary colors to create neutral tones, demonstrating how they cancel each other out.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ComplementaryColors(Scene):\n    def construct(self):\n        title = Text(\"Complementary Colors and Neutral Tones\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create color wheel\n        colors = [RED, YELLOW, BLUE, ORANGE, GREEN, PURPLE]\n        wheel = VGroup(*[AnnularSector(inner_radius=0.5, outer_radius=1, angle=PI/3, start_angle=PI/3 * i, color=color) for i, color in enumerate(colors)])\n        self.play(Create(wheel))\n        self.wait(2)\n\n        # Highlight complementary colors\n        comp_pairs = [(RED, GREEN), (YELLOW, PURPLE), (BLUE, ORANGE)]\n        for color1, color2 in comp_pairs:\n            self.play(wheel.animate.set_color_by_gradient(color1, color2))\n            self.wait(1)\n\n        # Mix to neutral tones\n        neutral_wheel = wheel.copy()\n        neutral_color = GREY\n        for sector in neutral_wheel:\n            sector.set_color(neutral_color)\n\n        self.play(Transform(wheel, neutral_wheel))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"The Power of the Lever\"\nanimation: Begin with a title slide with the title, then animate a lever with a fulcrum, effort, and load, demonstrating how applying a small force at one end can lift a heavy load at the other end, showcasing the mechanical advantage of the lever.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass LeverAnimation(Scene):\n    def construct(self):\n        # Title\n        title = Text(\"The Power of the Lever\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Lever setup\n        lever = Line(LEFT * 5, RIGHT * 5, color=WHITE)\n        fulcrum = Triangle().scale(0.5).rotate(PI).move_to(DOWN * 0.25)\n        load = Square().scale(0.5).set_fill(BLUE, opacity=0.8).move_to(lever.get_start() + DOWN * 0.5)\n        effort_point = Circle(radius=0.2, color=YELLOW).move_to(lever.get_end() + DOWN * 0.2)\n\n        self.play(Create(lever), GrowFromPoint(fulcrum, point=lever.get_center()), FadeIn(load), FadeIn(effort_point))\n        self.wait(1)\n\n        # Demonstrate lever principle\n        for _ in range(2):\n            self.play(lever.animate.rotate(PI/6, about_point=fulcrum.get_center()), rate_func=there_and_back, run_time=2)\n            self.play(load.animate.shift(UP * 0.5), effort_point.animate.shift(DOWN * 0.5))\n            self.play(load.animate.shift(DOWN * 0.5), effort_point.animate.shift(UP * 0.5))\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"States of Matter Visualization\"\n    animation: Begin with a title slide with the title, then animate molecules in solid, liquid, and gas states, showing their different movement patterns and densities. The solid state should show molecules in a fixed position, the liquid state should show molecules moving around but staying close together, and the gas state should show molecules moving freely and far apart from each other.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass StatesOfMatter(Scene):\n    def construct(self):\n        title = Text(\"States of Matter Visualization\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Solid state\n        solid_molecules = VGroup(*[Dot(radius=0.05, color=BLUE) for _ in range(25)])\n        solid_molecules.arrange_in_grid(rows=5, cols=5, buff=0.2)\n        self.play(ShowCreation(solid_molecules))\n        self.wait(2)\n\n        # Transition to liquid state\n        self.play(solid_molecules.animate.arrange_in_grid(rows=5, cols=5, buff=0.5), run_time=2)\n        for molecule in solid_molecules:\n            self.play(molecule.animate.shift(UP*0.1 + RIGHT*0.1), run_time=0.5, rate_func=there_and_back)\n            self.play(molecule.animate.shift(DOWN*0.1 + LEFT*0.1), run_time=0.5, rate_func=there_and_back)\n        self.wait(2)\n\n        # Transition to gas state\n        self.play(FadeOut(solid_molecules))\n        gas_molecules = VGroup(*[Dot(radius=0.05, color=RED) for _ in range(15)])\n        self.play(ShowCreation(gas_molecules))\n        for molecule in gas_molecules:\n            self.play(molecule.animate.shift(UP*3 + RIGHT*3), run_time=3, rate_func=linear)\n            self.play(molecule.animate.shift(DOWN*3 + LEFT*3), run_time=3, rate_func=linear)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Fractions on a Number Line\"\nanimation: Begin with a title slide with the title, then animate a number line divided into equal parts, highlighting fractions such as 1/2, 1/3, and 1/4 to visually represent their positions on the number line.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass FractionsOnNumberLine(Scene):\n    def construct(self):\n        title = Text(\"Fractions on a Number Line\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        number_line = NumberLine(x_range=[0, 1, 0.25], length=10, include_numbers=True, label_direction=DOWN)\n        self.play(Create(number_line))\n        self.wait(1)\n\n        fractions = [1/2, 1/3, 1/4]\n        colors = [RED, GREEN, BLUE]\n\n        for fraction, color in zip(fractions, colors):\n            dot = Dot(color=color).move_to(number_line.number_to_point(fraction))\n            self.play(GrowFromCenter(dot))\n            self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Exploring Polygons\"\nanimation: Begin with a title slide with the title, then animate different polygons such as triangles, quadrilaterals, pentagons, etc., highlighting their number of sides and angles.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ExploringPolygons(Scene):\n    def construct(self):\n        title = Text(\"Exploring Polygons\").scale(1.2)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        polygons = [\n            (Triangle(), \"Triangle\", 3),\n            (Square(), \"Quadrilateral\", 4),\n            (RegularPolygon(5), \"Pentagon\", 5),\n            (RegularPolygon(6), \"Hexagon\", 6),\n            (RegularPolygon(7), \"Heptagon\", 7),\n            (RegularPolygon(8), \"Octagon\", 8),\n        ]\n\n        for poly, name, sides in polygons:\n            poly_text = Text(name, font_size=24).next_to(poly, UP)\n            sides_text = Text(f\"Sides: {sides}\", font_size=24).next_to(poly, DOWN)\n            self.play(Create(poly), Write(poly_text), Write(sides_text))\n            self.wait(2)\n            self.play(FadeOut(poly), FadeOut(poly_text), FadeOut(sides_text))\n\n        self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Symmetry in Shapes\"\nanimation: Begin with a title slide with the title, then animate shapes with reflectional and rotational symmetry. Show the reflection lines for shapes with reflectional symmetry and the rotation points for shapes with rotational symmetry.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass SymmetryInShapes(Scene):\n    def construct(self):\n        title = Text(\"Symmetry in Shapes\").scale(1.5)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Reflectional Symmetry\n        square = Square(side_length=2).shift(LEFT*3)\n        line_of_symmetry = DashedLine(start=square.get_top(), end=square.get_bottom()).shift(LEFT*3)\n        self.play(Create(square), Create(line_of_symmetry))\n        self.wait(1)\n\n        # Rotational Symmetry\n        circle = Circle(radius=1).shift(RIGHT*3)\n        dot = Dot(point=circle.get_center()).shift(RIGHT*3)\n        self.play(Create(circle), FadeIn(dot))\n        self.wait(1)\n\n        # Animate rotation to show rotational symmetry\n        self.play(Rotate(circle, angle=PI/2, about_point=circle.get_center()), Rotate(dot, angle=PI/2, about_point=dot.get_center()))\n        self.wait(1)\n\n        self.play(FadeOut(square), FadeOut(line_of_symmetry), FadeOut(circle), FadeOut(dot))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Exploring Parallel and Perpendicular Lines\"\nanimation: Begin with a title slide with the title, then animate two sets of parallel lines and two sets of perpendicular lines, emphasizing their constant distance or 90-degree angle respectively.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ParallelPerpendicular(Scene):\n    def construct(self):\n        title = Text(\"Exploring Parallel and Perpendicular Lines\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Parallel lines\n        parallel_lines_1 = VGroup(*[Line(UP*3 + LEFT*4 + RIGHT*x, DOWN*3 + LEFT*4 + RIGHT*x) for x in range(0, 3)])\n        parallel_lines_2 = VGroup(*[Line(UP*3 + RIGHT*4 + LEFT*x, DOWN*3 + RIGHT*4 + LEFT*x) for x in range(0, 3)])\n        self.play(ShowCreation(parallel_lines_1), ShowCreation(parallel_lines_2))\n        self.wait(2)\n        self.play(FadeOut(parallel_lines_1), FadeOut(parallel_lines_2))\n\n        # Perpendicular lines\n        perpendicular_lines_1 = VGroup(Line(UP*3, DOWN*3), Line(LEFT*3, RIGHT*3))\n        perpendicular_lines_2 = VGroup(Line(UP*2 + LEFT*2, DOWN*2 + LEFT*2), Line(UP*2 + LEFT*2, UP*2 + RIGHT*2))\n        self.play(ShowCreation(perpendicular_lines_1), ShowCreation(perpendicular_lines_2))\n        self.wait(2)\n        self.play(FadeOut(perpendicular_lines_1), FadeOut(perpendicular_lines_2))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Varieties of Leaves\"\nanimation: Begin with a title slide with the title, then animate simple, compound, and needle-like leaves, highlighting their differences in shape and structure.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass LeavesAnimation(Scene):\n    def construct(self):\n        title = Text(\"Varieties of Leaves\").scale(1.2)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Simple Leaf\n        simple_leaf = Ellipse(width=2.0, height=1.0, color=GREEN).shift(LEFT*4)\n        simple_leaf_label = Text(\"Simple Leaf\", font_size=24).next_to(simple_leaf, DOWN)\n        self.play(Create(simple_leaf), Write(simple_leaf_label))\n        self.wait(1)\n\n        # Compound Leaf\n        compound_leaf = VGroup(\n            Ellipse(width=0.5, height=0.25, color=GREEN).shift(LEFT*0.5 + UP*0.75),\n            Ellipse(width=0.5, height=0.25, color=GREEN).shift(RIGHT*0.5 + UP*0.75),\n            Ellipse(width=0.5, height=0.25, color=GREEN).shift(LEFT*0.5 + DOWN*0.75),\n            Ellipse(width=0.5, height=0.25, color=GREEN).shift(RIGHT*0.5 + DOWN*0.75),\n            Line(ORIGIN, UP*0.75, color=WHITE),\n        ).shift(RIGHT*0)\n        compound_leaf_label = Text(\"Compound Leaf\", font_size=24).next_to(compound_leaf, DOWN)\n        self.play(Create(compound_leaf), Write(compound_leaf_label))\n        self.wait(1)\n\n        # Needle-like Leaf\n        needle_leaf = Line(UP*0.5, DOWN*0.5, color=GREEN).shift(RIGHT*4)\n        needle_leaf_label = Text(\"Needle-like Leaf\", font_size=24).next_to(needle_leaf, DOWN)\n        self.play(Create(needle_leaf), Write(needle_leaf_label))\n        self.wait(2)\n\n        # Grouping all leaves\n        all_leaves = VGroup(simple_leaf, simple_leaf_label, compound_leaf, compound_leaf_label, needle_leaf, needle_leaf_label)\n        self.play(all_leaves.animate.scale(0.6).arrange(RIGHT, buff=1).to_edge(DOWN))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Law of Reflection\"\nanimation: Begin with a title slide with the title, then animate a light ray hitting a flat surface and reflecting off it, with the angle of incidence equal to the angle of reflection, demonstrating the law of reflection.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass LawOfReflection(Scene):\n    def construct(self):\n        title = Text(\"Law of Reflection\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create surface\n        surface = Line(LEFT * 5, RIGHT * 5)\n        self.play(Create(surface))\n\n        # Create incident ray\n        incident_ray = Arrow(start=LEFT * 3 + UP * 2, end=ORIGIN, buff=0, color=YELLOW)\n        self.play(GrowArrow(incident_ray))\n\n        # Create reflected ray\n        reflected_ray = Arrow(start=ORIGIN, end=RIGHT * 3 + UP * 2, buff=0, color=YELLOW)\n        self.play(GrowArrow(reflected_ray))\n\n        # Angles\n        angle_of_incidence = Angle(incident_ray, surface, radius=0.5, other_angle=True, color=WHITE)\n        angle_of_reflection = Angle(surface, reflected_ray, radius=0.5, color=WHITE)\n        self.play(Create(angle_of_incidence), Create(angle_of_reflection))\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Mixtures and Solutions\"\nanimation: Begin with a title slide with the title, then animate a mixture of different substances being poured into a container, followed by the substances dissolving into a solution, demonstrating the process of dissolution.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass MixturesAndSolutions(Scene):\n    def construct(self):\n        # Title\n        title = Text(\"Mixtures and Solutions\", font_size=40)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Container\n        container = Rectangle(height=4, width=3, color=WHITE)\n        self.play(Create(container))\n        self.wait(1)\n\n        # Substances\n        substance1 = Circle(radius=0.2, color=BLUE).move_to(3*UP + 2*LEFT)\n        substance2 = Circle(radius=0.2, color=RED).move_to(3*UP + 2*RIGHT)\n        self.play(FadeIn(substance1), FadeIn(substance2))\n        self.wait(1)\n\n        # Pouring substances\n        self.play(substance1.animate.move_to(container.get_top() + 0.5*DOWN), \n                  substance2.animate.move_to(container.get_top() + 0.5*DOWN))\n        self.wait(1)\n\n        # Dissolving substances\n        dissolved_substance1 = substance1.copy().set_opacity(0.2)\n        dissolved_substance2 = substance2.copy().set_opacity(0.2)\n        self.play(Transform(substance1, dissolved_substance1), \n                  Transform(substance2, dissolved_substance2),\n                  substance1.animate.scale(5),\n                  substance2.animate.scale(5))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Magnetic Poles Interaction\"\n    animation: Begin with a title slide with the title, then animate a bar magnet with clearly labeled north and south poles. Show the attraction between the north and south poles of two magnets, and the repulsion between like poles.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass MagneticPolesInteraction(Scene):\n    def construct(self):\n        title = Text(\"Magnetic Poles Interaction\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Magnet 1\n        magnet1 = Rectangle(color=BLUE, height=1, width=2)\n        north1 = Text(\"N\", color=WHITE).move_to(magnet1.get_left() + RIGHT * 0.3)\n        south1 = Text(\"S\", color=WHITE).move_to(magnet1.get_right() + LEFT * 0.3)\n        magnet1_group = VGroup(magnet1, north1, south1).shift(LEFT*3)\n\n        # Magnet 2\n        magnet2 = Rectangle(color=RED, height=1, width=2)\n        north2 = Text(\"N\", color=WHITE).move_to(magnet2.get_left() + RIGHT * 0.3)\n        south2 = Text(\"S\", color=WHITE).move_to(magnet2.get_right() + LEFT * 0.3)\n        magnet2_group = VGroup(magnet2, north2, south2).shift(RIGHT*3)\n\n        self.play(FadeIn(magnet1_group), FadeIn(magnet2_group))\n        self.wait(1)\n\n        # Attraction\n        self.play(magnet1_group.animate.shift(RIGHT*2), magnet2_group.animate.shift(LEFT*2))\n        self.wait(1)\n\n        # Repulsion setup\n        magnet2_group.generate_target()\n        magnet2_group.target.rotate(PI).move_to(RIGHT*3)\n\n        self.play(MoveToTarget(magnet2_group))\n        self.wait(1)\n\n        # Repulsion\n        self.play(magnet1_group.animate.shift(RIGHT*0.5), magnet2_group.animate.shift(LEFT*0.5))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Exploring Rectangles: Area and Perimeter\"\n    animation: Begin with a title slide with the title, then animate rectangles with different dimensions, calculating and displaying their area (length x width) and perimeter (2 x length + 2 x width) in a visually engaging way.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass RectangleAnimation(Scene):\n    def construct(self):\n        title = Text(\"Exploring Rectangles: Area and Perimeter\").scale(0.7)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        rectangles = [\n            (4, 2),\n            (3, 3),\n            (6, 1),\n        ]\n\n        for length, width in rectangles:\n            rectangle = Rectangle(width=width, height=length)\n            area_text = Text(f\"Area: {length * width}\", font_size=24).next_to(rectangle, DOWN)\n            perimeter_text = Text(f\"Perimeter: {2 * (length + width)}\", font_size=24).next_to(area_text, DOWN)\n\n            self.play(Create(rectangle))\n            self.play(Write(area_text), Write(perimeter_text))\n            self.wait(2)\n            self.play(FadeOut(rectangle), FadeOut(area_text), FadeOut(perimeter_text))\n\n        self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Water Displacement Demonstration\"\nanimation: Begin with a title slide with the title, then animate an object being submerged in water, with the water level rising by an amount equal to the volume of the object, illustrating the principle of water displacement.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass WaterDisplacement(Scene):\n    def construct(self):\n        title = Text(\"Water Displacement Demonstration\").scale(0.5)\n        self.play(Write(title))\n        self.wait(1)\n        self.play(FadeOut(title))\n\n        # Container\n        container = Rectangle(height=6, width=4).set_fill(BLUE, opacity=0.5).set_stroke(width=2)\n        self.play(Create(container))\n\n        # Water\n        water = Rectangle(height=2, width=3.8).set_fill(BLUE, opacity=0.7).set_stroke(width=0)\n        water.shift(DOWN * 1)\n        self.play(Create(water))\n\n        # Object\n        object = Circle(radius=0.5).set_fill(GRAY, opacity=1).set_stroke(width=2)\n        object.move_to(UP * 3)\n        self.play(Create(object))\n\n        # Animate object submersion\n        self.play(object.animate.shift(DOWN * 4))\n\n        # Animate water displacement\n        displaced_water = water.copy().stretch_to_fit_height(water.height + 0.5)\n        self.play(Transform(water, displaced_water))\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Multiplication as Repeated Addition\"\nanimation: Begin with a title slide with the title, then animate groups of objects being added together repeatedly, transitioning to multiplication by showing the equation 3 + 3 + 3 = 3 \u00d7 3.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass MultiplicationScene(Scene):\n    def construct(self):\n        title = Text(\"Multiplication as Repeated Addition\").scale(0.7)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create groups of objects (circles in this case)\n        group1 = VGroup(*[Circle(radius=0.2, color=BLUE) for _ in range(3)])\n        group1.arrange(RIGHT, buff=0.5)\n        group2 = group1.copy().next_to(group1, DOWN, buff=1)\n        group3 = group1.copy().next_to(group2, DOWN, buff=1)\n\n        # Animate groups appearing one after the other\n        self.play(ShowCreation(group1))\n        self.wait(0.5)\n        self.play(ShowCreation(group2))\n        self.wait(0.5)\n        self.play(ShowCreation(group3))\n        self.wait(1)\n\n        # Transition to multiplication\n        equals_text = Text(\"=\").next_to(group3, RIGHT, buff=1)\n        multiplication_text = Text(\"3 \u00d7 3\").next_to(equals_text, RIGHT, buff=0.5)\n        plus_signs = VGroup(\n            *[Text(\"+\").next_to(group1, RIGHT, buff=0.2).shift(0.5*DOWN),\n              Text(\"+\").next_to(group2, RIGHT, buff=0.2).shift(0.5*DOWN)]\n        )\n\n        self.play(Write(plus_signs))\n        self.wait(0.5)\n        self.play(Write(equals_text), Write(multiplication_text))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Divisibility Rules Explained\"\nanimation: Begin with a title slide with the title, then animate the process of checking if a number is divisible by 2, 3, 5, or 10 based on its last digit or sum of digits, illustrating the different rules visually.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass DivisibilityRules(Scene):\n    def construct(self):\n        # Title\n        title = Text(\"Divisibility Rules Explained\", font_size=40)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Divisible by 2\n        divisible_by_2 = Text(\"Divisible by 2: Last digit is even\", font_size=24)\n        self.play(Write(divisible_by_2))\n        self.wait(2)\n        self.play(FadeOut(divisible_by_2))\n\n        # Divisible by 3\n        divisible_by_3 = Text(\"Divisible by 3: Sum of digits is divisible by 3\", font_size=24)\n        self.play(Write(divisible_by_3))\n        self.wait(2)\n        self.play(FadeOut(divisible_by_3))\n\n        # Divisible by 5\n        divisible_by_5 = Text(\"Divisible by 5: Last digit is 0 or 5\", font_size=24)\n        self.play(Write(divisible_by_5))\n        self.wait(2)\n        self.play(FadeOut(divisible_by_5))\n\n        # Divisible by 10\n        divisible_by_10 = Text(\"Divisible by 10: Last digit is 0\", font_size=24)\n        self.play(Write(divisible_by_10))\n        self.wait(2)\n        self.play(FadeOut(divisible_by_10))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Scaling on a Coordinate Plane\"\n    animation: Begin with a title slide with the title, then show a shape on a coordinate plane, and animate it being scaled by a factor of 2 or 3, visually demonstrating the concept of scaling in a geometric context.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ScalingAnimation(Scene):\n    def construct(self):\n        title = Text(\"Scaling on a Coordinate Plane\")\n        self.play(Write(title))\n        self.wait(1)\n        self.play(FadeOut(title))\n\n        axes = Axes(\n            x_range=[-5, 5],\n            y_range=[-5, 5],\n            axis_config={\"color\": BLUE},\n        )\n        self.play(Create(axes))\n\n        square = Square(color=RED).move_to(axes.c2p(0, 0))\n        self.play(Create(square))\n        self.wait(1)\n\n        scaled_square = square.copy().scale(2)\n        self.play(Transform(square, scaled_square))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Complementary and Supplementary Angles\"\nanimation: Begin with a title slide with the title, then animate two angles adding up to 90\u00b0 (complementary) and 180\u00b0 (supplementary), showcasing their relationship and how they form a straight line or a right angle.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ComplementaryAndSupplementary(Scene):\n    def construct(self):\n        title = Text(\"Complementary and Supplementary Angles\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Complementary angles\n        line1 = Line(ORIGIN, 2*RIGHT)\n        line2 = Line(ORIGIN, 2*UP).rotate_about_origin(PI/4)\n        angle1 = Angle(line1, line2, radius=0.5, color=YELLOW)\n        self.play(Create(line1), Create(line2), GrowFromCenter(angle1))\n        self.wait(1)\n\n        comp_text = Text(\"Complementary\", font_size=24).next_to(angle1, UP)\n        self.play(Write(comp_text))\n        self.wait(2)\n        self.play(FadeOut(line1), FadeOut(line2), FadeOut(angle1), FadeOut(comp_text))\n\n        # Supplementary angles\n        line3 = Line(ORIGIN, 2*RIGHT)\n        line4 = Line(ORIGIN, 2*LEFT)\n        angle2 = Angle(line3, line4, radius=0.5, other_angle=True, color=GREEN)\n        self.play(Create(line3), Create(line4), GrowFromCenter(angle2))\n        self.wait(1)\n\n        supp_text = Text(\"Supplementary\", font_size=24).next_to(angle2, UP, buff=0.5)\n        self.play(Write(supp_text))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Circle Diameter and Radius Relationship\"\nanimation: Begin with a title slide with the title, then animate a circle with its diameter and radius labeled, showing the relationship between them (diameter = 2 \u00d7 radius).\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass CircleDiameterRadius(Scene):\n    def construct(self):\n        title = Text(\"Circle Diameter and Radius Relationship\").scale(0.5)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        circle = Circle(radius=2)\n        diameter = Line(start=circle.get_left(), end=circle.get_right(), color=BLUE)\n        radius = Line(start=circle.get_center(), end=circle.get_right(), color=RED)\n\n        diameter_label = Tex(\"Diameter = 2 $\\\\times$ Radius\").next_to(circle, DOWN)\n        radius_label = Tex(\"Radius\", color=RED).next_to(radius, DOWN)\n\n        self.play(Create(circle))\n        self.play(ShowCreation(diameter), ShowCreation(radius))\n        self.play(Write(diameter_label), Write(radius_label))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Fraction of a Whole Number\"\n    animation: Begin with a title slide with the title, then animate dividing a whole number into equal parts to find a fraction of it, such as showing 1/4 of 20 by dividing 20 into 4 equal parts.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass FractionOfWhole(Scene):\n    def construct(self):\n        title = Text(\"Fraction of a Whole Number\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        whole_number = 20\n        fraction = 1/4\n        parts = int(1/fraction)\n\n        number_line = NumberLine(x_range=[0, whole_number+1, 1], length=10, include_numbers=True, numbers_to_exclude=[whole_number+1])\n        self.play(Create(number_line))\n        self.wait(1)\n\n        divisions = [number_line.number_to_point(i) for i in range(0, whole_number+1, whole_number//parts)]\n        rects = [\n            Rectangle(width=number_line.number_to_point(1)[0] - number_line.number_to_point(0)[0], height=0.5)\n            .move_to(number_line.number_to_point(i) + UP * 0.25)\n            for i in range(0, whole_number, whole_number//parts)\n        ]\n\n        for rect in rects:\n            self.play(Create(rect), run_time=0.5)\n        self.wait(1)\n\n        highlight_rect = Rectangle(\n            width=(number_line.number_to_point(whole_number//parts)[0] - number_line.number_to_point(0)[0]) * fraction,\n            height=0.75, color=YELLOW\n        ).move_to(number_line.number_to_point((whole_number//parts) * fraction / 2) + UP * 0.25)\n\n        self.play(Create(highlight_rect))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Calculating Area of Rectangles\"\n    animation: Begin with a title slide with the title, then animate displaying rectangles with varying lengths and widths. Show the calculation of their areas using the formula A = L \u00d7 W for each rectangle.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass RectangleArea(Scene):\n    def construct(self):\n        title = Text(\"Calculating Area of Rectangles\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        rectangles = [\n            (4, 2),\n            (3, 3),\n            (5, 1)\n        ]\n\n        for length, width in rectangles:\n            rectangle = Rectangle(width=width, height=length, color=BLUE)\n            area_text = Text(f\"A = {length} \u00d7 {width} = {length * width}\", font_size=24)\n            area_calculation = VGroup(rectangle, area_text).arrange(DOWN)\n\n            self.play(Create(rectangle))\n            self.wait(1)\n            self.play(Write(area_text))\n            self.wait(2)\n            self.play(FadeOut(area_calculation))\n\n        self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"The Inclined Plane in Action\"\nanimation: Begin with a title slide with the title, then animate an object being pushed up an inclined plane, demonstrating how the incline reduces the force required to move the object uphill.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass InclinedPlane(Scene):\n    def construct(self):\n        title = Text(\"The Inclined Plane in Action\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create inclined plane\n        plane = Polygon([0, 0, 0], [3, 0, 0], [3, 1.5, 0], [0, 0, 0], color=WHITE)\n        self.play(Create(plane))\n        \n        # Create object\n        obj = Dot([2.5, 0.75, 0], color=RED)\n        self.play(FadeIn(obj))\n        \n        # Animate object moving up the plane\n        self.play(obj.animate.shift([-2, 1, 0]), run_time=2, rate_func=linear)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Converting Fractions to Decimals\"\nanimation: Begin with a title slide with the title, then animate showing a fraction on the screen and demonstrate the process of converting it to a decimal by dividing the numerator by the denominator.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ConvertFractionsToDecimals(Scene):\n    def construct(self):\n        title = Text(\"Converting Fractions to Decimals\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        fraction = MathTex(r\"\\frac{3}{4}\")\n        self.play(Write(fraction))\n        self.wait(1)\n\n        equals = MathTex(\"=\")\n        equals.next_to(fraction, RIGHT)\n        self.play(Write(equals))\n\n        decimal = DecimalNumber(3/4, num_decimal_places=2)\n        decimal.next_to(equals, RIGHT)\n        self.play(TransformFromCopy(fraction, decimal))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Reflection and Rotation of Shapes\"\nanimation: Begin with a title slide with the title, then display a shape and animate its reflection across a line followed by its rotation around a point, showcasing the transformation of the shape.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ReflectionAndRotation(Scene):\n    def construct(self):\n        title = Text(\"Reflection and Rotation of Shapes\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create a shape\n        square = Square(color=BLUE, fill_opacity=0.5)\n        self.play(Create(square))\n        self.wait(1)\n\n        # Reflection line\n        line = DashedLine(start=3*UP, end=3*DOWN, color=WHITE)\n        self.play(ShowCreation(line))\n        self.wait(1)\n\n        # Reflect the square across the line\n        reflected_square = square.copy()\n        self.play(reflected_square.animate.apply_function(lambda p: np.array([-p[0], p[1], p[2]])))\n        self.wait(1)\n\n        # Rotation around a point\n        self.play(Rotate(square, angle=PI/2), Rotate(reflected_square, angle=-PI/2))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Energy Conversion in a Roller Coaster\"\n    animation: Begin with a title slide with the title, then animate a roller coaster track with a cart moving along it. Show the cart at the top of a hill with high potential energy, then descending down the hill converting potential energy into kinetic energy as it gains speed.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass RollerCoaster(Scene):\n    def construct(self):\n        title = Text(\"Energy Conversion in a Roller Coaster\").scale(0.7)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Roller Coaster Track\n        track_start = 3 * UP + 5 * LEFT\n        track_end = 3 * UP + 5 * RIGHT\n        track = VMobject()\n        track.set_points_as_corners([track_start, [0, 3, 0], [0, 0, 0], [3, 0, 0], track_end])\n        track.make_smooth()\n        self.play(Create(track))\n\n        # Cart\n        cart = Dot(track_start, color=RED)\n        self.play(FadeIn(cart))\n\n        # Potential Energy at the top\n        potential_energy_text = Text(\"High Potential Energy\", font_size=24).next_to(cart, UP)\n        self.play(Write(potential_energy_text))\n        self.wait(1)\n        self.play(FadeOut(potential_energy_text))\n\n        # Move the cart along the track\n        self.play(MoveAlongPath(cart, track), rate_func=linear, run_time=4)\n\n        # Kinetic Energy at the bottom\n        kinetic_energy_text = Text(\"High Kinetic Energy\", font_size=24).next_to(cart, DOWN)\n        self.play(Write(kinetic_energy_text))\n        self.wait(2)\n        self.play(FadeOut(kinetic_energy_text), FadeOut(cart), FadeOut(track))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Multiplying Fractions Illustrated\"\nanimation: Begin with a title slide with the title, then animate two fractions side by side. Show the multiplication process by separately animating the multiplication of their numerators and denominators, illustrating how the fractions are multiplied together.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass MultiplyingFractions(Scene):\n    def construct(self):\n        title = Text(\"Multiplying Fractions Illustrated\").scale(0.9)\n        self.play(Write(title))\n        self.wait(1)\n        self.play(FadeOut(title))\n\n        fraction1 = MathTex(r\"\\frac{2}{3}\").scale(2)\n        fraction2 = MathTex(r\"\\frac{4}{5}\").scale(2).next_to(fraction1, RIGHT, buff=1)\n\n        self.play(Write(fraction1), Write(fraction2))\n        self.wait(1)\n\n        times = MathTex(r\"\\times\").scale(2).next_to(fraction1, RIGHT, buff=0.2)\n        self.play(Write(times))\n        self.wait(1)\n\n        equals = MathTex(r\"=\").scale(2).next_to(fraction2, RIGHT, buff=0.2)\n        self.play(Write(equals))\n        self.wait(1)\n\n        result_fraction = MathTex(r\"\\frac{2 \\times 4}{3 \\times 5}\").scale(2).next_to(equals, RIGHT, buff=0.2)\n        self.play(Write(result_fraction))\n        self.wait(1)\n\n        simplified_fraction = MathTex(r\"\\frac{8}{15}\").scale(2).next_to(equals, RIGHT, buff=0.2)\n        self.play(ReplacementTransform(result_fraction, simplified_fraction))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Balancing Equations: Isolating Variables\"\nanimation: Begin with a title slide with the title, then display a simple equation (e.g., x + 3 = 7), and animate the process of subtracting 3 from both sides to isolate the variable x, demonstrating the concept of balancing equations.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass BalancingEquations(Scene):\n    def construct(self):\n        title = Text(\"Balancing Equations: Isolating Variables\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        equation = Text(\"x + 3 = 7\")\n        self.play(Write(equation))\n        self.wait(1)\n\n        subtract_text = Text(\"-3\", color=RED).next_to(equation, DOWN)\n        self.play(Write(subtract_text))\n        self.wait(1)\n\n        equation_transformed = Text(\"x = 4\")\n        self.play(ReplacementTransform(equation, equation_transformed), FadeOut(subtract_text))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Probability of Coin Flips\"\nanimation: Begin with a title slide with the title, then animate flipping a coin multiple times and visually represent the probability of getting heads or tails. Show a bar graph or pie chart to illustrate the distribution of outcomes.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\nimport random\n\nclass CoinFlipProbability(Scene):\n    def construct(self):\n        title = Text(\"Probability of Coin Flips\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        outcomes = {\"Heads\": 0, \"Tails\": 0}\n        coins = VGroup()\n        for i in range(5):\n            coin = Circle().scale(0.5)\n            if random.random() < 0.5:\n                outcomes[\"Heads\"] += 1\n                coin.set_fill(WHITE, opacity=1)\n                heads_text = Text(\"H\", font_size=36).move_to(coin)\n                coin.add(heads_text)\n            else:\n                outcomes[\"Tails\"] += 1\n                coin.set_fill(BLACK, opacity=1)\n                tails_text = Text(\"T\", color=WHITE, font_size=36).move_to(coin)\n                coin.add(tails_text)\n            coins.add(coin)\n        \n        coins.arrange_in_grid(rows=1)\n        self.play(AnimationGroup(*[DrawBorderThenFill(coin) for coin in coins], lag_ratio=0.5))\n        self.wait(2)\n\n        bars = VGroup()\n        for outcome, count in outcomes.items():\n            bar = Rectangle(height=count, width=0.5, fill_opacity=1)\n            if outcome == \"Heads\":\n                bar.set_fill(WHITE)\n                bar.set_stroke(WHITE)\n            else:\n                bar.set_fill(BLACK)\n                bar.set_stroke(BLACK)\n            bars.add(bar)\n\n        bars.arrange(buff=1).to_edge(DOWN)\n        self.play(AnimationGroup(*[GrowFromCenter(bar) for bar in bars], lag_ratio=0.5))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Exploring Factors and Multiples\"\nanimation: Begin with a title slide with the title, then display a number on the screen and animate finding its factors (numbers that divide into it evenly) and multiples (products of the number and integers) in a visually engaging way.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass FactorsAndMultiples(Scene):\n    def construct(self):\n        title = Text(\"Exploring Factors and Multiples\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        number = 12\n        number_text = Text(str(number), font_size=72)\n        self.play(Write(number_text))\n        self.wait(1)\n\n        factors = []\n        multiples = [number * i for i in range(1, 6)]\n\n        for i in range(1, number + 1):\n            if number % i == 0:\n                factors.append(i)\n\n        factors_group = VGroup(*[Text(str(factor), font_size=36) for factor in factors])\n        multiples_group = VGroup(*[Text(str(multiple), font_size=36) for multiple in multiples])\n\n        factors_group.arrange(DOWN, center=False, aligned_edge=LEFT).to_edge(LEFT, buff=1)\n        multiples_group.arrange(DOWN, center=False, aligned_edge=RIGHT).to_edge(RIGHT, buff=1)\n\n        self.play(Transform(number_text, factors_group))\n        self.wait(1)\n        self.play(Transform(number_text, multiples_group))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Measuring Length in Metric Units\"\nanimation: Begin with a title slide with the title, then animate showing objects of different lengths being measured in millimeters, centimeters, and meters, highlighting the conversion between the units.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass MeasureLength(Scene):\n    def construct(self):\n        title = Text(\"Measuring Length in Metric Units\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Millimeters example\n        mm_line = Line(ORIGIN, RIGHT * 0.5, color=BLUE)\n        mm_text = Text(\"50mm\").next_to(mm_line, DOWN)\n        self.play(GrowFromCenter(mm_line), Write(mm_text))\n        self.wait(2)\n        self.play(FadeOut(mm_line), FadeOut(mm_text))\n\n        # Centimeters to millimeters conversion\n        cm_line = Line(ORIGIN, RIGHT * 2, color=GREEN)\n        cm_text = Text(\"2cm = 20mm\").next_to(cm_line, DOWN)\n        self.play(GrowFromCenter(cm_line), Write(cm_text))\n        self.wait(2)\n        self.play(FadeOut(cm_line), FadeOut(cm_text))\n\n        # Meters example\n        m_line = Line(ORIGIN, RIGHT * 5, color=RED)\n        m_text = Text(\"1m = 100cm\").next_to(m_line, DOWN)\n        self.play(GrowFromCenter(m_line), Write(m_text))\n        self.wait(2)\n        self.play(FadeOut(m_line), FadeOut(m_text))\n\n        # Conversion between units\n        conversion_text = Text(\"1m = 100cm = 1000mm\").scale(0.7)\n        self.play(Write(conversion_text))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Calculating Volumes of Cubes\"\n    animation: Begin with a title slide with the title, then animate displaying cubes with different side lengths, followed by animating the calculation of their volumes using the formula V = s\u00b3.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass CubeVolume(Scene):\n    def construct(self):\n        title = Text(\"Calculating Volumes of Cubes\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        side_lengths = [1, 2, 3]\n        for side_length in side_lengths:\n            cube = Cube(side_length=side_length).set_fill(BLUE, opacity=0.5)\n            formula = MathTex(f\"V = {side_length}^3 = {side_length ** 3}\")\n            formula.next_to(cube, DOWN)\n\n            self.play(Create(cube))\n            self.play(Write(formula))\n            self.wait(2)\n            self.play(FadeOut(cube), FadeOut(formula))\n\n        self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Exploring Equivalent Ratios\"\n    animation: Begin with a title slide with the title, then show two sets of numbers representing equivalent ratios (e.g., 2:3 and 4:6) and animate their proportional relationship by visually demonstrating how they are equal in value.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass EquivalentRatios(Scene):\n    def construct(self):\n        title = Text(\"Exploring Equivalent Ratios\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        ratio1 = Text(\"2:3\", color=BLUE).shift(UP*2)\n        ratio2 = Text(\"4:6\", color=YELLOW).next_to(ratio1, DOWN, buff=1.5)\n\n        self.play(Write(ratio1), Write(ratio2))\n        self.wait(1)\n\n        # Visual demonstration of equivalence\n        rect1 = Rectangle(height=2, width=3, color=BLUE).next_to(ratio1, DOWN, buff=0.5)\n        rect2 = Rectangle(height=4, width=6, color=YELLOW).next_to(ratio2, DOWN, buff=0.5).scale(0.5)\n\n        self.play(DrawBorderThenFill(rect1), DrawBorderThenFill(rect2))\n        self.wait(1)\n\n        equivalence = Text(\"These ratios are equivalent!\", color=GREEN).scale(0.7).next_to(rect2, DOWN, buff=0.5)\n        self.play(Write(equivalence))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Newton's First Law in Action\"\n    animation: Begin with a title slide with the title, then animate a stationary object remaining at rest, and a moving object continuing its motion at a constant velocity in a straight line, unless acted upon by an external force.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass NewtonsFirstLaw(Scene):\n    def construct(self):\n        title = Text(\"Newton's First Law in Action\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Stationary object\n        stationary_square = Square(color=BLUE, fill_opacity=1).shift(LEFT*3)\n        self.play(FadeIn(stationary_square))\n        self.wait(2)\n\n        # Moving object\n        moving_circle = Circle(color=RED, fill_opacity=1).shift(RIGHT*3)\n        self.play(FadeIn(moving_circle))\n        self.play(moving_circle.animate.shift(LEFT*6), run_time=2, rate_func=linear)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Subtracting Integers on a Number Line\"\nanimation: Begin with a title slide with the title, then animate a number line with integers marked on it. Show the process of subtracting positive and negative integers by moving left or right along the number line.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass SubtractingIntegers(Scene):\n    def construct(self):\n        # Title\n        title = Text(\"Subtracting Integers on a Number Line\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Number line\n        number_line = NumberLine(\n            x_range=[-10, 10, 1],\n            length=10,\n            color=WHITE,\n            include_numbers=True,\n            label_direction=DOWN,\n        )\n        self.play(Create(number_line))\n        self.wait(1)\n\n        # Example of subtracting positive integer (e.g., 3 - 2)\n        start_point = number_line.number_to_point(3)\n        end_point = number_line.number_to_point(1)\n        pointer = Triangle().move_to(start_point).set_color(RED)\n        self.play(FadeIn(pointer))\n        self.wait(1)\n        self.play(pointer.animate.move_to(end_point))\n        self.wait(2)\n\n        # Clearing for next example\n        self.play(FadeOut(pointer))\n        \n        # Example of subtracting negative integer (e.g., -2 - (-3))\n        start_point = number_line.number_to_point(-2)\n        end_point = number_line.number_to_point(1)\n        pointer = Triangle().move_to(start_point).set_color(BLUE)\n        self.play(FadeIn(pointer))\n        self.wait(1)\n        self.play(pointer.animate.move_to(end_point))\n        self.wait(2)\n\n        # End\n        self.play(FadeOut(pointer), FadeOut(number_line))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Exploring Quadrilaterals\"\nanimation: Begin with a title slide with the title, then animate examples of parallelograms, rhombuses, rectangles, squares, and trapezoids, highlighting their properties such as angles, sides, and symmetry.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass Quadrilaterals(Scene):\n    def construct(self):\n        title = Text(\"Exploring Quadrilaterals\").scale(1.2)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Parallelogram\n        parallelogram = Polygon([-1, 1, 0], [1, 1, 0], [2, -1, 0], [0, -1, 0], color=BLUE)\n        self.play(Create(parallelogram))\n        self.wait(1)\n        self.play(FadeOut(parallelogram))\n\n        # Rhombus\n        rhombus = Polygon([-1, 1, 0], [1, 1, 0], [2, -1, 0], [0, -1, 0], color=GREEN)\n        rhombus.scale(0.5).rotate(PI/4)\n        self.play(Create(rhombus))\n        self.wait(1)\n        self.play(FadeOut(rhombus))\n\n        # Rectangle\n        rectangle = Rectangle(height=2, width=3, color=ORANGE)\n        self.play(Create(rectangle))\n        self.wait(1)\n        self.play(FadeOut(rectangle))\n\n        # Square\n        square = Square(side_length=2, color=RED)\n        self.play(Create(square))\n        self.wait(1)\n        self.play(FadeOut(square))\n\n        # Trapezoid\n        trapezoid = Polygon([-2, -1, 0], [2, -1, 0], [1, 1, 0], [-1, 1, 0], color=PURPLE)\n        self.play(Create(trapezoid))\n        self.wait(1)\n        self.play(FadeOut(trapezoid))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Comparing Fractions with Cross Multiplication\"\n    animation: Begin with a title slide with the title, then animate two fractions displayed side by side, each with different numerators and denominators. Show the process of cross multiplication to compare their values and determine which fraction is greater.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass CompareFractions(Scene):\n    def construct(self):\n        title = Text(\"Comparing Fractions with Cross Multiplication\").scale(0.5)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        fraction1 = MathTex(r\"\\frac{3}{4}\").shift(LEFT*2)\n        fraction2 = MathTex(r\"\\frac{5}{6}\").shift(RIGHT*2)\n        self.play(Write(fraction1), Write(fraction2))\n        self.wait(1)\n\n        cross1 = MathTex(r\"3 \\times 6\").next_to(fraction1, DOWN)\n        cross2 = MathTex(r\"5 \\times 4\").next_to(fraction2, DOWN)\n        self.play(Write(cross1), Write(cross2))\n        self.wait(1)\n\n        result1 = MathTex(r\"18\").next_to(cross1, DOWN)\n        result2 = MathTex(r\"20\").next_to(cross2, DOWN)\n        self.play(Transform(cross1, result1), Transform(cross2, result2))\n        self.wait(1)\n\n        greater_than = MathTex(r\"18 < 20\").move_to(DOWN*2)\n        self.play(Write(greater_than))\n        self.wait(2)\n\n        self.play(FadeOut(fraction1), FadeOut(fraction2), FadeOut(cross1), FadeOut(cross2), FadeOut(greater_than))\n        self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Reciprocals Exploration\"\nanimation: Begin with a title slide with the title, then animate displaying a fraction on the screen. Show the process of finding its reciprocal by flipping the numerator and denominator, visually demonstrating the concept of reciprocals.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ReciprocalsExploration(Scene):\n    def construct(self):\n        title = Text(\"Reciprocals Exploration\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        fraction = MathTex(r\"\\frac{2}{3}\").scale(2)\n        reciprocal = MathTex(r\"\\frac{3}{2}\").scale(2)\n        arrow = Arrow(UP, DOWN).next_to(fraction, DOWN)\n\n        self.play(Write(fraction))\n        self.wait(1)\n        self.play(GrowArrow(arrow))\n        self.play(ReplacementTransform(fraction, reciprocal))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Calculating Perimeter of Polygons\"\n    animation: Begin with a title slide with the title, then animate different polygons with labeled side lengths. Show the process of calculating the perimeter of each polygon by adding all the side lengths together.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass PerimeterOfPolygons(Scene):\n    def construct(self):\n        title = Text(\"Calculating Perimeter of Polygons\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Triangle\n        triangle = Polygon([-1, 1, 0], [1, 1, 0], [0, -1, 0], color=WHITE)\n        triangle_sides = VGroup(\n            Tex(\"5\").next_to(triangle, UP),\n            Tex(\"4\").next_to(triangle, RIGHT),\n            Tex(\"3\").next_to(triangle, LEFT)\n        )\n        triangle_perimeter = Tex(\"Perimeter = 5 + 4 + 3 = 12\").next_to(triangle, DOWN)\n        self.play(Create(triangle), Write(triangle_sides))\n        self.wait(1)\n        self.play(Write(triangle_perimeter))\n        self.wait(2)\n        self.play(FadeOut(triangle), FadeOut(triangle_sides), FadeOut(triangle_perimeter))\n\n        # Square\n        square = Square(side_length=2).shift(DOWN)\n        square_sides = VGroup(\n            Tex(\"4\").next_to(square, UP),\n            Tex(\"4\").next_to(square, RIGHT),\n            Tex(\"4\").next_to(square, DOWN),\n            Tex(\"4\").next_to(square, LEFT)\n        )\n        square_perimeter = Tex(\"Perimeter = 4 + 4 + 4 + 4 = 16\").next_to(square, DOWN)\n        self.play(Create(square), Write(square_sides))\n        self.wait(1)\n        self.play(Write(square_perimeter))\n        self.wait(2)\n        self.play(FadeOut(square), FadeOut(square_sides), FadeOut(square_perimeter))\n\n        # Pentagon\n        pentagon = RegularPolygon(n=5, color=WHITE).scale(1.2).shift(DOWN)\n        pentagon_sides = VGroup(\n            *[Tex(\"3\").next_to(pentagon, direction) for direction in [UP, UR, DR, DL, LEFT]]\n        )\n        pentagon_perimeter = Tex(\"Perimeter = 3 + 3 + 3 + 3 + 3 = 15\").next_to(pentagon, DOWN)\n        self.play(Create(pentagon), Write(pentagon_sides))\n        self.wait(1)\n        self.play(Write(pentagon_perimeter))\n        self.wait(2)\n        self.play(FadeOut(pentagon), FadeOut(pentagon_sides), FadeOut(pentagon_perimeter))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Measuring Angles in Radians\"\n    animation: Begin with a title slide with the title, then animate displaying an angle in a circle and measuring it in radians by showing the ratio of arc length to radius.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass MeasureRadians(Scene):\n    def construct(self):\n        title = Text(\"Measuring Angles in Radians\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        circle = Circle(radius=2)\n        angle = ValueTracker(0)\n        arc = always_redraw(lambda: Arc(radius=2, angle=angle.get_value()))\n        line1 = Line(start=[0,0,0], end=[2,0,0])\n        line2 = always_redraw(lambda: Line(start=[0,0,0], end=[2*np.cos(angle.get_value()), 2*np.sin(angle.get_value()), 0]))\n        radius_text = Text(\"Radius\", font_size=24).next_to(line1, DOWN)\n        arc_length_text = always_redraw(lambda: Text(f\"Arc length\\n{np.round(arc.get_arc_length(),2)}\", font_size=24).next_to(arc, RIGHT, buff=0.1))\n        angle_measure = always_redraw(lambda: DecimalNumber(angle.get_value() / PI, num_decimal_places=2).next_to(arc.get_arc_center(), UP+LEFT))\n\n        self.play(Create(circle), Create(line1), Create(line2), Write(radius_text))\n        self.play(angle.animate.set_value(2*PI), run_time=4, rate_func=linear)\n        self.play(Create(arc), Write(arc_length_text), Write(angle_measure))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Density, Mass, and Volume\"\n    animation: Begin with a title slide with the title, then animate objects of different sizes and materials, illustrating the relationship between density, mass, and volume using the formula D = M / V.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass DensityMassVolume(Scene):\n    def construct(self):\n        title = Text(\"Density, Mass, and Volume\").scale(1.2)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Formula\n        formula = MathTex(\"D = \\\\frac{M}{V}\").to_edge(UP)\n        self.play(Write(formula))\n        self.wait(1)\n\n        # Objects\n        square = Square(color=BLUE).shift(LEFT*3)\n        circle = Circle(color=GREEN).shift(RIGHT*3)\n        square_text = Text(\"High Density\", font_size=24).next_to(square, DOWN)\n        circle_text = Text(\"Low Density\", font_size=24).next_to(circle, DOWN)\n\n        # Mass and Volume indicators\n        square_mass = Text(\"High M\", font_size=24).next_to(square, LEFT)\n        square_volume = Text(\"Low V\", font_size=24).next_to(square, RIGHT)\n        circle_mass = Text(\"Low M\", font_size=24).next_to(circle, LEFT)\n        circle_volume = Text(\"High V\", font_size=24).next_to(circle, RIGHT)\n\n        self.play(DrawBorderThenFill(square), DrawBorderThenFill(circle))\n        self.wait(1)\n        self.play(Write(square_text), Write(circle_text))\n        self.wait(1)\n        self.play(Write(square_mass), Write(square_volume), Write(circle_mass), Write(circle_volume))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Prime Factorization Explained\"\nanimation: Begin with a title slide with the title, then animate a composite number being displayed, followed by the number breaking down into its prime factors, illustrating the process of prime factorization.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass PrimeFactorization(Scene):\n    def construct(self):\n        title = Text(\"Prime Factorization Explained\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        number = 12\n        number_text = Text(str(number), font_size=72)\n        self.play(Write(number_text))\n        self.wait(1)\n\n        factors = self.prime_factors(number)\n        factors_text = VGroup(*[Text(str(factor), font_size=72) for factor in factors])\n        factors_text.arrange(RIGHT, buff=0.5)\n\n        self.play(Transform(number_text, factors_text))\n        self.wait(2)\n\n    def prime_factors(self, n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Elastic vs. Inelastic Collisions\"\n    animation: Begin with a title slide with the title, then animate two objects colliding. Show the difference between an elastic collision where kinetic energy is conserved, and an inelastic collision where kinetic energy is lost during the collision.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass CollisionAnimation(Scene):\n    def construct(self):\n        title = Text(\"Elastic vs. Inelastic Collisions\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Elastic Collision\n        ball1 = Circle(color=BLUE).shift(LEFT*3)\n        ball2 = Circle(color=RED).shift(RIGHT*3)\n        self.play(FadeIn(ball1), FadeIn(ball2))\n        self.play(ball1.animate.shift(RIGHT*2), ball2.animate.shift(LEFT*2))\n        self.play(ball1.animate.shift(RIGHT*2), ball2.animate.shift(LEFT*2))\n        self.wait(1)\n\n        self.play(FadeOut(ball1), FadeOut(ball2))\n\n        # Inelastic Collision\n        ball1 = Circle(color=BLUE).shift(LEFT*3)\n        ball2 = Circle(color=RED).shift(RIGHT*3)\n        self.play(FadeIn(ball1), FadeIn(ball2))\n        self.play(ball1.animate.shift(RIGHT*1.5), ball2.animate.shift(LEFT*1.5))\n        merged_ball = Circle(color=PURPLE, fill_opacity=1).scale(1.5).shift(RIGHT*0.25)\n        self.play(ReplacementTransform(ball1, merged_ball), ReplacementTransform(ball2, merged_ball))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Multiplying Decimals\"\n    animation: Begin with a title slide with the title, then animate two decimals being multiplied together, emphasizing the placement of the decimal point in the product.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass MultiplyingDecimals(Scene):\n    def construct(self):\n        title = Text(\"Multiplying Decimals\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Setup numbers for multiplication\n        decimal_1 = DecimalNumber(0.75, num_decimal_places=2).scale(2)\n        decimal_2 = DecimalNumber(0.4, num_decimal_places=1).next_to(decimal_1, DOWN).scale(2)\n        multiply_sign = Text(\"*\").scale(2).next_to(decimal_1, LEFT)\n        equals_sign = Text(\"=\").scale(2).next_to(decimal_1, RIGHT)\n\n        # Group for alignment\n        equation = VGroup(multiply_sign, decimal_1, decimal_2, equals_sign)\n\n        # Result of multiplication\n        result = DecimalNumber(0.75 * 0.4, num_decimal_places=2).scale(2).next_to(equals_sign, RIGHT)\n\n        # Animate the multiplication process\n        self.play(Write(multiply_sign), Write(decimal_1), Write(decimal_2))\n        self.wait(1)\n        self.play(Write(equals_sign))\n        self.wait(1)\n        self.play(TransformFromCopy(equation, result))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Balancing Act: Center of Mass\"\nanimation: Begin with a title slide with the title, then animate a flat object (like a ruler) being balanced on a finger, demonstrating the concept of the center of mass and how it affects the object's stability.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass CenterOfMass(Scene):\n    def construct(self):\n        title = Text(\"Balancing Act: Center of Mass\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create a flat object (ruler)\n        ruler = Rectangle(color=BLUE, height=0.2, width=3)\n        finger = Dot(color=RED)\n        finger.move_to(ruler.get_bottom())\n\n        self.play(FadeIn(ruler), FadeIn(finger))\n        self.wait(1)\n\n        # Animate the ruler balancing on the finger\n        for _ in range(2):\n            self.play(\n                ruler.animate.rotate_about_origin(PI/12).move_to(finger.get_center() + UP * 0.1),\n                run_time=1,\n                rate_func=there_and_back\n            )\n            self.play(\n                ruler.animate.rotate_about_origin(-PI/12).move_to(finger.get_center() + UP * 0.1),\n                run_time=1,\n                rate_func=there_and_back\n            )\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Rotational Symmetry in Shapes\"\nanimation: Begin with a title slide with the title, then animate shapes with different orders of rotational symmetry (e.g., square, pentagon) rotating around their center to demonstrate their rotational symmetry properties.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass RotationalSymmetry(Scene):\n    def construct(self):\n        title = Text(\"Rotational Symmetry in Shapes\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Square rotation\n        square = Square(color=BLUE)\n        self.play(Create(square))\n        for _ in range(4):\n            self.play(Rotate(square, angle=PI/2), run_time=1)\n            self.wait(0.5)\n        self.play(FadeOut(square))\n\n        # Pentagon rotation\n        pentagon = RegularPolygon(5, color=GREEN)\n        self.play(Create(pentagon))\n        for _ in range(5):\n            self.play(Rotate(pentagon, angle=TAU/5), run_time=1)\n            self.wait(0.5)\n        self.play(FadeOut(pentagon))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Speed, Distance, and Time Relationship\"\nanimation: Begin with a title slide with the title, then animate an object moving at a constant speed, illustrating the relationship between speed, distance, and time by showing how speed is calculated as distance divided by time.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass SpeedDistanceTime(Scene):\n    def construct(self):\n        title = Text(\"Speed, Distance, and Time Relationship\").scale(0.5)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Setup\n        start_point = LEFT * 4\n        end_point = RIGHT * 4\n        object = Dot(start_point, color=RED)\n        distance_line = Line(start_point, end_point).set_color(WHITE)\n        distance_text = Text(\"Distance\", color=WHITE).scale(0.5).next_to(distance_line, DOWN)\n        \n        # Time tracker\n        time_tracker = ValueTracker(0)\n        time_text = Text(\"Time: \", color=WHITE).scale(0.5).to_edge(UP)\n        time_value = DecimalNumber(time_tracker.get_value(), num_decimal_places=2).next_to(time_text, RIGHT)\n        time_value.add_updater(lambda m: m.set_value(time_tracker.get_value()))\n\n        # Speed calculation\n        speed_text = Text(\"Speed = Distance / Time\", color=WHITE).scale(0.5).next_to(time_text, DOWN)\n        \n        # Animation\n        self.play(ShowCreation(distance_line), Write(distance_text))\n        self.play(FadeIn(object))\n        self.play(Write(time_text), Write(time_value), Write(speed_text))\n        self.play(\n            object.animate.move_to(end_point),\n            time_tracker.animate.set_value(5),  # Assuming it takes 5 seconds to move\n            run_time=5,\n            rate_func=linear\n        )\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Understanding Absolute Value\"\nanimation: Begin with a title slide with the title, then animate a number line with zero at the center, and show how the absolute value of a number is represented as the distance from zero on the number line, emphasizing the concept of magnitude without direction.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass AbsoluteValueScene(Scene):\n    def construct(self):\n        # Title\n        title = Text(\"Understanding Absolute Value\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Number line\n        number_line = NumberLine(x_range=[-5, 5, 1], length=10, include_numbers=True, include_tip=True)\n        self.play(Create(number_line))\n        self.wait(1)\n\n        # Absolute value demonstration\n        dot = Dot(color=RED).move_to(number_line.n2p(0))\n        self.play(FadeIn(dot))\n\n        # Animate absolute value of -3\n        negative_three = number_line.n2p(-3)\n        self.play(dot.animate.move_to(negative_three))\n        self.wait(1)\n        distance_line = DashedLine(start=number_line.n2p(0), end=negative_three, color=YELLOW)\n        self.play(Create(distance_line))\n        self.wait(2)\n        self.play(FadeOut(distance_line), dot.animate.move_to(number_line.n2p(0)))\n\n        # Animate absolute value of 3\n        three = number_line.n2p(3)\n        self.play(dot.animate.move_to(three))\n        self.wait(1)\n        distance_line = DashedLine(start=number_line.n2p(0), end=three, color=YELLOW)\n        self.play(Create(distance_line))\n        self.wait(2)\n\n        # Cleanup\n        self.play(FadeOut(dot), FadeOut(distance_line), FadeOut(number_line))\n        self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Solving Proportions with Cross-Multiplication\"\n    animation: Begin with a title slide with the title, then display a proportion such as 2/3 = x/6 on the screen. Animate the process of cross-multiplying and dividing to solve for the unknown value of x.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass SolveProportion(Scene):\n    def construct(self):\n        title = Text(\"Solving Proportions with Cross-Multiplication\").scale(0.5)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        proportion = Text(\"2/3 = x/6\").scale(1)\n        self.play(Write(proportion))\n        self.wait(2)\n\n        cross_multiply = Text(\"2 * 6 = 3 * x\", color=BLUE).next_to(proportion, DOWN)\n        self.play(Transform(proportion, cross_multiply))\n        self.wait(2)\n\n        solve_for_x = Text(\"x = 12 / 3\", color=GREEN).next_to(cross_multiply, DOWN)\n        self.play(Write(solve_for_x))\n        self.wait(2)\n\n        x_value = Text(\"x = 4\", color=RED).next_to(solve_for_x, DOWN)\n        self.play(Transform(solve_for_x, x_value))\n        self.wait(2)\n\n        self.play(FadeOut(proportion), FadeOut(solve_for_x))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Projectile Motion Simulation\"\n    animation: Begin with a title slide with the title, then animate an object being launched at an angle, showing its parabolic path and the effects of gravity on its trajectory.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ProjectileMotionSimulation(Scene):\n    def construct(self):\n        title = Text(\"Projectile Motion Simulation\").scale(1.2)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Parameters for the projectile motion\n        velocity = 5\n        angle = 45\n        g = 9.8\n        time_of_flight = 2 * velocity * np.sin(np.radians(angle)) / g\n        max_height = (velocity**2) * (np.sin(np.radians(angle))**2) / (2 * g)\n        range_projectile = (velocity**2) * np.sin(2 * np.radians(angle)) / g\n\n        # Creating the trajectory path\n        trajectory = FunctionGraph(\n            lambda x: x * np.tan(np.radians(angle)) - (g * x**2) / (2 * velocity**2 * np.cos(np.radians(angle))**2),\n            x_range=[0, range_projectile],\n            color=BLUE\n        )\n\n        # Creating the object\n        projectile = Dot(radius=0.2, color=RED)\n        projectile.move_to(trajectory.points[0])\n\n        # Animate the projectile along the path\n        self.play(MoveAlongPath(projectile, trajectory, rate_func=linear), run_time=time_of_flight)\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Exponents and Square Roots\"\n    animation: Begin with a title slide with the title, then animate a number being multiplied by itself to demonstrate an exponent operation. Next, animate finding the square root as the inverse operation, showing the original number being reconstructed from the squared result.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ExponentsAndSquareRoots(Scene):\n    def construct(self):\n        # Title\n        title = Text(\"Exponents and Square Roots\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Exponent operation\n        number = Text(\"3\")\n        times = Text(\"\u00d7\")\n        number2 = Text(\"3\")\n        equals = Text(\"=\")\n        result = Text(\"9\")\n\n        exponent_group = VGroup(number, times, number2, equals, result)\n        exponent_group.arrange(RIGHT)\n\n        self.play(Write(number), Write(times), Write(number2))\n        self.wait(1)\n        self.play(Write(equals), Write(result))\n        self.wait(2)\n        self.play(FadeOut(exponent_group))\n\n        # Square root operation\n        sqrt_sign = Text(\"\u221a\")\n        squared_result = Text(\"9\")\n        equals_sqrt = Text(\"=\")\n        original_number = Text(\"3\")\n\n        sqrt_group = VGroup(sqrt_sign, squared_result, equals_sqrt, original_number)\n        sqrt_group.arrange(RIGHT)\n\n        self.play(Write(sqrt_sign), Write(squared_result))\n        self.wait(1)\n        self.play(Write(equals_sqrt), Write(original_number))\n        self.wait(2)\n        self.play(FadeOut(sqrt_group))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Associative Property of Multiplication\"\n    animation: Begin with a title slide with the title, then animate multiplying three numbers in different groupings, such as (2 \u00d7 3) \u00d7 4 and 2 \u00d7 (3 \u00d7 4), and show that the product remains the same in each case, illustrating the associative property of multiplication.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass AssociativeProperty(Scene):\n    def construct(self):\n        title = Text(\"Associative Property of Multiplication\").scale(0.7)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # First grouping (2 \u00d7 3) \u00d7 4\n        first_group = MathTex(\"(2 \\\\times 3) \\\\times 4 = 6 \\\\times 4 = 24\").scale(0.7)\n        self.play(Write(first_group))\n        self.wait(2)\n        self.play(FadeOut(first_group))\n\n        # Second grouping 2 \u00d7 (3 \u00d7 4)\n        second_group = MathTex(\"2 \\\\times (3 \\\\times 4) = 2 \\\\times 12 = 24\").scale(0.7)\n        self.play(Write(second_group))\n        self.wait(2)\n\n        # Conclusion\n        conclusion = Text(\"The product remains the same!\").scale(0.7)\n        self.play(ReplacementTransform(second_group, conclusion))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Rounding Numbers on a Number Line\"\nanimation: Begin with a title slide with the title, then animate a number line with a number displayed on it. Show the number being rounded to the nearest ten, hundred, or thousand with a visual representation of the rounding process.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass RoundingNumbers(Scene):\n    def construct(self):\n        title = Text(\"Rounding Numbers on a Number Line\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        number_line = NumberLine(x_range=[-1000, 1000, 100], length=10, include_numbers=True, numbers_to_exclude=[0])\n        self.play(Create(number_line))\n        self.wait(1)\n\n        # Example number to round\n        number = 253\n        point = Dot(number_line.n2p(number), color=YELLOW)\n        number_label = MathTex(str(number)).next_to(point, UP)\n        self.play(FadeIn(point), Write(number_label))\n        self.wait(1)\n\n        # Rounding to the nearest ten\n        rounded_ten = round(number, -1)\n        rounded_ten_point = Dot(number_line.n2p(rounded_ten), color=GREEN)\n        rounded_ten_label = MathTex(str(rounded_ten)).next_to(rounded_ten_point, UP)\n        self.play(Transform(point, rounded_ten_point), Transform(number_label, rounded_ten_label))\n        self.wait(1)\n\n        # Rounding to the nearest hundred\n        rounded_hundred = round(number, -2)\n        rounded_hundred_point = Dot(number_line.n2p(rounded_hundred), color=BLUE)\n        rounded_hundred_label = MathTex(str(rounded_hundred)).next_to(rounded_hundred_point, UP)\n        self.play(Transform(point, rounded_hundred_point), Transform(number_label, rounded_hundred_label))\n        self.wait(1)\n\n        # Rounding to the nearest thousand\n        rounded_thousand = round(number, -3)\n        if rounded_thousand == 0:  # Avoid placing a dot at the origin if rounded to 0\n            rounded_thousand_point = Dot(number_line.n2p(1), color=RED).move_to(number_line.n2p(rounded_thousand))\n        else:\n            rounded_thousand_point = Dot(number_line.n2p(rounded_thousand), color=RED)\n        rounded_thousand_label = MathTex(str(rounded_thousand)).next_to(rounded_thousand_point, UP)\n        self.play(Transform(point, rounded_thousand_point), Transform(number_label, rounded_thousand_label))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Complementary and Supplementary Angles in a Triangle\"\nanimation: Begin with a title slide with the title, then animate a triangle with one 90\u00b0 angle, and demonstrate how the other two angles are complementary, summing up to 90\u00b0.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ComplementaryAndSupplementary(Scene):\n    def construct(self):\n        title = Text(\"Complementary and Supplementary Angles in a Triangle\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create a right-angled triangle\n        right_triangle = Polygon(ORIGIN, 4*RIGHT, 4*RIGHT+3*UP, color=WHITE)\n        right_angle_marker = RightAngle(right_triangle, 1, length=0.3, quadrant=(-1,1))\n        self.play(Create(right_triangle), Create(right_angle_marker))\n        self.wait(1)\n\n        # Labels for the angles\n        angle_90 = MathTex(\"90^\\\\circ\").next_to(right_angle_marker, DOWN, buff=0.1)\n        self.play(Write(angle_90))\n\n        # Other two angles\n        angle_a = Angle(right_triangle[2], right_triangle[0], right_triangle[1], radius=0.5, color=YELLOW)\n        angle_b = Angle(right_triangle[0], right_triangle[1], right_triangle[2], radius=0.5, color=BLUE)\n        angle_a_label = MathTex(\"\\\\alpha\").move_to(angle_a.point_from_proportion(0.5))\n        angle_b_label = MathTex(\"\\\\beta\").move_to(angle_b.point_from_proportion(0.5))\n        self.play(Create(angle_a), Write(angle_a_label), Create(angle_b), Write(angle_b_label))\n        self.wait(1)\n\n        # Complementary angles text\n        complementary_text = Text(\"\u03b1 + \u03b2 = 90\u00b0\", font_size=36).to_edge(DOWN)\n        self.play(Write(complementary_text))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Multiplying Powers with the Same Base\"\n    animation: Begin with a title slide with the title, then display two powers with the same base side by side, and animate multiplying them by adding their exponents to show the result.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass MultiplyingPowers(Scene):\n    def construct(self):\n        title = Text(\"Multiplying Powers with the Same Base\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        power1 = MathTex(\"a^m\").shift(LEFT)\n        times = MathTex(\"\\\\times\").next_to(power1, RIGHT)\n        power2 = MathTex(\"a^n\").next_to(times, RIGHT)\n        equals = MathTex(\"=\").next_to(power2, RIGHT)\n        result = MathTex(\"a^{m+n}\").next_to(equals, RIGHT)\n\n        self.play(Write(power1), Write(times), Write(power2))\n        self.wait(1)\n        self.play(TransformMatchingTex(power1.copy(), result[0][0]), \n                  TransformMatchingTex(power2.copy(), result[0][2:]),\n                  Write(equals))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Dividing Fractions Illustrated\"\nanimation: Begin with a title slide with the title, then animate two fractions side by side, and show the process of dividing them by multiplying the first fraction by the reciprocal of the second fraction.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass DividingFractions(Scene):\n    def construct(self):\n        title = Text(\"Dividing Fractions Illustrated\")\n        title.scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Fractions\n        fraction1 = MathTex(r\"\\frac{3}{4}\")\n        fraction2 = MathTex(r\"\\frac{5}{6}\")\n        times = MathTex(r\"\\times\")\n        equals = MathTex(r\"=\")\n        reciprocal = MathTex(r\"\\frac{6}{5}\")\n\n        fraction_group = VGroup(fraction1, times, fraction2, equals, reciprocal).arrange(RIGHT)\n\n        self.play(Write(fraction1), Write(fraction2))\n        self.wait(1)\n        self.play(Write(times))\n        self.wait(1)\n        self.play(Transform(fraction2.copy(), reciprocal))\n        self.wait(1)\n        self.play(Write(equals))\n        self.wait(1)\n        self.play(Write(reciprocal))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Statistical Measures Visualization\"\nanimation: Begin with a title slide with the title, then display a set of numbers and animate finding the mean (average), median (middle value), and mode (most frequent value) of the set.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass StatisticalMeasuresVisualization(Scene):\n    def construct(self):\n        title = Text(\"Statistical Measures Visualization\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        numbers = [1, 2, 3, 4, 5, 3, 3]\n        numbers_text = Text(str(numbers)).scale(0.8)\n        self.play(Write(numbers_text))\n        self.wait(2)\n\n        mean_value = sum(numbers) / len(numbers)\n        mean_text = Text(f\"Mean: {mean_value}\").to_edge(DOWN)\n        self.play(Transform(numbers_text, mean_text))\n        self.wait(2)\n\n        numbers.sort()\n        if len(numbers) % 2 == 0:\n            median_value = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n        else:\n            median_value = numbers[len(numbers) // 2]\n        median_text = Text(f\"Median: {median_value}\").to_edge(DOWN)\n        self.play(Transform(numbers_text, median_text))\n        self.wait(2)\n\n        mode_value = max(set(numbers), key=numbers.count)\n        mode_text = Text(f\"Mode: {mode_value}\").to_edge(DOWN)\n        self.play(Transform(numbers_text, mode_text))\n        self.wait(2)\n\n        self.play(FadeOut(numbers_text))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Friction and Sliding Objects\"\nanimation: Begin with a title slide with the title, then animate an object sliding on a surface. Show how friction acts in the opposite direction to the object's motion, slowing it down and eventually bringing it to a stop.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass FrictionAnimation(Scene):\n    def construct(self):\n        # Title\n        title = Text(\"Friction and Sliding Objects\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Surface\n        surface = Line(LEFT * 5, RIGHT * 5)\n        self.play(Create(surface))\n\n        # Object\n        object = Square(color=BLUE).scale(0.5)\n        object.move_to(LEFT * 4)\n        self.play(FadeIn(object))\n\n        # Motion and Friction\n        friction_arrow = Arrow(object.get_center(), object.get_center() + LEFT, buff=0, color=RED)\n        motion_arrow = Arrow(object.get_center(), object.get_center() + RIGHT, buff=0, color=GREEN)\n\n        self.play(ShowCreation(motion_arrow), GrowArrow(friction_arrow))\n        for _ in range(5):\n            self.play(object.animate.shift(RIGHT * 0.8), run_time=0.5)\n            self.play(object.animate.shift(LEFT * 0.2), run_time=0.5)\n            motion_arrow.scale(0.8, about_point=object.get_center())\n            friction_arrow.scale(0.8, about_point=object.get_center())\n\n        self.play(FadeOut(object), FadeOut(motion_arrow), FadeOut(friction_arrow), FadeOut(surface))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Simplifying Ratios\"\n    animation: Begin with a title slide with the title, then display a ratio on the screen and animate simplifying it by dividing both terms by their greatest common factor, showing the process of reducing the ratio to its simplest form.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass SimplifyingRatios(Scene):\n    def construct(self):\n        title = Text(\"Simplifying Ratios\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Display the initial ratio\n        ratio = Text(\"12:36\").scale(1.5)\n        self.play(Write(ratio))\n        self.wait(2)\n\n        # Show the process of simplifying the ratio\n        simplified_ratio = Text(\"= 1:3\", color=BLUE).next_to(ratio, DOWN)\n        self.play(TransformMatchingShapes(ratio.copy(), simplified_ratio))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Symmetry in Polygons\"\nanimation: Begin with a title slide with the title, then animate examples of polygons with line symmetry (e.g., equilateral triangle) and rotational symmetry (e.g., square), showcasing their symmetrical properties.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass SymmetryInPolygons(Scene):\n    def construct(self):\n        title = Text(\"Symmetry in Polygons\").scale(1.2)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Line symmetry in an equilateral triangle\n        triangle = RegularPolygon(n=3).scale(2)\n        line_of_symmetry = Line(start=triangle.get_top(), end=triangle.get_bottom(), color=RED)\n        self.play(Create(triangle))\n        self.wait(1)\n        self.play(ShowCreation(line_of_symmetry))\n        self.wait(2)\n        self.play(FadeOut(triangle), FadeOut(line_of_symmetry))\n\n        # Rotational symmetry in a square\n        square = Square().scale(2)\n        dot_center = Dot(square.get_center(), color=RED)\n        self.play(Create(square))\n        self.wait(1)\n        self.play(FadeIn(dot_center))\n        self.play(Rotate(square, angle=PI/2), Rotate(dot_center, angle=PI/2))\n        self.wait(1)\n        self.play(FadeOut(square), FadeOut(dot_center))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Converting Between Percentages and Decimals\"\n    animation: Begin with a title slide with the title, then animate displaying a percentage value and show the process of converting it to a decimal by dividing by 100.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ConvertPercentageToDecimal(Scene):\n    def construct(self):\n        title = Text(\"Converting Between Percentages and Decimals\").scale(0.7)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        percentage = Text(\"75%\", font_size=72)\n        equals = Text(\"=\", font_size=72).next_to(percentage, RIGHT)\n        division = Text(\"/ 100 = ?\", font_size=72).next_to(equals, RIGHT)\n        self.play(Write(percentage))\n        self.play(Write(equals), Write(division))\n        self.wait(2)\n\n        decimal = Text(\"0.75\", font_size=72).next_to(equals, RIGHT)\n        self.play(ReplacementTransform(division, decimal))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Calculating Work Done\"\n    animation: Begin with a title slide with the title, then animate an object being pushed or lifted, and show the calculation of work done as force multiplied by distance.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass WorkDone(Scene):\n    def construct(self):\n        title = Text(\"Calculating Work Done\").scale(0.9)\n        self.play(Write(title))\n        self.wait(1)\n        self.play(FadeOut(title))\n\n        # Object\n        box = Square(color=BLUE, fill_opacity=1).scale(0.5)\n        self.play(FadeIn(box))\n        self.wait(0.5)\n\n        # Force arrow\n        force_arrow = Arrow(start=box.get_center(), end=box.get_center() + RIGHT * 2, buff=0, color=YELLOW)\n        force_text = Text(\"Force\", color=YELLOW).next_to(force_arrow, UP, buff=0.1)\n        self.play(GrowArrow(force_arrow), Write(force_text))\n        self.wait(0.5)\n\n        # Movement\n        path = Line(start=box.get_center(), end=box.get_center() + RIGHT * 3)\n        self.play(MoveAlongPath(box, path), run_time=2)\n        self.play(FadeOut(force_arrow), FadeOut(force_text))\n\n        # Distance\n        distance_line = Line(start=box.get_center() + DOWN * 0.5 + LEFT * 1.5, end=box.get_center() + DOWN * 0.5 + RIGHT * 1.5)\n        distance_text = Text(\"Distance\", color=GREEN).next_to(distance_line, DOWN, buff=0.1)\n        self.play(ShowCreation(distance_line), Write(distance_text))\n        self.wait(0.5)\n\n        # Work done calculation\n        work_done = Text(\"Work = Force \u00d7 Distance\", color=RED).to_edge(DOWN)\n        self.play(Write(work_done))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Distributive Property Visualization\"\nanimation: Begin with a title slide with the title, then animate a number being multiplied by a sum (e.g., 2(x + 3)) and show the distribution of the multiplication over the addition, visually illustrating the distributive property in action.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass DistributiveProperty(Scene):\n    def construct(self):\n        title = Text(\"Distributive Property Visualization\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        equation = Text(\"2(x + 3) = 2x + 6\").scale(1.2)\n        highlight1 = SurroundingRectangle(equation[0][2:9], color=YELLOW)\n        highlight2 = SurroundingRectangle(equation[0][12:], color=YELLOW)\n\n        self.play(Write(equation))\n        self.wait(1)\n        self.play(Create(highlight1))\n        self.wait(1)\n        self.play(ReplacementTransform(highlight1, highlight2))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Solving Equations with Inverse Operations\"\nanimation: Begin with a title slide with the title, then display an equation (e.g., x + 5 = 10) and animate the process of using the inverse operation (subtraction) to solve for the variable x.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass SolveEquation(Scene):\n    def construct(self):\n        title = Text(\"Solving Equations with Inverse Operations\").scale(0.5)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        equation = Text(\"x + 5 = 10\").scale(0.7)\n        self.play(Write(equation))\n        self.wait(1)\n\n        subtract_5 = Text(\"-5\", color=RED).next_to(equation, DOWN)\n        self.play(Write(subtract_5))\n        self.wait(1)\n\n        equation_solved = Text(\"x = 5\").scale(0.7).next_to(equation, DOWN, buff=1)\n        self.play(ReplacementTransform(equation.copy(), equation_solved), FadeOut(subtract_5))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Velocity and Acceleration Illustrated\"\nanimation: Begin with a title slide with the title, then animate an object moving with changing speed, clearly showing the difference between velocity (speed with direction) and acceleration (change in velocity) through visual representations.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass VelocityAcceleration(Scene):\n    def construct(self):\n        title = Text(\"Velocity and Acceleration Illustrated\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create a dot to represent the object\n        dot = Dot(color=BLUE).move_to(3*LEFT)\n        path = VMobject(color=WHITE)\n        path.set_points_as_corners([dot.get_center(), dot.get_center()])\n\n        def update_path(path):\n            previous_path = path.copy()\n            previous_path.add_points_as_corners([dot.get_center()])\n            path.become(previous_path)\n\n        path.add_updater(update_path)\n        self.add(path, dot)\n\n        # Animate the dot with changing velocity and show acceleration vector\n        self.play(dot.animate.shift(4*RIGHT), rate_func=there_and_back, run_time=4)\n        acceleration_arrow = Arrow(dot.get_center(), dot.get_center() + RIGHT, buff=0, color=YELLOW)\n        acceleration_arrow.add_updater(lambda m: m.put_start_and_end_on(dot.get_center(), dot.get_center() + RIGHT*dot.get_center()[0]*0.2))\n\n        self.add(acceleration_arrow)\n        self.wait(2)\n\n        # Show velocity vector\n        velocity_arrow = Arrow(dot.get_center(), dot.get_center() + RIGHT, buff=0, color=GREEN)\n        velocity_arrow.add_updater(lambda m: m.put_start_and_end_on(dot.get_center(), dot.get_center() + RIGHT if dot.get_center()[0] < 0 else dot.get_center() + LEFT))\n\n        self.add(velocity_arrow)\n        self.wait(4)\n\n        self.play(FadeOut(velocity_arrow), FadeOut(acceleration_arrow), FadeOut(dot), FadeOut(path))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Properties of Parallelograms\"\n    animation: Begin with a title slide with the title, then animate a parallelogram displaying its properties - opposite sides are parallel and equal in length, and opposite angles are equal in measure.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass ParallelogramProperties(Scene):\n    def construct(self):\n        title = Text(\"Properties of Parallelograms\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create a parallelogram\n        parallelogram = Polygon(\n            np.array([-2, 1, 0]),\n            np.array([2, 1, 0]),\n            np.array([3, -1, 0]),\n            np.array([-1, -1, 0]),\n            color=BLUE\n        )\n        self.play(Create(parallelogram))\n        self.wait(1)\n\n        # Annotations for parallel and equal sides\n        parallel_sign = Tex(\"||\").scale(0.5)\n        parallel_sign.move_to(np.array([-1.5, 0, 0]))\n        self.play(Write(parallel_sign))\n\n        parallel_sign_2 = parallel_sign.copy()\n        parallel_sign_2.move_to(np.array([2.5, 0, 0]))\n        self.play(Write(parallel_sign_2))\n\n        equal_length = Tex(\"==\").scale(0.5)\n        equal_length.move_to(np.array([0.5, 1.2, 0]))\n        self.play(Write(equal_length))\n\n        equal_length_2 = equal_length.copy()\n        equal_length_2.move_to(np.array([0.5, -1.2, 0]))\n        self.play(Write(equal_length_2))\n\n        # Annotations for angles\n        angle_a = Angle(parallelogram.get_vertices()[0], parallelogram.get_vertices()[1], parallelogram.get_vertices()[3], radius=0.3, color=YELLOW)\n        angle_b = angle_a.copy()\n        angle_b.move_to(parallelogram.get_vertices()[2], aligned_edge=DOWN)\n        self.play(Create(angle_a), Create(angle_b))\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Calculating Simple Interest\"\nanimation: Begin with a title slide with the title, then animate showing a principal amount, interest rate, and time values on the screen. Calculate the simple interest earned by multiplying the principal amount, interest rate, and time, and display the result.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass SimpleInterest(Scene):\n    def construct(self):\n        title = Text(\"Calculating Simple Interest\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Displaying principal amount, interest rate, and time\n        principal_text = Text(\"Principal: $1000\", font_size=24)\n        interest_text = Text(\"Interest Rate: 5%\", font_size=24).next_to(principal_text, DOWN)\n        time_text = Text(\"Time: 3 years\", font_size=24).next_to(interest_text, DOWN)\n\n        self.play(Write(principal_text), Write(interest_text), Write(time_text))\n        self.wait(2)\n\n        # Calculating simple interest\n        simple_interest = 1000 * 0.05 * 3\n        result_text = Text(f\"Simple Interest: ${simple_interest}\", font_size=24).next_to(time_text, DOWN)\n\n        self.play(Write(result_text))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Understanding Types of Levers\"\nanimation: Begin with a title slide with the title, then animate examples of first, second, and third-class levers in action, demonstrating how they balance effort and load. Show how each type of lever functions and the mechanical advantage it provides.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass LeversAnimation(Scene):\n    def create_lever(self, fulcrum_position, effort_position, load_position, lever_length=6):\n        # Base line for the lever\n        lever = Line(start=LEFT*lever_length/2, end=RIGHT*lever_length/2, color=WHITE)\n        lever.move_to(UP*0.5)\n        \n        # Fulcrum\n        fulcrum = Triangle().scale(0.2).set_fill(ORANGE, opacity=1)\n        fulcrum.next_to(lever, DOWN, buff=0).shift(fulcrum_position*RIGHT)\n        \n        # Effort\n        effort = Circle(color=BLUE, fill_opacity=1).scale(0.2)\n        effort.next_to(lever, UP, buff=0).shift(effort_position*RIGHT)\n        \n        # Load\n        load = Square(color=RED, fill_opacity=1).scale(0.4)\n        load.next_to(lever, UP, buff=0).shift(load_position*RIGHT)\n        \n        return VGroup(lever, fulcrum, effort, load)\n\n    def construct(self):\n        title = Text(\"Understanding Types of Levers\", font_size=24)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n        \n        # First-class lever\n        first_class_lever = self.create_lever(fulcrum_position=0, effort_position=-2, load_position=2)\n        self.play(ShowCreation(first_class_lever))\n        self.wait(2)\n        self.play(FadeOut(first_class_lever))\n        \n        # Second-class lever\n        second_class_lever = self.create_lever(fulcrum_position=-3, effort_position=2, load_position=1)\n        self.play(ShowCreation(second_class_lever))\n        self.wait(2)\n        self.play(FadeOut(second_class_lever))\n        \n        # Third-class lever\n        third_class_lever = self.create_lever(fulcrum_position=-3, effort_position=1, load_position=2)\n        self.play(ShowCreation(third_class_lever))\n        self.wait(2)\n        self.play(FadeOut(third_class_lever))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Multiplying Mixed Numbers\"\nanimation: Begin with a title slide with the title, then display two mixed numbers and animate converting them to improper fractions. Next, show the multiplication of the two improper fractions and simplify the result.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass MultiplyingMixedNumbers(Scene):\n    def construct(self):\n        # Title\n        title = Text(\"Multiplying Mixed Numbers\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Mixed numbers\n        mixed_number_1 = Text(\"2 1/3\").scale(1)\n        mixed_number_2 = Text(\"1 3/4\").next_to(mixed_number_1, DOWN, buff=0.5).scale(1)\n\n        self.play(Write(mixed_number_1), Write(mixed_number_2))\n        self.wait(2)\n\n        # Convert to improper fractions\n        improper_fraction_1 = Text(\"7/3\").next_to(mixed_number_1, RIGHT, buff=1)\n        improper_fraction_2 = Text(\"7/4\").next_to(mixed_number_2, RIGHT, buff=1)\n\n        self.play(Transform(mixed_number_1, improper_fraction_1))\n        self.play(Transform(mixed_number_2, improper_fraction_2))\n        self.wait(2)\n\n        # Multiplication\n        multiplication = Text(\"=\").next_to(improper_fraction_1, RIGHT, buff=0.5)\n        result_fraction = Text(\"49/12\").next_to(multiplication, RIGHT, buff=0.5)\n\n        self.play(Write(multiplication))\n        self.play(Write(result_fraction))\n        self.wait(2)\n\n        # Simplify\n        simplified_fraction = Text(\"= 4 1/12\").next_to(result_fraction, RIGHT, buff=0.5)\n\n        self.play(Write(simplified_fraction))\n        self.wait(2)\n\n        # Clear\n        self.play(FadeOut(mixed_number_1), FadeOut(mixed_number_2), FadeOut(improper_fraction_1), FadeOut(improper_fraction_2), FadeOut(multiplication), FadeOut(result_fraction), FadeOut(simplified_fraction))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Average Acceleration Calculation\"\nanimation: Begin with a title slide with the title, then animate an object changing its velocity over time. Show the calculation of its average acceleration as the change in velocity divided by time.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass AverageAcceleration(Scene):\n    def construct(self):\n        title = Text(\"Average Acceleration Calculation\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Animate object moving with changing velocity\n        object = Circle().set_fill(PINK, opacity=0.5)\n        start_point = LEFT * 4\n        end_point = RIGHT * 4\n        self.play(FadeIn(object.move_to(start_point)))\n        self.wait(1)\n        self.play(object.animate.shift(RIGHT * 2).set_fill(GREEN, opacity=0.5), run_time=2, rate_func=linear)\n        self.wait(1)\n        self.play(object.animate.shift(RIGHT * 2).set_fill(BLUE, opacity=0.5), run_time=1, rate_func=linear)\n        self.wait(1)\n\n        # Calculation of average acceleration\n        formula = MathTex(r\"a_{avg} = \\frac{\\Delta v}{\\Delta t}\")\n        self.play(Write(formula))\n        self.wait(2)\n\n        # Show change in velocity and time\n        delta_v = MathTex(r\"\\Delta v = v_f - v_i = 4\\,m/s - 2\\,m/s = 2\\,m/s\")\n        delta_t = MathTex(r\"\\Delta t = 3\\,s\")\n        calculation = MathTex(r\"a_{avg} = \\frac{2\\,m/s}{3\\,s} = \\frac{2}{3}\\,m/s^2\")\n        delta_v.next_to(formula, DOWN)\n        delta_t.next_to(delta_v, DOWN)\n        calculation.next_to(delta_t, DOWN)\n\n        self.play(ReplacementTransform(formula, delta_v))\n        self.wait(1)\n        self.play(Write(delta_t))\n        self.wait(1)\n        self.play(Write(calculation))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Uniform Motion\"\nanimation: Start with a title slide with the title, then animate an object moving in a straight line at a constant speed, illustrating the concept of uniform motion.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass UniformMotion(Scene):\n    def construct(self):\n        title = Text(\"Uniform Motion\").scale(1.5)\n        self.play(Write(title))\n        self.wait(1)\n        self.play(FadeOut(title))\n\n        line = Line(LEFT*4, RIGHT*4)\n        dot = Dot(LEFT*4)\n        self.add(line, dot)\n        self.play(MoveAlongPath(dot, line), run_time=4, rate_func=linear)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Newton's Second Law in Action\"\n    animation: Begin with a title slide with the title, then animate an object being pushed with a force and accelerating in the direction of the force, demonstrating the relationship F = ma as described by Newton's Second Law of Motion.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass NewtonSecondLaw(Scene):\n    def construct(self):\n        title = Text(\"Newton's Second Law in Action\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Setup\n        ground = Line(start=3*LEFT, end=3*RIGHT, color=WHITE)\n        self.play(Create(ground))\n        box = Square(side_length=0.5, color=BLUE)\n        box.move_to(2.5*LEFT)\n        self.play(Create(box))\n\n        # Force arrow\n        force_arrow = Arrow(start=box.get_center(), end=box.get_center() + RIGHT, buff=0, color=YELLOW)\n        force_text = Text(\"F\", font_size=24).next_to(force_arrow, UP, buff=0.1)\n        self.play(GrowArrow(force_arrow), Write(force_text))\n\n        # Acceleration\n        self.play(box.animate.shift(4*RIGHT), run_time=2, rate_func=linear)\n        self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Understanding Inertia\"\nanimation: Begin with a title slide with the title, then animate an object at rest remaining stationary, and another object in motion continuing its motion at a constant velocity, both resisting changes to their state of motion when acted upon by external forces.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass UnderstandingInertia(Scene):\n    def construct(self):\n        title = Text(\"Understanding Inertia\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Object at rest\n        square_rest = Square(color=BLUE, fill_opacity=1).shift(LEFT*3)\n        text_rest = Text(\"Rest\", font_size=24).next_to(square_rest, DOWN)\n        self.play(FadeIn(square_rest), Write(text_rest))\n        self.wait(2)\n\n        # Object in motion\n        square_motion = Square(color=GREEN, fill_opacity=1).shift(RIGHT*3)\n        text_motion = Text(\"Motion\", font_size=24).next_to(square_motion, DOWN)\n        self.play(FadeIn(square_motion), Write(text_motion))\n        self.play(square_motion.animate.shift(RIGHT*2), run_time=2, rate_func=linear)\n        self.wait(2)\n\n        # Show resistance to change\n        arrow = Arrow(start=ORIGIN, end=UP*1, buff=0, color=YELLOW)\n        arrow_rest = arrow.copy().next_to(square_rest, UP)\n        arrow_motion = arrow.copy().next_to(square_motion, UP)\n        self.play(GrowArrow(arrow_rest), GrowArrow(arrow_motion))\n        self.wait(2)\n\n        self.play(FadeOut(square_rest, square_motion, text_rest, text_motion, arrow_rest, arrow_motion))\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Hooke's Law Illustrated\"\n    animation: Begin with a title slide with the title, then animate a spring being stretched or compressed, demonstrating how the force applied is proportional to the displacement according to Hooke's Law (F = kx).\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass HookesLaw(Scene):\n    def construct(self):\n        title = Text(\"Hooke's Law Illustrated\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Spring setup\n        spring = Spring().shift(LEFT*2)\n        block = Square().next_to(spring, RIGHT)\n        equilibrium = Text(\"Equilibrium\", font_size=24).next_to(spring, UP, buff=0.1)\n\n        self.play(FadeIn(spring, shift=RIGHT), FadeIn(block, shift=LEFT))\n        self.play(Write(equilibrium))\n        self.wait(1)\n\n        # Stretching and compressing\n        for _ in range(2):\n            self.play(spring.stretch, 1.5, {\"dim\": 0}, rate_func=there_and_back, run_time=2)\n            self.play(block.shift, RIGHT*1.5, rate_func=there_and_back, run_time=2)\n            self.play(spring.stretch, 0.5, {\"dim\": 0}, rate_func=there_and_back, run_time=2)\n            self.play(block.shift, LEFT*0.5, rate_func=there_and_back, run_time=2)\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Calculating Pressure\"\nanimation: Begin with a title slide with the title, then animate a force acting on a surface and show the calculation of pressure as the force divided by the area (P = F / A).\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass PressureCalculation(Scene):\n    def construct(self):\n        title = Text(\"Calculating Pressure\", font_size=40)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Animate force arrow\n        force_arrow = Arrow(start=2*LEFT, end=2*RIGHT, color=RED)\n        force_label = MathTex(\"F\", color=RED).next_to(force_arrow, UP)\n        self.play(GrowArrow(force_arrow), Write(force_label))\n        self.wait(1)\n\n        # Animate surface\n        surface = Line(start=3*DOWN + 2*LEFT, end=3*DOWN + 2*RIGHT)\n        area_label = MathTex(\"A\", color=BLUE).next_to(surface, DOWN)\n        self.play(Write(surface), Write(area_label))\n        self.wait(1)\n\n        # Show calculation of pressure\n        pressure_formula = MathTex(r\"P = \\frac{F}{A}\").shift(UP)\n        self.play(Write(pressure_formula))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Heat Transfer Mechanisms\"\nanimation: Begin with a title slide with the title, then animate examples of heat transfer through conduction, convection, and radiation. Show conduction with a hot object touching a cold object, convection with fluid motion transferring heat, and radiation with electromagnetic waves emitting heat.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass HeatTransferMechanisms(Scene):\n    def construct(self):\n        title = Text(\"Heat Transfer Mechanisms\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Conduction\n        hot_obj = Square(color=RED).shift(LEFT)\n        cold_obj = Square(color=BLUE).shift(RIGHT)\n        self.play(GrowFromCenter(hot_obj), GrowFromCenter(cold_obj))\n        self.wait(1)\n        heat_transfer = Line(LEFT, RIGHT).set_color(YELLOW)\n        self.play(ShowCreation(heat_transfer))\n        self.wait(2)\n        self.play(FadeOut(hot_obj), FadeOut(cold_obj), FadeOut(heat_transfer))\n\n        # Convection\n        fluid = Rectangle(height=2, width=4, color=BLUE).shift(DOWN*0.5)\n        arrows = VGroup(\n            Arrow(ORIGIN, UP*0.5).shift(LEFT*1.5 + DOWN*0.5),\n            Arrow(ORIGIN, UP*0.5).shift(LEFT*0.5 + DOWN*0.5),\n            Arrow(ORIGIN, UP*0.5).shift(RIGHT*0.5 + DOWN*0.5),\n            Arrow(ORIGIN, UP*0.5).shift(RIGHT*1.5 + DOWN*0.5),\n        )\n        self.play(ShowCreation(fluid))\n        self.play(ShowCreation(arrows))\n        self.wait(2)\n        self.play(FadeOut(fluid), FadeOut(arrows))\n\n        # Radiation\n        source = Circle(color=YELLOW).scale(0.5)\n        waves = VGroup(\n            CurvedArrow(0.6*UP, 0.6*RIGHT, angle=-TAU/4),\n            CurvedArrow(0.6*RIGHT, 0.6*DOWN, angle=-TAU/4),\n            CurvedArrow(0.6*DOWN, 0.6*LEFT, angle=-TAU/4),\n            CurvedArrow(0.6*LEFT, 0.6*UP, angle=-TAU/4),\n        ).set_color(ORANGE)\n        self.play(ShowCreation(source))\n        self.play(ShowCreation(waves))\n        self.wait(2)\n        self.play(FadeOut(source), FadeOut(waves))\n\n        self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Light Reflection and Refraction\"\nanimation: Begin with a title slide with the title, then animate a light ray reflecting off a mirror and refracting as it passes through a lens, demonstrating the principles of reflection and refraction of light.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass LightReflectionRefraction(Scene):\n    def construct(self):\n        title = Text(\"Light Reflection and Refraction\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Mirror\n        mirror = Line(UP, DOWN).set_color(WHITE)\n        mirror.shift(LEFT * 2)\n        self.play(Create(mirror))\n\n        # Lens\n        lens = Ellipse(width=1.5, height=3, stroke_color=WHITE).shift(RIGHT * 2)\n        self.play(Create(lens))\n\n        # Incident Ray (towards mirror)\n        incident_ray = Arrow(start=LEFT * 4 + UP * 2, end=LEFT * 2 + UP * 0.5, buff=0, color=YELLOW)\n        self.play(Create(incident_ray))\n\n        # Reflected Ray\n        reflected_ray = Arrow(start=LEFT * 2 + UP * 0.5, end=LEFT * 0 + UP * 2, buff=0, color=YELLOW)\n        self.play(Create(reflected_ray))\n\n        # Refracted Ray (through lens)\n        refracted_ray = Arrow(start=RIGHT * 2 + UP * 0.5, end=RIGHT * 4 + UP * 1, buff=0, color=YELLOW)\n        self.play(Create(refracted_ray))\n\n        # Incident Ray (towards lens)\n        self.play(Transform(incident_ray, Arrow(start=LEFT * 0 + UP * 2, end=RIGHT * 2 + UP * 0.5, buff=0, color=YELLOW)))\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Dispersion of Light\"\n    animation: Begin with a title slide with the title, then animate a prism splitting white light into its component colors, creating a rainbow effect.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass DispersionOfLight(Scene):\n    def construct(self):\n        title = Text(\"Dispersion of Light\").scale(1.5)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Create prism and light\n        prism = Polygon([-1, 2, 0], [1, 2, 0], [0, -1, 0], color=WHITE).scale(1.5)\n        light = Line([-7, 0, 0], [-2, 0, 0], color=WHITE)\n        self.play(ShowCreation(prism), ShowCreation(light))\n        self.wait(1)\n\n        # Create rainbow effect\n        colors = [RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, VIOLET]\n        rays = VGroup()\n        for i, color in enumerate(colors):\n            angle = i * 10 - 30\n            ray = Line([-2, 0, 0], [3 * np.cos(np.radians(angle)), 3 * np.sin(np.radians(angle)), 0], color=color)\n            rays.add(ray)\n\n        self.play(Transform(light, rays))\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Exploring Wave Types\"\n    animation: Begin with a title slide with the title, then animate examples of transverse waves (e.g., light) and longitudinal waves (e.g., sound), showcasing their distinct characteristics and motion patterns.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass WaveTypes(Scene):\n    def construct(self):\n        title = Text(\"Exploring Wave Types\").scale(1.2)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Transverse Wave\n        transverse_wave = FunctionGraph(\n            lambda x: np.sin(x), x_range=[-3, 3], color=BLUE\n        )\n        transverse_wave_label = Text(\"Transverse Wave (e.g., light)\").to_edge(UP)\n        self.play(Create(transverse_wave), Write(transverse_wave_label))\n        self.play(transverse_wave.animate.shift(UP*2).set_color(BLUE))\n        self.play(transverse_wave.animate.shift(DOWN*4).set_color(BLUE))\n        self.play(FadeOut(transverse_wave), FadeOut(transverse_wave_label))\n\n        self.wait(1)\n\n        # Longitudinal Wave\n        dots = VGroup(*[Dot(radius=0.1).shift(RIGHT*i*0.5) for i in range(-6, 7)])\n        original_positions = [dot.get_center() for dot in dots]\n        longitudinal_wave_label = Text(\"Longitudinal Wave (e.g., sound)\").to_edge(UP)\n\n        def update_dots(dots):\n            for i, dot in enumerate(dots):\n                dot.move_to(original_positions[i] + np.array([np.sin(i + self.time*3)*0.2, 0, 0]))\n\n        self.play(Write(longitudinal_wave_label))\n        self.add(dots)\n        dots.add_updater(update_dots)\n        self.wait(4)\n        dots.remove_updater(update_dots)\n        self.play(FadeOut(dots), FadeOut(longitudinal_wave_label))\n\n        self.wait(1)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\n    title: \"Wave Interference Patterns\"\n    animation: Begin with a title slide with the title, then animate two wave sources emitting waves and show the resulting interference pattern, demonstrating both constructive and destructive interference.\n    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass WaveInterference(Scene):\n    def construct(self):\n        title = Text(\"Wave Interference Patterns\")\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        source1 = Dot(point=LEFT*2, color=BLUE)\n        source2 = Dot(point=RIGHT*2, color=RED)\n        self.play(FadeIn(source1), FadeIn(source2))\n        self.wait(1)\n\n        waves1 = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=BLUE).move_to(source1.get_center()) for i in range(1, 20)])\n        waves2 = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=RED).move_to(source2.get_center()) for i in range(1, 20)])\n\n        def update_wave1(wave, dt):\n            wave.scale(1.05)\n            wave.set_stroke(opacity=max(0, wave.stroke_opacity - 0.05))\n\n        def update_wave2(wave, dt):\n            wave.scale(1.05)\n            wave.set_stroke(opacity=max(0, wave.stroke_opacity - 0.05))\n\n        for wave in waves1:\n            wave.add_updater(update_wave1)\n            self.add(wave)\n            self.wait(0.1)\n            wave.remove_updater(update_wave1)\n\n        for wave in waves2:\n            wave.add_updater(update_wave2)\n            self.add(wave)\n            self.wait(0.1)\n            wave.remove_updater(update_wave2)\n\n        self.wait(2)\n```"}
{"instruction": "You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:\ntitle: \"Coulomb's Law Visualization\"\nanimation: Begin with a title slide with the title, then animate two charged particles with opposite charges to demonstrate the force of attraction between them. Next, animate two charged particles with the same charge to demonstrate the force of repulsion between them, illustrating Coulomb's Law.\nimportant note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.", "response": "```python\nfrom manim import *\n\nclass CoulombsLawVisualization(Scene):\n    def construct(self):\n        title = Text(\"Coulomb's Law Visualization\").scale(0.9)\n        self.play(Write(title))\n        self.wait(2)\n        self.play(FadeOut(title))\n\n        # Attraction\n        positive_charge = Circle(color=RED, fill_opacity=1).shift(LEFT*2)\n        positive_text = Text(\"+\", color=WHITE).scale(2).move_to(positive_charge.get_center())\n        negative_charge = Circle(color=BLUE, fill_opacity=1).shift(RIGHT*2)\n        negative_text = Text(\"-\", color=WHITE).scale(2).move_to(negative_charge.get_center())\n\n        self.play(GrowFromCenter(positive_charge), Write(positive_text),\n                  GrowFromCenter(negative_charge), Write(negative_text))\n        self.wait(1)\n        self.play(positive_charge.animate.shift(RIGHT*1.5), negative_charge.animate.shift(LEFT*1.5))\n        self.wait(1)\n        self.play(FadeOut(positive_charge), FadeOut(positive_text),\n                  FadeOut(negative_charge), FadeOut(negative_text))\n\n        # Repulsion\n        positive_charge_1 = Circle(color=RED, fill_opacity=1).shift(LEFT*2 + DOWN*2)\n        positive_text_1 = Text(\"+\", color=WHITE).scale(2).move_to(positive_charge_1.get_center())\n        positive_charge_2 = Circle(color=RED, fill_opacity=1).shift(RIGHT*2 + DOWN*2)\n        positive_text_2 = Text(\"+\", color=WHITE).scale(2).move_to(positive_charge_2.get_center())\n\n        self.play(GrowFromCenter(positive_charge_1), Write(positive_text_1),\n                  GrowFromCenter(positive_charge_2), Write(positive_text_2))\n        self.wait(1)\n        self.play(positive_charge_1.animate.shift(RIGHT*0.5), positive_charge_2.animate.shift(LEFT*0.5))\n        self.wait(2)\n```"}
