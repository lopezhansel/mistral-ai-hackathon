instruction,response
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Number Line Arithmetic""
    animation:  animate a point moving along a number line to the right for addition and to the left for subtraction, illustrating basic arithmetic operations.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NumberLineArithmetic(Scene):
    def construct(self):
        title = Text(""Number Line Arithmetic"").scale(0.9)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[-5, 5, 1], length=10, color=WHITE, include_numbers=True)
        self.play(Create(number_line))
        dot = Dot(point=number_line.n2p(0), color=YELLOW)
        self.play(FadeIn(dot))

        # Addition
        self.play(dot.animate.move_to(number_line.n2p(2)))
        self.wait(1)

        # Subtraction
        self.play(dot.animate.move_to(number_line.n2p(-1)))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Angles""
animation:  animate the formation of angles by rotating one line around a fixed point where it intersects another line. Highlight acute, obtuse, and right angles to illustrate the concept of angles.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class UnderstandingAngles(Scene):
    def construct(self):
        title = Text(""Understanding Angles"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create lines
        line1 = Line(ORIGIN, 2*RIGHT, color=WHITE)
        line2 = Line(ORIGIN, 2*UP, color=WHITE).rotate_about_origin(PI/4)
        dot = Dot(ORIGIN, color=YELLOW)

        self.play(Create(line1), Create(dot))
        self.play(Rotate(line2, angle=-PI/4, about_point=ORIGIN), run_time=2)
        self.wait(1)

        # Acute angle
        acute_angle = Angle(line1, line2, radius=0.5, color=GREEN)
        self.play(Create(acute_angle))
        self.wait(1)

        # Right angle
        self.play(Rotate(line2, angle=PI/4, about_point=ORIGIN), run_time=2)
        right_angle = RightAngle(line1, line2, length=0.5, color=BLUE)
        self.play(Transform(acute_angle, right_angle))
        self.wait(1)

        # Obtuse angle
        self.play(Rotate(line2, angle=PI/2, about_point=ORIGIN), run_time=2)
        obtuse_angle = Angle(line1, line2, radius=0.5, other_angle=True, color=RED)
        self.play(Transform(acute_angle, obtuse_angle))
        self.wait(2)

        self.play(FadeOut(line1), FadeOut(line2), FadeOut(dot), FadeOut(acute_angle))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Simple Harmonic Motion""
animation:  animate a pendulum swinging back and forth or a mass on a spring oscillating to demonstrate the basic idea of periodic motion.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SimpleHarmonicMotion(Scene):
    def construct(self):
        title = Text(""Simple Harmonic Motion"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Pendulum setup
        pivot = Dot(ORIGIN).shift(UP*2)
        bob = Dot().shift(DOWN*2)
        rod = Line(pivot.get_center(), bob.get_center()).set_stroke(width=2)
        pendulum = VGroup(pivot, rod, bob)

        def update_pendulum(mob, dt):
            rate = 2  # Speed of oscillation
            mob.rotate(rate * dt, about_point=pivot.get_center())

        pendulum.add_updater(update_pendulum)
        self.add(pendulum)
        self.wait(10)  # Let it swing for 10 seconds
        pendulum.clear_updaters()
        self.play(FadeOut(pendulum))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Visualizing Prime Numbers""
animation:  display a grid of numbers where prime numbers are highlighted in one color and non-prime numbers in another color. Optionally, animate the sieve of Eratosthenes algorithm to demonstrate how prime numbers are identified.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

class PrimeVisualization(Scene):
    def construct(self):
        title = Text(""Visualizing Prime Numbers"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        grid = VGroup()
        for i in range(1, 101):
            color = GREEN if is_prime(i) else RED
            number = Text(str(i), color=color).scale(0.5)
            grid.add(number)

        grid.arrange_in_grid(rows=10, cols=10, buff=0.5)
        self.play(Write(grid), run_time=3)
        self.wait(2)

        # Optional: Animate Sieve of Eratosthenes
        primes = []
        for i in range(2, 101):
            if is_prime(i):
                primes.append(i)
                for j in range(i*2, 101, i):
                    grid[j-1].set_color(BLUE)
                self.play(*[grid[j-1].animate.set_color(BLUE) for j in range(i*2, 101, i)], run_time=0.5)
                self.wait(0.5)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""The Water Cycle in Nature""
    animation:  animate clouds forming, raining, and the rainwater collecting back into a body of water, illustrating the process of evaporation, condensation, precipitation, and collection in the water cycle.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaterCycleScene(Scene):
    def construct(self):
        # Title
        title = Text(""The Water Cycle in Nature"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Clouds forming (Condensation)
        cloud1 = Circle(color=WHITE).shift(LEFT*2)
        cloud2 = Circle(color=WHITE).shift(LEFT*2 + UP*0.5)
        cloud3 = Circle(color=WHITE).shift(RIGHT*2)
        cloud4 = Circle(color=WHITE).shift(RIGHT*2 + UP*0.5)
        clouds = VGroup(cloud1, cloud2, cloud3, cloud4).scale(0.5)
        self.play(FadeIn(clouds))
        self.wait(2)

        # Rain (Precipitation)
        raindrops = VGroup(*[Line(start=3*UP + i*RIGHT*0.5, end=2*DOWN + i*RIGHT*0.5) for i in range(-5, 6)])
        self.play(ShowCreation(raindrops), run_time=2)
        self.wait(1)
        self.play(FadeOut(raindrops))

        # Water collection (Collection)
        water = Rectangle(width=FRAME_WIDTH, height=1, color=BLUE).shift(DOWN*1.5)
        self.play(FadeIn(water))
        self.wait(1)

        # Evaporation
        evaporation = Text(""Evaporation"", font_size=24).shift(UP*3)
        self.play(Write(evaporation))
        self.wait(2)
        self.play(FadeOut(evaporation), FadeOut(water), FadeOut(clouds))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Electric Circuit Demonstration""
animation:  animate a basic electrical circuit consisting of a battery, resistor, and a light bulb. Show the flow of current from the battery through the resistor, lighting up the bulb to demonstrate the circuit in action.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ElectricCircuitDemo(Scene):
    def construct(self):
        title = Text(""Electric Circuit Demonstration"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Drawing the circuit components
        battery = Rectangle(height=1, width=0.5).set_fill(BLUE, opacity=0.5)
        battery_text = Text(""Battery"", font_size=24).next_to(battery, UP)
        resistor = Rectangle(height=0.5, width=1).set_fill(RED, opacity=0.5)
        resistor_text = Text(""Resistor"", font_size=24).next_to(resistor, UP)
        bulb = Circle(radius=0.5).set_fill(YELLOW, opacity=0.5)
        bulb_text = Text(""Bulb"", font_size=24).next_to(bulb, UP)

        # Positioning
        battery.shift(LEFT * 3)
        resistor.next_to(battery, RIGHT, buff=1)
        bulb.next_to(resistor, RIGHT, buff=1)

        # Drawing wires
        wire1 = Line(battery.get_right(), resistor.get_left())
        wire2 = Line(resistor.get_right(), bulb.get_center())
        wire3 = Line(bulb.get_center(), battery.get_left())

        self.play(FadeIn(battery, battery_text, resistor, resistor_text, bulb, bulb_text, wire1, wire2, wire3))

        # Animate current flow
        current_dots = [Dot(color=RED).move_to(wire1.get_start()) for _ in range(5)]
        for dot in current_dots:
            self.add(dot)
            self.play(dot.animate(rate_func=linear).move_to(wire2.get_end()), run_time=2)
            self.play(dot.animate(rate_func=linear).move_to(wire3.get_end()), run_time=2)
            self.remove(dot)

        # Light up the bulb
        self.play(bulb.animate.set_fill(YELLOW, opacity=1))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Gravity in Action""
animation:  animate objects of different masses falling towards the Earth at the same rate, disregarding air resistance, to illustrate the concept of gravity.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class GravityInAction(Scene):
    def construct(self):
        title = Text(""Gravity in Action"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        earth = Circle(color=BLUE, fill_opacity=1).scale(0.5).shift(DOWN*3)
        earth_text = Text(""Earth"", color=WHITE).scale(0.5).next_to(earth, DOWN)
        self.add(earth, earth_text)

        # Objects with different masses
        object1 = Circle(color=RED, fill_opacity=1).scale(0.2).shift(UP*3 + LEFT*3)
        object2 = Square(color=YELLOW, fill_opacity=1).scale(0.3).shift(UP*3)
        object3 = Triangle(color=GREEN, fill_opacity=1).scale(0.25).shift(UP*3 + RIGHT*3)

        self.play(FadeIn(object1, object2, object3))
        self.wait(1)

        # Animate objects falling at the same rate
        self.play(object1.animate.shift(DOWN*6), object2.animate.shift(DOWN*6), object3.animate.shift(DOWN*6), run_time=2, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Seasons Explained""
    animation:  animate the Earth's tilt and orbit around the Sun, demonstrating how the angle of sunlight changes over the course of a year and how this leads to the occurrence of seasons.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SeasonsExplained(Scene):
    def construct(self):
        # Title
        title = Text(""Seasons Explained"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup
        sun = Circle(radius=0.5, color=YELLOW).shift(LEFT*3)
        earth = Circle(radius=0.2, color=BLUE).shift(RIGHT*3)
        orbit_path = Ellipse(width=6, height=3, color=WHITE).shift(LEFT*3)

        # Earth's tilt
        tilt_line = Line(earth.get_top(), earth.get_bottom(), color=WHITE)
        earth.add(tilt_line)
        earth_tilt = earth.copy().rotate(23.5 * DEGREES, about_point=earth.get_center())

        # Animation
        self.play(Create(sun), Create(orbit_path), Transform(earth, earth_tilt))
        self.play(earth.animate.move_to(orbit_path.point_from_proportion(0)))
        self.play(MoveAlongPath(earth, orbit_path), rate_func=linear, run_time=8)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Decimal to Binary Conversion""
animation:  animate the conversion of decimal numbers to binary by lighting up bits (0s and 1s) in a row to represent different decimal values.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DecimalToBinary(Scene):
    def construct(self):
        title = Text(""Decimal to Binary Conversion"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        numbers = [1, 2, 3, 4, 5, 6, 7, 8]
        for number in numbers:
            binary_string = format(number, 'b')
            binary_text = Text(binary_string, font_size=64)
            self.play(Write(binary_text))
            self.wait(1)
            self.play(FadeOut(binary_text))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Caesar Cipher Encryption and Decryption""
animation:  animate the process of encrypting a message using a Caesar cipher by shifting letters in the alphabet to the right, and decrypting the message by shifting letters to the left, visualizing simple data encryption and decryption.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CaesarCipher(Scene):
    def construct(self):
        title = Text(""Caesar Cipher Encryption and Decryption"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Encryption
        plaintext = Text(""HELLO"", font_size=48)
        self.play(Write(plaintext))
        self.wait(1)

        shift_text = Text(""Shift: 3"", font_size=36).next_to(plaintext, DOWN)
        self.play(Write(shift_text))
        self.wait(1)

        encrypted_text = Text(""KHOOR"", font_size=48).next_to(shift_text, DOWN)
        self.play(Transform(plaintext, encrypted_text))
        self.wait(2)

        # Decryption
        decrypt_text = Text(""Decrypt"", font_size=36).next_to(encrypted_text, DOWN)
        self.play(Write(decrypt_text))
        self.wait(1)

        decrypted_text = Text(""HELLO"", font_size=48).move_to(plaintext.get_center())
        self.play(Transform(encrypted_text, decrypted_text))
        self.wait(2)

        self.play(FadeOut(plaintext), FadeOut(shift_text), FadeOut(decrypted_text), FadeOut(decrypt_text))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Pythagorean Theorem Visualization""
animation:  animate a right-angled triangle with squares drawn on each side. As the triangle changes size, show that the sum of the areas of the squares on the two shorter sides always equals the area of the square on the longest side, illustrating the Pythagorean Theorem.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PythagoreanTheorem(Scene):
    def construct(self):
        title = Text(""Pythagorean Theorem Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a right-angled triangle
        triangle = Polygon(ORIGIN, 4*RIGHT, 3*UP, color=WHITE)
        square_hypotenuse = Square(side_length=5).move_to(triangle.get_center(), aligned_edge=DL).rotate_about_origin(triangle.get_angle()).set_color(BLUE)
        square_adjacent = Square(side_length=4).next_to(triangle, DOWN, buff=0).set_color(RED)
        square_opposite = Square(side_length=3).next_to(triangle, LEFT, buff=0).set_color(GREEN)

        self.play(Create(triangle))
        self.play(Create(square_hypotenuse), Create(square_adjacent), Create(square_opposite))
        self.wait(2)

        # Animate the triangle changing size
        for factor in [0.8, 1.2, 1.0]:
            new_triangle = Polygon(ORIGIN, 4*RIGHT*factor, 3*UP*factor, color=WHITE)
            new_square_hypotenuse = Square(side_length=5*factor).move_to(new_triangle.get_center(), aligned_edge=DL).rotate_about_origin(new_triangle.get_angle()).set_color(BLUE)
            new_square_adjacent = Square(side_length=4*factor).next_to(new_triangle, DOWN, buff=0).set_color(RED)
            new_square_opposite = Square(side_length=3*factor).next_to(new_triangle, LEFT, buff=0).set_color(GREEN)

            self.play(Transform(triangle, new_triangle), Transform(square_hypotenuse, new_square_hypotenuse), Transform(square_adjacent, new_square_adjacent), Transform(square_opposite, new_square_opposite), run_time=2)
            self.wait(1)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Doppler Effect Simulation""
animation:  animate a sound source (e.g., an ambulance) moving past an observer. Show the sound waves being compressed in front of the source and stretched out behind it, illustrating the change in pitch heard by the observer.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DopplerEffectSimulation(Scene):
    def construct(self):
        title = Text(""Doppler Effect Simulation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Sound source - Ambulance
        ambulance = Circle(color=RED, fill_opacity=1).scale(0.5)
        ambulance_text = Text(""Ambulance"", font_size=24).next_to(ambulance, DOWN)
        ambulance_group = VGroup(ambulance, ambulance_text)

        # Observer
        observer = Dot(color=BLUE).shift(4*RIGHT)
        observer_text = Text(""Observer"", font_size=24).next_to(observer, DOWN)
        observer_group = VGroup(observer, observer_text)

        self.play(FadeIn(ambulance_group), FadeIn(observer_group))
        self.wait(1)

        # Sound waves
        waves = VGroup()
        for i in range(5):
            wave = Circle(color=BLUE, fill_opacity=0.2).scale(i*0.5)
            wave.move_to(ambulance.get_center())
            waves.add(wave)

        def update_waves(waves):
            new_waves = VGroup()
            for wave in waves:
                new_wave = wave.copy()
                new_wave.scale(1.1, about_point=ambulance.get_center())
                if new_wave.width < 0.1 or new_wave.height < 0.1:
                    continue
                new_waves.add(new_wave)
            return new_waves

        self.play(ambulance_group.animate.shift(8*LEFT), UpdateFromFunc(waves, update_waves), run_time=4, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Magnetic Fields Interaction""
animation:  animate a bar magnet with field lines surrounding it. Introduce a second magnet and show how the field lines interact, demonstrating attraction and repulsion between the two magnets.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MagneticFieldsInteraction(Scene):
    def construct(self):
        title = Text(""Magnetic Fields Interaction"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Magnet 1
        magnet1 = Rectangle(color=RED, height=1, width=2).shift(LEFT*3)
        magnet1_label_n = Text(""N"", color=WHITE).scale(0.5).next_to(magnet1, UP, buff=0.1)
        magnet1_label_s = Text(""S"", color=WHITE).scale(0.5).next_to(magnet1, DOWN, buff=0.1)
        self.play(GrowFromCenter(magnet1), Write(magnet1_label_n), Write(magnet1_label_s))

        # Field lines for Magnet 1
        field_lines1 = VGroup(*[ArcBetweenPoints(start_point=magnet1.get_top() + UP*0.2 + LEFT*0.2*i,
                                                 end_point=magnet1.get_bottom() + DOWN*0.2 + LEFT*0.2*i,
                                                 angle=-TAU/4) for i in range(6)])
        self.play(ShowCreation(field_lines1))

        # Magnet 2
        magnet2 = Rectangle(color=BLUE, height=1, width=2).shift(RIGHT*3)
        magnet2_label_n = Text(""N"", color=WHITE).scale(0.5).next_to(magnet2, UP, buff=0.1)
        magnet2_label_s = Text(""S"", color=WHITE).scale(0.5).next_to(magnet2, DOWN, buff=0.1)
        self.play(GrowFromCenter(magnet2), Write(magnet2_label_n), Write(magnet2_label_s))

        # Field lines for Magnet 2
        field_lines2 = VGroup(*[ArcBetweenPoints(start_point=magnet2.get_top() + UP*0.2 + RIGHT*0.2*i,
                                                 end_point=magnet2.get_bottom() + DOWN*0.2 + RIGHT*0.2*i,
                                                 angle=TAU/4) for i in range(6)])
        self.play(ShowCreation(field_lines2))

        # Interaction
        self.play(magnet2.animate.shift(LEFT*2.5), rate_func=there_and_back, run_time=2)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Projectile Motion Simulation""
    animation:  animate an object being launched at an angle, showing its path as a parabola. The horizontal motion should be constant, while the vertical motion should be affected by gravity, causing the object to follow a curved trajectory.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ProjectileMotion(Scene):
    def construct(self):
        title = Text(""Projectile Motion Simulation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Constants for the projectile motion
        velocity = 5
        angle = 45
        gravity = 9.8
        time_of_flight = 2 * velocity * np.sin(np.radians(angle)) / gravity
        max_height = (velocity**2) * (np.sin(np.radians(angle))**2) / (2 * gravity)
        range = velocity * np.cos(np.radians(angle)) * time_of_flight

        # Creating the trajectory path
        trajectory = FunctionGraph(
            lambda x: x * np.tan(np.radians(angle)) - (gravity * x**2) / (2 * velocity**2 * np.cos(np.radians(angle))**2),
            x_range=[0, range],
            color=BLUE
        )

        # Creating the object
        object = Dot(radius=0.1, color=YELLOW)
        object.move_to(trajectory.points[0])

        # Animating the object along the path
        self.play(MoveAlongPath(object, trajectory, rate_func=linear), run_time=time_of_flight)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Photosynthesis in Action""
    animation:  animate a plant absorbing sunlight, CO2, and water to produce glucose and oxygen. Show the chloroplasts in the leaves and the chemical reaction taking place, illustrating the process of photosynthesis.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PhotosynthesisInAction(Scene):
    def construct(self):
        # Title
        title = Text(""Photosynthesis in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Elements of Photosynthesis
        sun = Circle(color=YELLOW, fill_opacity=1).scale(0.5).shift(UP*3 + LEFT*4)
        sun_text = Text(""Sunlight"", color=BLACK).scale(0.3).next_to(sun, DOWN)
        co2 = Text(""CO2"", color=WHITE).scale(0.5).shift(UP*3 + RIGHT*4)
        water = SVGMobject().set(width=0.5).move_to(DOWN*2 + LEFT*4)
        water_text = Text(""H2O"", color=WHITE).scale(0.5).next_to(water, DOWN)

        # Plant
        plant = Line(ORIGIN, DOWN*2, color=GREEN).shift(DOWN)
        leaf_left = Ellipse(width=1.5, height=1, color=GREEN, fill_opacity=1).shift(DOWN + LEFT*0.75)
        leaf_right = Ellipse(width=1.5, height=1, color=GREEN, fill_opacity=1).shift(DOWN + RIGHT*0.75)
        chloroplasts = VGroup(*[Dot(color=DARK_GREEN).move_to(leaf_left.get_center() + point) for point in [UP*0.3, DOWN*0.3, LEFT*0.3, RIGHT*0.3]])

        # Chemical Reaction
        reactants = Text(""6CO2 + 6H2O + Light -> C6H12O6 + 6O2"", color=WHITE).scale(0.5).shift(DOWN*3)

        # Animation
        self.play(FadeIn(sun), FadeIn(sun_text), FadeIn(co2), FadeIn(water), FadeIn(water_text))
        self.play(GrowFromCenter(plant), GrowFromCenter(leaf_left), GrowFromCenter(leaf_right), FadeIn(chloroplasts))
        self.wait(1)
        self.play(ReplacementTransform(co2.copy(), chloroplasts), ReplacementTransform(water_text.copy(), chloroplasts), ReplacementTransform(sun_text.copy(), chloroplasts))
        self.wait(1)
        self.play(Write(reactants))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Archimedes' Principle Illustrated""
animation:  animate an object being submerged in water. Show the water level rising and a force (buoyant force) pushing up on the object. Illustrate that the buoyant force equals the weight of the water displaced by the object.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ArchimedesPrinciple(Scene):
    def construct(self):
        title = Text(""Archimedes' Principle Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Water container
        container = Rectangle(height=4, width=6).set_fill(BLUE, opacity=0.5).set_stroke(width=2)
        self.play(Create(container))

        # Object
        object = Square(side_length=1).set_fill(GRAY, opacity=1).move_to(3*UP)
        self.play(Create(object))
        self.play(object.animate.shift(2.5*DOWN), run_time=2)

        # Water level rise animation
        displaced_water = Rectangle(height=0.3, width=6).set_fill(BLUE, opacity=0.8).next_to(container, UP, buff=0)
        self.play(container.animate.set_fill(BLUE, opacity=0.8), GrowFromCenter(displaced_water))

        # Buoyant force arrow
        buoyant_force = Arrow(start=object.get_center(), end=object.get_center() + 1*UP, buff=0.1, color=YELLOW)
        buoyant_force_label = Text(""Buoyant Force"", font_size=24).next_to(buoyant_force, UP, buff=0.1)
        self.play(GrowArrow(buoyant_force), Write(buoyant_force_label))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Balancing Chemical Equations""
animation:  animate reactant molecules combining to form product molecules, while ensuring that the number of each type of atom remains constant throughout the reaction.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class BalancingChemicalEquations(Scene):
    def construct(self):
        title = Text(""Balancing Chemical Equations"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Reactants
        reactant1 = Circle(color=BLUE).scale(0.5)
        reactant1_text = Text(""H"", color=WHITE).scale(0.5)
        reactant1_group = VGroup(reactant1, reactant1_text)

        reactant2 = Circle(color=RED).scale(0.5).next_to(reactant1, RIGHT, buff=0.1)
        reactant2_text = Text(""O"", color=WHITE).scale(0.5)
        reactant2_group = VGroup(reactant2, reactant2_text)

        reactants = VGroup(reactant1_group, reactant2_group).move_to(LEFT*3)

        # Products
        product1 = Circle(color=GREEN).scale(0.5)
        product1_text = Text(""H2O"", color=WHITE).scale(0.5)
        product1_group = VGroup(product1, product1_text).move_to(RIGHT*3)

        self.play(ShowCreation(reactant1), Write(reactant1_text), ShowCreation(reactant2), Write(reactant2_text))
        self.wait(1)
        self.play(Transform(reactant1_group, product1_group), Transform(reactant2_group, product1_group.copy().next_to(product1_group, RIGHT, buff=0.1)))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Centripetal Force in Action""
    animation:  animate an object moving in a circular path, with a force constantly pulling it towards the center of the circle, demonstrating the concept of centripetal force.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CentripetalForceScene(Scene):
    def construct(self):
        title = Text(""Centripetal Force in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        circle = Circle(radius=2)
        dot = Dot(circle.get_start())
        arrow = Arrow(dot.get_center(), circle.get_center(), buff=0)

        self.play(Create(circle))
        self.play(FadeIn(dot))
        self.play(ShowCreation(arrow))
        self.play(MoveAlongPath(dot, circle), rate_func=linear, run_time=4)
        self.play(FadeOut(dot), FadeOut(circle), FadeOut(arrow))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Resonance Phenomenon""
animation:  animate a tuning fork vibrating at its natural frequency. Next, introduce a second tuning fork of the same frequency nearby and show it starting to vibrate due to resonance between the two forks.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ResonancePhenomenon(Scene):
    def construct(self):
        # Title slide
        title = Text(""Resonance Phenomenon"", font_size=48)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # First tuning fork
        fork1 = Line(ORIGIN, UP * 2).shift(LEFT * 2)
        fork1_head = VGroup(
            Line(fork1.get_end(), fork1.get_end() + RIGHT * 0.5),
            Line(fork1.get_end(), fork1.get_end() + LEFT * 0.5)
        )
        tuning_fork1 = VGroup(fork1, fork1_head)

        # Second tuning fork
        fork2 = Line(ORIGIN, UP * 2).shift(RIGHT * 2)
        fork2_head = VGroup(
            Line(fork2.get_end(), fork2.get_end() + RIGHT * 0.5),
            Line(fork2.get_end(), fork2.get_end() + LEFT * 0.5)
        )
        tuning_fork2 = VGroup(fork2, fork2_head)

        self.play(ShowCreation(tuning_fork1), ShowCreation(tuning_fork2))
        self.wait(1)

        # Animate first tuning fork vibrating
        for _ in range(4):
            self.play(tuning_fork1.animate.shift(RIGHT * 0.1), run_time=0.1)
            self.play(tuning_fork1.animate.shift(LEFT * 0.2), run_time=0.2)
            self.play(tuning_fork1.animate.shift(RIGHT * 0.1), run_time=0.1)

        self.wait(1)

        # Animate second tuning fork starting to vibrate due to resonance
        for _ in range(4):
            self.play(tuning_fork2.animate.shift(RIGHT * 0.1), run_time=0.1)
            self.play(tuning_fork2.animate.shift(LEFT * 0.2), run_time=0.2)
            self.play(tuning_fork2.animate.shift(RIGHT * 0.1), run_time=0.1)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Ohm's Law Illustrated""
animation:  animate a circuit with a battery, a resistor, and current flowing through the circuit. Show that the current is directly proportional to the voltage and inversely proportional to the resistance, as per Ohm's Law.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class OhmsLaw(Scene):
    def construct(self):
        title = Text(""Ohm's Law Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Circuit components
        battery = Line(ORIGIN, UP).set_color(YELLOW)
        battery.shift(LEFT*2)
        resistor = Rectangle(width=1, height=0.5).set_color(RED)
        resistor.next_to(battery, RIGHT, buff=1)
        wire1 = Line(battery.get_right(), resistor.get_left()).set_color(GREY)
        wire2 = Line(resistor.get_right(), resistor.get_right() + RIGHT).set_color(GREY)
        wire3 = Line(battery.get_left(), battery.get_left() + LEFT).set_color(GREY)
        wire4 = Line(battery.get_left() + LEFT, resistor.get_right() + RIGHT).set_color(GREY)
        circuit = VGroup(battery, resistor, wire1, wire2, wire3, wire4)

        # Current flow
        current_dots = VGroup(*[Dot(radius=0.05, color=BLUE).move_to(wire4.get_start() + RIGHT*i*0.2) for i in range(5)])
        current_animation = Succession(*[ApplyMethod(dot.move_to, wire4.get_start() + RIGHT*(i+1)*0.2) for i, dot in enumerate(current_dots)], lag_ratio=1)

        self.play(FadeIn(circuit))
        self.wait(1)
        self.play(ShowCreation(current_dots), run_time=1)
        self.play(current_animation, run_time=2, rate_func=linear)
        self.wait(1)

        # Ohm's Law Visualization
        ohms_law_text = Text(""V = I * R"", font_size=36)
        ohms_law_text.to_edge(UP)

        increasing_voltage = Text(""Increasing Voltage"", font_size=24).next_to(battery, DOWN, buff=0.5)
        decreasing_resistance = Text(""Decreasing Resistance"", font_size=24).next_to(resistor, DOWN, buff=0.5)

        self.play(Write(ohms_law_text))
        self.wait(1)
        self.play(Write(increasing_voltage))
        self.play(battery.stretch, 1.5, 0, {""about_edge"": UP})
        self.wait(1)
        self.play(ReplacementTransform(increasing_voltage, decreasing_resistance))
        self.play(resistor.stretch, 0.5, 0, {""about_edge"": RIGHT})
        self.wait(2)

        self.play(FadeOut(VGroup(circuit, current_dots, ohms_law_text, decreasing_resistance)))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Electromagnetic Induction Demonstration""
    animation:  animate a magnet moving through a coil of wire, showing the induced current flowing in the coil as a result of electromagnetic induction.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ElectromagneticInduction(Scene):
    def construct(self):
        title = Text(""Electromagnetic Induction Demonstration"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Coil
        coil = VGroup(*[Circle(arc_center=[i*0.2, 0, 0], radius=0.5) for i in range(-10, 11)])
        coil.set_color(BLUE)
        self.play(ShowCreation(coil))
        
        # Magnet
        magnet = Rectangle(width=1, height=0.5, color=RED)
        magnet_text = Text(""N"", font_size=24).next_to(magnet, LEFT, buff=0.1)
        magnet_text2 = Text(""S"", font_size=24).next_to(magnet, RIGHT, buff=0.1)
        magnet_group = VGroup(magnet, magnet_text, magnet_text2)
        self.play(FadeIn(magnet_group))
        
        # Animate magnet moving through the coil
        self.play(magnet_group.animate.shift(RIGHT*4), rate_func=there_and_back, run_time=4)
        
        # Induced current flow
        current_flow = CurvedArrow(start_point=[-2, 0.5, 0], end_point=[2, 0.5, 0], color=YELLOW)
        self.play(ShowCreation(current_flow))
        self.wait(2)
        self.play(FadeOut(coil), FadeOut(magnet_group), FadeOut(current_flow))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Newton's Third Law Illustrated""
animation:  animate two objects, such as a book and a table, interacting with each other. Show equal and opposite forces acting on both objects, demonstrating Newton's Third Law of motion.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NewtonsThirdLaw(Scene):
    def construct(self):
        title = Text(""Newton's Third Law Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create objects
        book = Square(color=BLUE, fill_opacity=1).scale(0.5)
        table = Rectangle(width=3, height=0.5, color=GREEN, fill_opacity=1).next_to(book, DOWN, buff=0)

        book_text = Text(""Book"", color=WHITE).scale(0.5).move_to(book)
        table_text = Text(""Table"", color=WHITE).scale(0.5).move_to(table)

        # Add objects to scene
        self.play(FadeIn(book), FadeIn(table), FadeIn(book_text), FadeIn(table_text))
        self.wait(1)

        # Forces
        force_book = Arrow(book.get_top(), book.get_top() + UP, buff=0, color=RED)
        force_table = Arrow(table.get_top(), table.get_top() + DOWN, buff=0, color=YELLOW)

        force_book_label = Text(""Force on Book"", color=RED).scale(0.5).next_to(force_book, UP, buff=0.1)
        force_table_label = Text(""Force on Table"", color=YELLOW).scale(0.5).next_to(force_table, DOWN, buff=0.1)

        self.play(GrowArrow(force_book), GrowArrow(force_table), Write(force_book_label), Write(force_table_label))
        self.wait(2)

        # Demonstrating Newton's Third Law
        self.play(book.shift, UP*0.5, table.shift, DOWN*0.5)
        self.wait(1)

        self.play(book.shift, DOWN*0.5, table.shift, UP*0.5)
        self.wait(2)

        self.play(FadeOut(book), FadeOut(table), FadeOut(book_text), FadeOut(table_text),
                  FadeOut(force_book), FadeOut(force_table), FadeOut(force_book_label), FadeOut(force_table_label))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Normal Distribution Visualization""
animation:  animate a normal distribution curve with the mean at the center and the standard deviations marked off. Show a point moving along the curve to represent a value and its corresponding probability.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NormalDistributionVisualization(Scene):
    def construct(self):
        title = Text(""Normal Distribution Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        axes = Axes(
            x_range=[-4, 4, 1],
            y_range=[0, 0.5, 0.1],
            axis_config={""color"": BLUE},
        )

        mean = 0
        std_dev = 1
        curve = axes.plot(lambda x: np.exp(-0.5 * ((x - mean) / std_dev) ** 2) / (std_dev * np.sqrt(2 * np.pi)), color=WHITE)
        curve_label = axes.get_graph_label(curve, label='\\sigma')

        self.play(Create(axes), Write(curve_label))
        self.play(Create(curve))
        self.wait(1)

        dot = Dot(color=RED).move_to(axes.c2p(0, 0))
        self.play(FadeIn(dot))

        def update_dot(mob, alpha):
            x = interpolate(-3, 3, alpha)
            y = np.exp(-0.5 * ((x - mean) / std_dev) ** 2) / (std_dev * np.sqrt(2 * np.pi))
            mob.move_to(axes.c2p(x, y))

        self.play(UpdateFromAlphaFunc(dot, update_dot), run_time=4, rate_func=there_and_back)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Radioactive Decay Simulation""
animation:  animate a group of unstable nuclei decaying over time, with the number of undecayed nuclei decreasing exponentially to illustrate radioactive decay.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RadioactiveDecaySimulation(Scene):
    def construct(self):
        title = Text(""Radioactive Decay Simulation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parameters
        start_nuclei = 50
        half_life = 2  # seconds
        decay_rate = 0.5  # half per half_life
        simulation_time = 8  # seconds

        # Create initial nuclei
        nuclei = VGroup(*[Dot(radius=0.05, color=BLUE) for _ in range(start_nuclei)])
        nuclei.arrange_in_grid(rows=5, buff=0.5)
        self.play(ShowCreation(nuclei))
        self.wait(1)

        # Simulate decay
        for t in range(1, simulation_time + 1):
            decayed = int(start_nuclei * (decay_rate ** (t / half_life)))
            to_decay = start_nuclei - decayed
            start_nuclei = decayed

            if to_decay > 0:
                decaying_nuclei = nuclei[:to_decay]
                self.play(decaying_nuclei.animate.set_opacity(0.2), rate_func=linear, run_time=1)
            self.wait(1)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Electric Field Visualization""
animation:  animate a positive charge and a negative charge on the screen, with electric field lines emanating from the positive charge and terminating on the negative charge, visually illustrating the concept of an electric field.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ElectricFieldVisualization(Scene):
    def construct(self):
        title = Text(""Electric Field Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Charges
        positive_charge = Circle(color=RED, fill_opacity=1).scale(0.5)
        positive_charge_text = Text(""+"", font_size=48).move_to(positive_charge)
        positive_charge_group = VGroup(positive_charge, positive_charge_text).shift(LEFT*2)

        negative_charge = Circle(color=BLUE, fill_opacity=1).scale(0.5)
        negative_charge_text = Text(""-"", font_size=48).move_to(negative_charge)
        negative_charge_group = VGroup(negative_charge, negative_charge_text).shift(RIGHT*2)

        self.play(FadeIn(positive_charge_group), FadeIn(negative_charge_group))
        self.wait(1)

        # Electric field lines
        field_lines = []
        for angle in np.linspace(0, 2*np.pi, 16, endpoint=False):
            start_point = positive_charge.get_center() + np.array([np.cos(angle), np.sin(angle), 0])
            end_point = negative_charge.get_center() + np.array([np.cos(angle+np.pi), np.sin(angle+np.pi), 0])*0.5
            line = Arrow(start_point, end_point, buff=0.1)
            field_lines.append(line)

        self.play(*[GrowArrow(line) for line in field_lines], run_time=2)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Torque""
animation:  animate a wrench turning a bolt, with the force applied at a distance from the axis of rotation. Show how the concept of torque is calculated as the product of force and distance.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class TorqueAnimation(Scene):
    def construct(self):
        title = Text(""Understanding Torque"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup wrench and bolt
        wrench = Line(ORIGIN, RIGHT * 2, color=BLUE).shift(LEFT)
        bolt = Circle(radius=0.2, color=WHITE).shift(RIGHT * 2)
        force_arrow = Arrow(start=wrench.get_end(), end=wrench.get_end() + UP * 1, buff=0, color=YELLOW)
        distance_line = DashedLine(start=bolt.get_center(), end=wrench.get_end(), color=PURPLE)

        # Labels
        force_label = MathTex(""F"", color=YELLOW).next_to(force_arrow, UP, buff=0.1)
        distance_label = MathTex(""d"", color=PURPLE).next_to(distance_line, DOWN, buff=0.1)
        torque_label = MathTex(r""\tau = F \times d"", color=GREEN).shift(DOWN * 2)

        self.play(FadeIn(bolt), GrowFromPoint(wrench, point=wrench.get_start()))
        self.play(ShowCreation(force_arrow), Write(force_label))
        self.play(ShowCreation(distance_line), Write(distance_label))
        self.wait(1)
        self.play(Write(torque_label))
        self.wait(1)

        # Animate wrench turning
        wrench_turn = Rotating(wrench, about_point=bolt.get_center(), radians=PI/2)
        bolt_turn = Rotating(bolt, about_point=bolt.get_center(), radians=PI/2)
        self.play(wrench_turn, bolt_turn, run_time=2)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Wave Interference Demonstration""
animation:  animate two wave sources producing waves that overlap and form an interference pattern. Show areas of constructive interference where waves amplify each other, and areas of destructive interference where waves cancel each other out.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaveInterference(Scene):
    def construct(self):
        title = Text(""Wave Interference Demonstration"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parameters for wave sources and waves
        source_a = Dot(point=LEFT*2, color=BLUE)
        source_b = Dot(point=RIGHT*2, color=RED)
        waves_a = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=BLUE).move_to(source_a.get_center()) for i in range(1, 20)])
        waves_b = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=RED).move_to(source_b.get_center()) for i in range(1, 20)])
        
        self.play(FadeIn(source_a), FadeIn(source_b))
        self.play(AnimationGroup(*[GrowFromCenter(wave) for wave in waves_a], lag_ratio=0.1),
                  AnimationGroup(*[GrowFromCenter(wave) for wave in waves_b], lag_ratio=0.1),
                  run_time=4, rate_func=linear)
        
        interference_text = Text(""Interference Pattern"", color=YELLOW).to_edge(UP)
        self.play(Write(interference_text))
        self.wait(2)

        # Highlight areas of constructive and destructive interference
        constructive_area = Circle(radius=1, color=YELLOW).move_to(0.5*LEFT)
        destructive_area = Circle(radius=1, color=WHITE).move_to(1.5*RIGHT)
        self.play(ShowCreation(constructive_area), ShowCreation(destructive_area))
        self.wait(2)

        self.play(FadeOut(constructive_area), FadeOut(destructive_area), FadeOut(interference_text),
                  FadeOut(waves_a), FadeOut(waves_b), FadeOut(source_a), FadeOut(source_b))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Bernoulli's Principle in Action""
    animation:  animate fluid flowing through a constricted pipe. Show the velocity increasing and the pressure decreasing in the constricted area, illustrating Bernoulli's Principle in action.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class BernoullisPrinciple(Scene):
    def construct(self):
        title = Text(""Bernoulli's Principle in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Pipe
        pipe_start = Rectangle(width=6, height=1, color=BLUE)
        pipe_constriction = Rectangle(width=2, height=0.5, color=BLUE)
        pipe_end = Rectangle(width=6, height=1, color=BLUE)

        pipe_constriction.next_to(pipe_start, RIGHT, buff=0)
        pipe_end.next_to(pipe_constriction, RIGHT, buff=0)

        self.play(DrawBorderThenFill(pipe_start), DrawBorderThenFill(pipe_constriction), DrawBorderThenFill(pipe_end))
        
        # Fluid flow
        fluid_particles_start = VGroup(*[Circle(radius=0.1, color=WHITE).move_to(pipe_start.get_left() + RIGHT * x + 0.2 * UP * np.random.rand()) for x in np.linspace(0.5, 5.5, 20)])
        fluid_particles_constriction = VGroup(*[Circle(radius=0.05, color=WHITE).move_to(pipe_constriction.get_left() + RIGHT * x + 0.1 * UP * np.random.rand()) for x in np.linspace(0.5, 1.5, 20)])
        fluid_particles_end = VGroup(*[Circle(radius=0.1, color=WHITE).move_to(pipe_end.get_left() + RIGHT * x + 0.2 * UP * np.random.rand()) for x in np.linspace(0.5, 5.5, 20)])

        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 6 * RIGHT)) for particle in fluid_particles_start], lag_ratio=0.1))
        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 2 * RIGHT)) for particle in fluid_particles_constriction], lag_ratio=0.05))
        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 6 * RIGHT)) for particle in fluid_particles_end], lag_ratio=0.1))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Polarization of Light""
animation:  animate a light wave passing through a polarizing filter. Show the wave being blocked when the filter is rotated perpendicular to the plane of polarization, demonstrating the concept of polarization.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PolarizationOfLight(Scene):
    def construct(self):
        title = Text(""Polarization of Light"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a light wave
        light_wave = FunctionGraph(lambda x: np.sin(x), x_range=[-PI, PI], color=YELLOW)
        light_wave.move_to(3*LEFT)
        self.play(ShowCreation(light_wave))
        self.wait(1)

        # Create a polarizing filter
        filter_rect = Rectangle(height=2, width=0.2, fill_opacity=1, color=GREY)
        filter_rect.next_to(light_wave, RIGHT, buff=1)
        self.play(ShowCreation(filter_rect))
        self.wait(1)

        # Animate light wave passing through the filter
        passed_wave = FunctionGraph(lambda x: np.sin(x), x_range=[-PI, PI], color=YELLOW)
        passed_wave.next_to(filter_rect, RIGHT, buff=1)
        self.play(Transform(light_wave, passed_wave))
        self.wait(1)

        # Rotate filter to block the wave
        self.play(Rotate(filter_rect, angle=PI/2))
        blocked_wave = FunctionGraph(lambda x: 0*x, x_range=[-PI, PI], color=RED)
        blocked_wave.next_to(filter_rect, RIGHT, buff=1)
        self.play(Transform(light_wave, blocked_wave))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Odd and Even Numbers on a Number Line""
animation:  animate a number line with even numbers on one side and odd numbers on the other, visually distinguishing between them.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class OddEvenNumberLine(Scene):
    def construct(self):
        title = Text(""Odd and Even Numbers on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[-10, 10, 2], length=10, color=BLUE, include_numbers=True)
        self.play(Create(number_line))
        self.wait(1)

        even_numbers = VGroup()
        odd_numbers = VGroup()

        for x in range(-10, 11, 2):
            if x % 2 == 0:
                even_dot = Dot(number_line.n2p(x), color=GREEN)
                even_numbers.add(even_dot)
            else:
                odd_dot = Dot(number_line.n2p(x), color=RED)
                odd_numbers.add(odd_dot)

        self.play(FadeIn(even_numbers), FadeIn(odd_numbers))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Counting by Tens""
animation:  show a number line with multiples of ten highlighted, and animate a point jumping from one multiple to the next, demonstrating counting by tens.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CountingByTens(Scene):
    def construct(self):
        title = Text(""Counting by Tens"").scale(1.5)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        number_line = NumberLine(
            x_range=[0, 100, 10],
            length=10,
            color=BLUE,
            include_numbers=True,
            label_direction=DOWN,
        )

        self.play(Create(number_line))
        self.wait(1)

        for x in range(0, 101, 10):
            dot = Dot(point=number_line.number_to_point(x), color=YELLOW)
            self.play(MoveAlongPath(dot, Line(start=dot.get_center(), end=number_line.number_to_point(x))), run_time=0.5)
            self.wait(0.5)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Triangle Types""
    animation:  animate and display an equilateral triangle, an isosceles triangle, and a scalene triangle, highlighting their differences in side lengths and angles.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class TriangleTypes(Scene):
    def construct(self):
        title = Text(""Exploring Triangle Types"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Equilateral Triangle
        equilateral_triangle = Polygon([0, 0, 0], [2, 0, 0], [1, np.sqrt(3), 0])
        equilateral_label = Text(""Equilateral"", font_size=24).next_to(equilateral_triangle, DOWN)
        self.play(Create(equilateral_triangle))
        self.play(Write(equilateral_label))
        self.wait(2)
        self.play(FadeOut(equilateral_triangle), FadeOut(equilateral_label))

        # Isosceles Triangle
        isosceles_triangle = Polygon([0, 0, 0], [2, 0, 0], [1, 1.5, 0])
        isosceles_label = Text(""Isosceles"", font_size=24).next_to(isosceles_triangle, DOWN)
        self.play(Create(isosceles_triangle))
        self.play(Write(isosceles_label))
        self.wait(2)
        self.play(FadeOut(isosceles_triangle), FadeOut(isosceles_label))

        # Scalene Triangle
        scalene_triangle = Polygon([0, 0, 0], [2.5, 0, 0], [2, 1.5, 0])
        scalene_label = Text(""Scalene"", font_size=24).next_to(scalene_triangle, DOWN)
        self.play(Create(scalene_triangle))
        self.play(Write(scalene_label))
        self.wait(2)
        self.play(FadeOut(scalene_triangle), FadeOut(scalene_label))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Complementary Colors and Neutral Tones""
    animation:  show a color wheel with complementary colors positioned opposite each other. Next, animate the mixing of these complementary colors to create neutral tones, demonstrating how they cancel each other out.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ComplementaryColors(Scene):
    def construct(self):
        title = Text(""Complementary Colors and Neutral Tones"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create color wheel
        colors = [RED, YELLOW, BLUE, ORANGE, GREEN, PURPLE]
        wheel = VGroup(*[AnnularSector(inner_radius=0.5, outer_radius=1, angle=PI/3, start_angle=PI/3 * i, color=color) for i, color in enumerate(colors)])
        self.play(Create(wheel))
        self.wait(2)

        # Highlight complementary colors
        comp_pairs = [(RED, GREEN), (YELLOW, PURPLE), (BLUE, ORANGE)]
        for color1, color2 in comp_pairs:
            self.play(wheel.animate.set_color_by_gradient(color1, color2))
            self.wait(1)

        # Mix to neutral tones
        neutral_wheel = wheel.copy()
        neutral_color = GREY
        for sector in neutral_wheel:
            sector.set_color(neutral_color)

        self.play(Transform(wheel, neutral_wheel))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""The Power of the Lever""
animation:  animate a lever with a fulcrum, effort, and load, demonstrating how applying a small force at one end can lift a heavy load at the other end, showcasing the mechanical advantage of the lever.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LeverAnimation(Scene):
    def construct(self):
        # Title
        title = Text(""The Power of the Lever"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Lever setup
        lever = Line(LEFT * 5, RIGHT * 5, color=WHITE)
        fulcrum = Triangle().scale(0.5).rotate(PI).move_to(DOWN * 0.25)
        load = Square().scale(0.5).set_fill(BLUE, opacity=0.8).move_to(lever.get_start() + DOWN * 0.5)
        effort_point = Circle(radius=0.2, color=YELLOW).move_to(lever.get_end() + DOWN * 0.2)

        self.play(Create(lever), GrowFromPoint(fulcrum, point=lever.get_center()), FadeIn(load), FadeIn(effort_point))
        self.wait(1)

        # Demonstrate lever principle
        for _ in range(2):
            self.play(lever.animate.rotate(PI/6, about_point=fulcrum.get_center()), rate_func=there_and_back, run_time=2)
            self.play(load.animate.shift(UP * 0.5), effort_point.animate.shift(DOWN * 0.5))
            self.play(load.animate.shift(DOWN * 0.5), effort_point.animate.shift(UP * 0.5))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""States of Matter Visualization""
    animation:  animate molecules in solid, liquid, and gas states, showing their different movement patterns and densities. The solid state should show molecules in a fixed position, the liquid state should show molecules moving around but staying close together, and the gas state should show molecules moving freely and far apart from each other.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class StatesOfMatter(Scene):
    def construct(self):
        title = Text(""States of Matter Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Solid state
        solid_molecules = VGroup(*[Dot(radius=0.05, color=BLUE) for _ in range(25)])
        solid_molecules.arrange_in_grid(rows=5, cols=5, buff=0.2)
        self.play(ShowCreation(solid_molecules))
        self.wait(2)

        # Transition to liquid state
        self.play(solid_molecules.animate.arrange_in_grid(rows=5, cols=5, buff=0.5), run_time=2)
        for molecule in solid_molecules:
            self.play(molecule.animate.shift(UP*0.1 + RIGHT*0.1), run_time=0.5, rate_func=there_and_back)
            self.play(molecule.animate.shift(DOWN*0.1 + LEFT*0.1), run_time=0.5, rate_func=there_and_back)
        self.wait(2)

        # Transition to gas state
        self.play(FadeOut(solid_molecules))
        gas_molecules = VGroup(*[Dot(radius=0.05, color=RED) for _ in range(15)])
        self.play(ShowCreation(gas_molecules))
        for molecule in gas_molecules:
            self.play(molecule.animate.shift(UP*3 + RIGHT*3), run_time=3, rate_func=linear)
            self.play(molecule.animate.shift(DOWN*3 + LEFT*3), run_time=3, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Fractions on a Number Line""
animation:  animate a number line divided into equal parts, highlighting fractions such as 1/2, 1/3, and 1/4 to visually represent their positions on the number line.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FractionsOnNumberLine(Scene):
    def construct(self):
        title = Text(""Fractions on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[0, 1, 0.25], length=10, include_numbers=True, label_direction=DOWN)
        self.play(Create(number_line))
        self.wait(1)

        fractions = [1/2, 1/3, 1/4]
        colors = [RED, GREEN, BLUE]

        for fraction, color in zip(fractions, colors):
            dot = Dot(color=color).move_to(number_line.number_to_point(fraction))
            self.play(GrowFromCenter(dot))
            self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Polygons""
animation:  animate different polygons such as triangles, quadrilaterals, pentagons, etc., highlighting their number of sides and angles.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ExploringPolygons(Scene):
    def construct(self):
        title = Text(""Exploring Polygons"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        polygons = [
            (Triangle(), ""Triangle"", 3),
            (Square(), ""Quadrilateral"", 4),
            (RegularPolygon(5), ""Pentagon"", 5),
            (RegularPolygon(6), ""Hexagon"", 6),
            (RegularPolygon(7), ""Heptagon"", 7),
            (RegularPolygon(8), ""Octagon"", 8),
        ]

        for poly, name, sides in polygons:
            poly_text = Text(name, font_size=24).next_to(poly, UP)
            sides_text = Text(f""Sides: {sides}"", font_size=24).next_to(poly, DOWN)
            self.play(Create(poly), Write(poly_text), Write(sides_text))
            self.wait(2)
            self.play(FadeOut(poly), FadeOut(poly_text), FadeOut(sides_text))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Symmetry in Shapes""
animation:  animate shapes with reflectional and rotational symmetry. Show the reflection lines for shapes with reflectional symmetry and the rotation points for shapes with rotational symmetry.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SymmetryInShapes(Scene):
    def construct(self):
        title = Text(""Symmetry in Shapes"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Reflectional Symmetry
        square = Square(side_length=2).shift(LEFT*3)
        line_of_symmetry = DashedLine(start=square.get_top(), end=square.get_bottom()).shift(LEFT*3)
        self.play(Create(square), Create(line_of_symmetry))
        self.wait(1)

        # Rotational Symmetry
        circle = Circle(radius=1).shift(RIGHT*3)
        dot = Dot(point=circle.get_center()).shift(RIGHT*3)
        self.play(Create(circle), FadeIn(dot))
        self.wait(1)

        # Animate rotation to show rotational symmetry
        self.play(Rotate(circle, angle=PI/2, about_point=circle.get_center()), Rotate(dot, angle=PI/2, about_point=dot.get_center()))
        self.wait(1)

        self.play(FadeOut(square), FadeOut(line_of_symmetry), FadeOut(circle), FadeOut(dot))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Parallel and Perpendicular Lines""
animation:  animate two sets of parallel lines and two sets of perpendicular lines, emphasizing their constant distance or 90-degree angle respectively.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ParallelPerpendicular(Scene):
    def construct(self):
        title = Text(""Exploring Parallel and Perpendicular Lines"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parallel lines
        parallel_lines_1 = VGroup(*[Line(UP*3 + LEFT*4 + RIGHT*x, DOWN*3 + LEFT*4 + RIGHT*x) for x in range(0, 3)])
        parallel_lines_2 = VGroup(*[Line(UP*3 + RIGHT*4 + LEFT*x, DOWN*3 + RIGHT*4 + LEFT*x) for x in range(0, 3)])
        self.play(ShowCreation(parallel_lines_1), ShowCreation(parallel_lines_2))
        self.wait(2)
        self.play(FadeOut(parallel_lines_1), FadeOut(parallel_lines_2))

        # Perpendicular lines
        perpendicular_lines_1 = VGroup(Line(UP*3, DOWN*3), Line(LEFT*3, RIGHT*3))
        perpendicular_lines_2 = VGroup(Line(UP*2 + LEFT*2, DOWN*2 + LEFT*2), Line(UP*2 + LEFT*2, UP*2 + RIGHT*2))
        self.play(ShowCreation(perpendicular_lines_1), ShowCreation(perpendicular_lines_2))
        self.wait(2)
        self.play(FadeOut(perpendicular_lines_1), FadeOut(perpendicular_lines_2))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Varieties of Leaves""
animation:  animate simple, compound, and needle-like leaves, highlighting their differences in shape and structure.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LeavesAnimation(Scene):
    def construct(self):
        title = Text(""Varieties of Leaves"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Simple Leaf
        simple_leaf = Ellipse(width=2.0, height=1.0, color=GREEN).shift(LEFT*4)
        simple_leaf_label = Text(""Simple Leaf"", font_size=24).next_to(simple_leaf, DOWN)
        self.play(Create(simple_leaf), Write(simple_leaf_label))
        self.wait(1)

        # Compound Leaf
        compound_leaf = VGroup(
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(LEFT*0.5 + UP*0.75),
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(RIGHT*0.5 + UP*0.75),
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(LEFT*0.5 + DOWN*0.75),
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(RIGHT*0.5 + DOWN*0.75),
            Line(ORIGIN, UP*0.75, color=WHITE),
        ).shift(RIGHT*0)
        compound_leaf_label = Text(""Compound Leaf"", font_size=24).next_to(compound_leaf, DOWN)
        self.play(Create(compound_leaf), Write(compound_leaf_label))
        self.wait(1)

        # Needle-like Leaf
        needle_leaf = Line(UP*0.5, DOWN*0.5, color=GREEN).shift(RIGHT*4)
        needle_leaf_label = Text(""Needle-like Leaf"", font_size=24).next_to(needle_leaf, DOWN)
        self.play(Create(needle_leaf), Write(needle_leaf_label))
        self.wait(2)

        # Grouping all leaves
        all_leaves = VGroup(simple_leaf, simple_leaf_label, compound_leaf, compound_leaf_label, needle_leaf, needle_leaf_label)
        self.play(all_leaves.animate.scale(0.6).arrange(RIGHT, buff=1).to_edge(DOWN))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Law of Reflection""
animation:  animate a light ray hitting a flat surface and reflecting off it, with the angle of incidence equal to the angle of reflection, demonstrating the law of reflection.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LawOfReflection(Scene):
    def construct(self):
        title = Text(""Law of Reflection"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create surface
        surface = Line(LEFT * 5, RIGHT * 5)
        self.play(Create(surface))

        # Create incident ray
        incident_ray = Arrow(start=LEFT * 3 + UP * 2, end=ORIGIN, buff=0, color=YELLOW)
        self.play(GrowArrow(incident_ray))

        # Create reflected ray
        reflected_ray = Arrow(start=ORIGIN, end=RIGHT * 3 + UP * 2, buff=0, color=YELLOW)
        self.play(GrowArrow(reflected_ray))

        # Angles
        angle_of_incidence = Angle(incident_ray, surface, radius=0.5, other_angle=True, color=WHITE)
        angle_of_reflection = Angle(surface, reflected_ray, radius=0.5, color=WHITE)
        self.play(Create(angle_of_incidence), Create(angle_of_reflection))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Mixtures and Solutions""
animation:  animate a mixture of different substances being poured into a container, followed by the substances dissolving into a solution, demonstrating the process of dissolution.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MixturesAndSolutions(Scene):
    def construct(self):
        # Title
        title = Text(""Mixtures and Solutions"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Container
        container = Rectangle(height=4, width=3, color=WHITE)
        self.play(Create(container))
        self.wait(1)

        # Substances
        substance1 = Circle(radius=0.2, color=BLUE).move_to(3*UP + 2*LEFT)
        substance2 = Circle(radius=0.2, color=RED).move_to(3*UP + 2*RIGHT)
        self.play(FadeIn(substance1), FadeIn(substance2))
        self.wait(1)

        # Pouring substances
        self.play(substance1.animate.move_to(container.get_top() + 0.5*DOWN), 
                  substance2.animate.move_to(container.get_top() + 0.5*DOWN))
        self.wait(1)

        # Dissolving substances
        dissolved_substance1 = substance1.copy().set_opacity(0.2)
        dissolved_substance2 = substance2.copy().set_opacity(0.2)
        self.play(Transform(substance1, dissolved_substance1), 
                  Transform(substance2, dissolved_substance2),
                  substance1.animate.scale(5),
                  substance2.animate.scale(5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Magnetic Poles Interaction""
    animation:  animate a bar magnet with clearly labeled north and south poles. Show the attraction between the north and south poles of two magnets, and the repulsion between like poles.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MagneticPolesInteraction(Scene):
    def construct(self):
        title = Text(""Magnetic Poles Interaction"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Magnet 1
        magnet1 = Rectangle(color=BLUE, height=1, width=2)
        north1 = Text(""N"", color=WHITE).move_to(magnet1.get_left() + RIGHT * 0.3)
        south1 = Text(""S"", color=WHITE).move_to(magnet1.get_right() + LEFT * 0.3)
        magnet1_group = VGroup(magnet1, north1, south1).shift(LEFT*3)

        # Magnet 2
        magnet2 = Rectangle(color=RED, height=1, width=2)
        north2 = Text(""N"", color=WHITE).move_to(magnet2.get_left() + RIGHT * 0.3)
        south2 = Text(""S"", color=WHITE).move_to(magnet2.get_right() + LEFT * 0.3)
        magnet2_group = VGroup(magnet2, north2, south2).shift(RIGHT*3)

        self.play(FadeIn(magnet1_group), FadeIn(magnet2_group))
        self.wait(1)

        # Attraction
        self.play(magnet1_group.animate.shift(RIGHT*2), magnet2_group.animate.shift(LEFT*2))
        self.wait(1)

        # Repulsion setup
        magnet2_group.generate_target()
        magnet2_group.target.rotate(PI).move_to(RIGHT*3)

        self.play(MoveToTarget(magnet2_group))
        self.wait(1)

        # Repulsion
        self.play(magnet1_group.animate.shift(RIGHT*0.5), magnet2_group.animate.shift(LEFT*0.5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Rectangles: Area and Perimeter""
    animation:  animate rectangles with different dimensions, calculating and displaying their area (length x width) and perimeter (2 x length + 2 x width) in a visually engaging way.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RectangleAnimation(Scene):
    def construct(self):
        title = Text(""Exploring Rectangles: Area and Perimeter"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        rectangles = [
            (4, 2),
            (3, 3),
            (6, 1),
        ]

        for length, width in rectangles:
            rectangle = Rectangle(width=width, height=length)
            area_text = Text(f""Area: {length * width}"", font_size=24).next_to(rectangle, DOWN)
            perimeter_text = Text(f""Perimeter: {2 * (length + width)}"", font_size=24).next_to(area_text, DOWN)

            self.play(Create(rectangle))
            self.play(Write(area_text), Write(perimeter_text))
            self.wait(2)
            self.play(FadeOut(rectangle), FadeOut(area_text), FadeOut(perimeter_text))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Water Displacement Demonstration""
animation:  animate an object being submerged in water, with the water level rising by an amount equal to the volume of the object, illustrating the principle of water displacement.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaterDisplacement(Scene):
    def construct(self):
        title = Text(""Water Displacement Demonstration"").scale(0.5)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        # Container
        container = Rectangle(height=6, width=4).set_fill(BLUE, opacity=0.5).set_stroke(width=2)
        self.play(Create(container))

        # Water
        water = Rectangle(height=2, width=3.8).set_fill(BLUE, opacity=0.7).set_stroke(width=0)
        water.shift(DOWN * 1)
        self.play(Create(water))

        # Object
        object = Circle(radius=0.5).set_fill(GRAY, opacity=1).set_stroke(width=2)
        object.move_to(UP * 3)
        self.play(Create(object))

        # Animate object submersion
        self.play(object.animate.shift(DOWN * 4))

        # Animate water displacement
        displaced_water = water.copy().stretch_to_fit_height(water.height + 0.5)
        self.play(Transform(water, displaced_water))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Multiplication as Repeated Addition""
animation:  animate groups of objects being added together repeatedly, transitioning to multiplication by showing the equation 3 + 3 + 3 = 3 × 3.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplicationScene(Scene):
    def construct(self):
        title = Text(""Multiplication as Repeated Addition"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create groups of objects (circles in this case)
        group1 = VGroup(*[Circle(radius=0.2, color=BLUE) for _ in range(3)])
        group1.arrange(RIGHT, buff=0.5)
        group2 = group1.copy().next_to(group1, DOWN, buff=1)
        group3 = group1.copy().next_to(group2, DOWN, buff=1)

        # Animate groups appearing one after the other
        self.play(ShowCreation(group1))
        self.wait(0.5)
        self.play(ShowCreation(group2))
        self.wait(0.5)
        self.play(ShowCreation(group3))
        self.wait(1)

        # Transition to multiplication
        equals_text = Text(""="").next_to(group3, RIGHT, buff=1)
        multiplication_text = Text(""3 × 3"").next_to(equals_text, RIGHT, buff=0.5)
        plus_signs = VGroup(
            *[Text(""+"").next_to(group1, RIGHT, buff=0.2).shift(0.5*DOWN),
              Text(""+"").next_to(group2, RIGHT, buff=0.2).shift(0.5*DOWN)]
        )

        self.play(Write(plus_signs))
        self.wait(0.5)
        self.play(Write(equals_text), Write(multiplication_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Divisibility Rules Explained""
animation:  animate the process of checking if a number is divisible by 2, 3, 5, or 10 based on its last digit or sum of digits, illustrating the different rules visually.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DivisibilityRules(Scene):
    def construct(self):
        # Title
        title = Text(""Divisibility Rules Explained"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Divisible by 2
        divisible_by_2 = Text(""Divisible by 2: Last digit is even"", font_size=24)
        self.play(Write(divisible_by_2))
        self.wait(2)
        self.play(FadeOut(divisible_by_2))

        # Divisible by 3
        divisible_by_3 = Text(""Divisible by 3: Sum of digits is divisible by 3"", font_size=24)
        self.play(Write(divisible_by_3))
        self.wait(2)
        self.play(FadeOut(divisible_by_3))

        # Divisible by 5
        divisible_by_5 = Text(""Divisible by 5: Last digit is 0 or 5"", font_size=24)
        self.play(Write(divisible_by_5))
        self.wait(2)
        self.play(FadeOut(divisible_by_5))

        # Divisible by 10
        divisible_by_10 = Text(""Divisible by 10: Last digit is 0"", font_size=24)
        self.play(Write(divisible_by_10))
        self.wait(2)
        self.play(FadeOut(divisible_by_10))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Scaling on a Coordinate Plane""
    animation:  show a shape on a coordinate plane, and animate it being scaled by a factor of 2 or 3, visually demonstrating the concept of scaling in a geometric context.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ScalingAnimation(Scene):
    def construct(self):
        title = Text(""Scaling on a Coordinate Plane"")
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        axes = Axes(
            x_range=[-5, 5],
            y_range=[-5, 5],
            axis_config={""color"": BLUE},
        )
        self.play(Create(axes))

        square = Square(color=RED).move_to(axes.c2p(0, 0))
        self.play(Create(square))
        self.wait(1)

        scaled_square = square.copy().scale(2)
        self.play(Transform(square, scaled_square))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Complementary and Supplementary Angles""
animation:  animate two angles adding up to 90° (complementary) and 180° (supplementary), showcasing their relationship and how they form a straight line or a right angle.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ComplementaryAndSupplementary(Scene):
    def construct(self):
        title = Text(""Complementary and Supplementary Angles"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Complementary angles
        line1 = Line(ORIGIN, 2*RIGHT)
        line2 = Line(ORIGIN, 2*UP).rotate_about_origin(PI/4)
        angle1 = Angle(line1, line2, radius=0.5, color=YELLOW)
        self.play(Create(line1), Create(line2), GrowFromCenter(angle1))
        self.wait(1)

        comp_text = Text(""Complementary"", font_size=24).next_to(angle1, UP)
        self.play(Write(comp_text))
        self.wait(2)
        self.play(FadeOut(line1), FadeOut(line2), FadeOut(angle1), FadeOut(comp_text))

        # Supplementary angles
        line3 = Line(ORIGIN, 2*RIGHT)
        line4 = Line(ORIGIN, 2*LEFT)
        angle2 = Angle(line3, line4, radius=0.5, other_angle=True, color=GREEN)
        self.play(Create(line3), Create(line4), GrowFromCenter(angle2))
        self.wait(1)

        supp_text = Text(""Supplementary"", font_size=24).next_to(angle2, UP, buff=0.5)
        self.play(Write(supp_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Circle Diameter and Radius Relationship""
animation:  animate a circle with its diameter and radius labeled, showing the relationship between them (diameter = 2 × radius).
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CircleDiameterRadius(Scene):
    def construct(self):
        title = Text(""Circle Diameter and Radius Relationship"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        circle = Circle(radius=2)
        diameter = Line(start=circle.get_left(), end=circle.get_right(), color=BLUE)
        radius = Line(start=circle.get_center(), end=circle.get_right(), color=RED)

        diameter_label = Tex(""Diameter = 2 $\\times$ Radius"").next_to(circle, DOWN)
        radius_label = Tex(""Radius"", color=RED).next_to(radius, DOWN)

        self.play(Create(circle))
        self.play(ShowCreation(diameter), ShowCreation(radius))
        self.play(Write(diameter_label), Write(radius_label))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Fraction of a Whole Number""
    animation:  animate dividing a whole number into equal parts to find a fraction of it, such as showing 1/4 of 20 by dividing 20 into 4 equal parts.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FractionOfWhole(Scene):
    def construct(self):
        title = Text(""Fraction of a Whole Number"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        whole_number = 20
        fraction = 1/4
        parts = int(1/fraction)

        number_line = NumberLine(x_range=[0, whole_number+1, 1], length=10, include_numbers=True, numbers_to_exclude=[whole_number+1])
        self.play(Create(number_line))
        self.wait(1)

        divisions = [number_line.number_to_point(i) for i in range(0, whole_number+1, whole_number//parts)]
        rects = [
            Rectangle(width=number_line.number_to_point(1)[0] - number_line.number_to_point(0)[0], height=0.5)
            .move_to(number_line.number_to_point(i) + UP * 0.25)
            for i in range(0, whole_number, whole_number//parts)
        ]

        for rect in rects:
            self.play(Create(rect), run_time=0.5)
        self.wait(1)

        highlight_rect = Rectangle(
            width=(number_line.number_to_point(whole_number//parts)[0] - number_line.number_to_point(0)[0]) * fraction,
            height=0.75, color=YELLOW
        ).move_to(number_line.number_to_point((whole_number//parts) * fraction / 2) + UP * 0.25)

        self.play(Create(highlight_rect))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Area of Rectangles""
    animation:  animate displaying rectangles with varying lengths and widths. Show the calculation of their areas using the formula A = L × W for each rectangle.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RectangleArea(Scene):
    def construct(self):
        title = Text(""Calculating Area of Rectangles"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        rectangles = [
            (4, 2),
            (3, 3),
            (5, 1)
        ]

        for length, width in rectangles:
            rectangle = Rectangle(width=width, height=length, color=BLUE)
            area_text = Text(f""A = {length} × {width} = {length * width}"", font_size=24)
            area_calculation = VGroup(rectangle, area_text).arrange(DOWN)

            self.play(Create(rectangle))
            self.wait(1)
            self.play(Write(area_text))
            self.wait(2)
            self.play(FadeOut(area_calculation))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""The Inclined Plane in Action""
animation:  animate an object being pushed up an inclined plane, demonstrating how the incline reduces the force required to move the object uphill.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class InclinedPlane(Scene):
    def construct(self):
        title = Text(""The Inclined Plane in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create inclined plane
        plane = Polygon([0, 0, 0], [3, 0, 0], [3, 1.5, 0], [0, 0, 0], color=WHITE)
        self.play(Create(plane))
        
        # Create object
        obj = Dot([2.5, 0.75, 0], color=RED)
        self.play(FadeIn(obj))
        
        # Animate object moving up the plane
        self.play(obj.animate.shift([-2, 1, 0]), run_time=2, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Converting Fractions to Decimals""
animation:  animate showing a fraction on the screen and demonstrate the process of converting it to a decimal by dividing the numerator by the denominator.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ConvertFractionsToDecimals(Scene):
    def construct(self):
        title = Text(""Converting Fractions to Decimals"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        fraction = MathTex(r""\frac{3}{4}"")
        self.play(Write(fraction))
        self.wait(1)

        equals = MathTex(""="")
        equals.next_to(fraction, RIGHT)
        self.play(Write(equals))

        decimal = DecimalNumber(3/4, num_decimal_places=2)
        decimal.next_to(equals, RIGHT)
        self.play(TransformFromCopy(fraction, decimal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Reflection and Rotation of Shapes""
animation:  display a shape and animate its reflection across a line followed by its rotation around a point, showcasing the transformation of the shape.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ReflectionAndRotation(Scene):
    def construct(self):
        title = Text(""Reflection and Rotation of Shapes"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a shape
        square = Square(color=BLUE, fill_opacity=0.5)
        self.play(Create(square))
        self.wait(1)

        # Reflection line
        line = DashedLine(start=3*UP, end=3*DOWN, color=WHITE)
        self.play(ShowCreation(line))
        self.wait(1)

        # Reflect the square across the line
        reflected_square = square.copy()
        self.play(reflected_square.animate.apply_function(lambda p: np.array([-p[0], p[1], p[2]])))
        self.wait(1)

        # Rotation around a point
        self.play(Rotate(square, angle=PI/2), Rotate(reflected_square, angle=-PI/2))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Energy Conversion in a Roller Coaster""
    animation:  animate a roller coaster track with a cart moving along it. Show the cart at the top of a hill with high potential energy, then descending down the hill converting potential energy into kinetic energy as it gains speed.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RollerCoaster(Scene):
    def construct(self):
        title = Text(""Energy Conversion in a Roller Coaster"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Roller Coaster Track
        track_start = 3 * UP + 5 * LEFT
        track_end = 3 * UP + 5 * RIGHT
        track = VMobject()
        track.set_points_as_corners([track_start, [0, 3, 0], [0, 0, 0], [3, 0, 0], track_end])
        track.make_smooth()
        self.play(Create(track))

        # Cart
        cart = Dot(track_start, color=RED)
        self.play(FadeIn(cart))

        # Potential Energy at the top
        potential_energy_text = Text(""High Potential Energy"", font_size=24).next_to(cart, UP)
        self.play(Write(potential_energy_text))
        self.wait(1)
        self.play(FadeOut(potential_energy_text))

        # Move the cart along the track
        self.play(MoveAlongPath(cart, track), rate_func=linear, run_time=4)

        # Kinetic Energy at the bottom
        kinetic_energy_text = Text(""High Kinetic Energy"", font_size=24).next_to(cart, DOWN)
        self.play(Write(kinetic_energy_text))
        self.wait(2)
        self.play(FadeOut(kinetic_energy_text), FadeOut(cart), FadeOut(track))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Multiplying Fractions Illustrated""
animation:  animate two fractions side by side. Show the multiplication process by separately animating the multiplication of their numerators and denominators, illustrating how the fractions are multiplied together.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingFractions(Scene):
    def construct(self):
        title = Text(""Multiplying Fractions Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        fraction1 = MathTex(r""\frac{2}{3}"").scale(2)
        fraction2 = MathTex(r""\frac{4}{5}"").scale(2).next_to(fraction1, RIGHT, buff=1)

        self.play(Write(fraction1), Write(fraction2))
        self.wait(1)

        times = MathTex(r""\times"").scale(2).next_to(fraction1, RIGHT, buff=0.2)
        self.play(Write(times))
        self.wait(1)

        equals = MathTex(r""="").scale(2).next_to(fraction2, RIGHT, buff=0.2)
        self.play(Write(equals))
        self.wait(1)

        result_fraction = MathTex(r""\frac{2 \times 4}{3 \times 5}"").scale(2).next_to(equals, RIGHT, buff=0.2)
        self.play(Write(result_fraction))
        self.wait(1)

        simplified_fraction = MathTex(r""\frac{8}{15}"").scale(2).next_to(equals, RIGHT, buff=0.2)
        self.play(ReplacementTransform(result_fraction, simplified_fraction))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Balancing Equations: Isolating Variables""
animation:  display a simple equation (e.g., x + 3 = 7), and animate the process of subtracting 3 from both sides to isolate the variable x, demonstrating the concept of balancing equations.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class BalancingEquations(Scene):
    def construct(self):
        title = Text(""Balancing Equations: Isolating Variables"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        equation = Text(""x + 3 = 7"")
        self.play(Write(equation))
        self.wait(1)

        subtract_text = Text(""-3"", color=RED).next_to(equation, DOWN)
        self.play(Write(subtract_text))
        self.wait(1)

        equation_transformed = Text(""x = 4"")
        self.play(ReplacementTransform(equation, equation_transformed), FadeOut(subtract_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Probability of Coin Flips""
animation:  animate flipping a coin multiple times and visually represent the probability of getting heads or tails. Show a bar graph or pie chart to illustrate the distribution of outcomes.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *
import random

class CoinFlipProbability(Scene):
    def construct(self):
        title = Text(""Probability of Coin Flips"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        outcomes = {""Heads"": 0, ""Tails"": 0}
        coins = VGroup()
        for i in range(5):
            coin = Circle().scale(0.5)
            if random.random() < 0.5:
                outcomes[""Heads""] += 1
                coin.set_fill(WHITE, opacity=1)
                heads_text = Text(""H"", font_size=36).move_to(coin)
                coin.add(heads_text)
            else:
                outcomes[""Tails""] += 1
                coin.set_fill(BLACK, opacity=1)
                tails_text = Text(""T"", color=WHITE, font_size=36).move_to(coin)
                coin.add(tails_text)
            coins.add(coin)
        
        coins.arrange_in_grid(rows=1)
        self.play(AnimationGroup(*[DrawBorderThenFill(coin) for coin in coins], lag_ratio=0.5))
        self.wait(2)

        bars = VGroup()
        for outcome, count in outcomes.items():
            bar = Rectangle(height=count, width=0.5, fill_opacity=1)
            if outcome == ""Heads"":
                bar.set_fill(WHITE)
                bar.set_stroke(WHITE)
            else:
                bar.set_fill(BLACK)
                bar.set_stroke(BLACK)
            bars.add(bar)

        bars.arrange(buff=1).to_edge(DOWN)
        self.play(AnimationGroup(*[GrowFromCenter(bar) for bar in bars], lag_ratio=0.5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Factors and Multiples""
animation:  display a number on the screen and animate finding its factors (numbers that divide into it evenly) and multiples (products of the number and integers) in a visually engaging way.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FactorsAndMultiples(Scene):
    def construct(self):
        title = Text(""Exploring Factors and Multiples"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number = 12
        number_text = Text(str(number), font_size=72)
        self.play(Write(number_text))
        self.wait(1)

        factors = []
        multiples = [number * i for i in range(1, 6)]

        for i in range(1, number + 1):
            if number % i == 0:
                factors.append(i)

        factors_group = VGroup(*[Text(str(factor), font_size=36) for factor in factors])
        multiples_group = VGroup(*[Text(str(multiple), font_size=36) for multiple in multiples])

        factors_group.arrange(DOWN, center=False, aligned_edge=LEFT).to_edge(LEFT, buff=1)
        multiples_group.arrange(DOWN, center=False, aligned_edge=RIGHT).to_edge(RIGHT, buff=1)

        self.play(Transform(number_text, factors_group))
        self.wait(1)
        self.play(Transform(number_text, multiples_group))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Measuring Length in Metric Units""
animation:  animate showing objects of different lengths being measured in millimeters, centimeters, and meters, highlighting the conversion between the units.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MeasureLength(Scene):
    def construct(self):
        title = Text(""Measuring Length in Metric Units"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Millimeters example
        mm_line = Line(ORIGIN, RIGHT * 0.5, color=BLUE)
        mm_text = Text(""50mm"").next_to(mm_line, DOWN)
        self.play(GrowFromCenter(mm_line), Write(mm_text))
        self.wait(2)
        self.play(FadeOut(mm_line), FadeOut(mm_text))

        # Centimeters to millimeters conversion
        cm_line = Line(ORIGIN, RIGHT * 2, color=GREEN)
        cm_text = Text(""2cm = 20mm"").next_to(cm_line, DOWN)
        self.play(GrowFromCenter(cm_line), Write(cm_text))
        self.wait(2)
        self.play(FadeOut(cm_line), FadeOut(cm_text))

        # Meters example
        m_line = Line(ORIGIN, RIGHT * 5, color=RED)
        m_text = Text(""1m = 100cm"").next_to(m_line, DOWN)
        self.play(GrowFromCenter(m_line), Write(m_text))
        self.wait(2)
        self.play(FadeOut(m_line), FadeOut(m_text))

        # Conversion between units
        conversion_text = Text(""1m = 100cm = 1000mm"").scale(0.7)
        self.play(Write(conversion_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Volumes of Cubes""
    animation:  animate displaying cubes with different side lengths, followed by animating the calculation of their volumes using the formula V = s³.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CubeVolume(Scene):
    def construct(self):
        title = Text(""Calculating Volumes of Cubes"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        side_lengths = [1, 2, 3]
        for side_length in side_lengths:
            cube = Cube(side_length=side_length).set_fill(BLUE, opacity=0.5)
            formula = MathTex(f""V = {side_length}^3 = {side_length ** 3}"")
            formula.next_to(cube, DOWN)

            self.play(Create(cube))
            self.play(Write(formula))
            self.wait(2)
            self.play(FadeOut(cube), FadeOut(formula))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Equivalent Ratios""
    animation:  show two sets of numbers representing equivalent ratios (e.g., 2:3 and 4:6) and animate their proportional relationship by visually demonstrating how they are equal in value.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class EquivalentRatios(Scene):
    def construct(self):
        title = Text(""Exploring Equivalent Ratios"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        ratio1 = Text(""2:3"", color=BLUE).shift(UP*2)
        ratio2 = Text(""4:6"", color=YELLOW).next_to(ratio1, DOWN, buff=1.5)

        self.play(Write(ratio1), Write(ratio2))
        self.wait(1)

        # Visual demonstration of equivalence
        rect1 = Rectangle(height=2, width=3, color=BLUE).next_to(ratio1, DOWN, buff=0.5)
        rect2 = Rectangle(height=4, width=6, color=YELLOW).next_to(ratio2, DOWN, buff=0.5).scale(0.5)

        self.play(DrawBorderThenFill(rect1), DrawBorderThenFill(rect2))
        self.wait(1)

        equivalence = Text(""These ratios are equivalent!"", color=GREEN).scale(0.7).next_to(rect2, DOWN, buff=0.5)
        self.play(Write(equivalence))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Newton's First Law in Action""
    animation:  animate a stationary object remaining at rest, and a moving object continuing its motion at a constant velocity in a straight line, unless acted upon by an external force.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NewtonsFirstLaw(Scene):
    def construct(self):
        title = Text(""Newton's First Law in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Stationary object
        stationary_square = Square(color=BLUE, fill_opacity=1).shift(LEFT*3)
        self.play(FadeIn(stationary_square))
        self.wait(2)

        # Moving object
        moving_circle = Circle(color=RED, fill_opacity=1).shift(RIGHT*3)
        self.play(FadeIn(moving_circle))
        self.play(moving_circle.animate.shift(LEFT*6), run_time=2, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Subtracting Integers on a Number Line""
animation:  animate a number line with integers marked on it. Show the process of subtracting positive and negative integers by moving left or right along the number line.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SubtractingIntegers(Scene):
    def construct(self):
        # Title
        title = Text(""Subtracting Integers on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Number line
        number_line = NumberLine(
            x_range=[-10, 10, 1],
            length=10,
            color=WHITE,
            include_numbers=True,
            label_direction=DOWN,
        )
        self.play(Create(number_line))
        self.wait(1)

        # Example of subtracting positive integer (e.g., 3 - 2)
        start_point = number_line.number_to_point(3)
        end_point = number_line.number_to_point(1)
        pointer = Triangle().move_to(start_point).set_color(RED)
        self.play(FadeIn(pointer))
        self.wait(1)
        self.play(pointer.animate.move_to(end_point))
        self.wait(2)

        # Clearing for next example
        self.play(FadeOut(pointer))
        
        # Example of subtracting negative integer (e.g., -2 - (-3))
        start_point = number_line.number_to_point(-2)
        end_point = number_line.number_to_point(1)
        pointer = Triangle().move_to(start_point).set_color(BLUE)
        self.play(FadeIn(pointer))
        self.wait(1)
        self.play(pointer.animate.move_to(end_point))
        self.wait(2)

        # End
        self.play(FadeOut(pointer), FadeOut(number_line))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Quadrilaterals""
animation:  animate examples of parallelograms, rhombuses, rectangles, squares, and trapezoids, highlighting their properties such as angles, sides, and symmetry.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class Quadrilaterals(Scene):
    def construct(self):
        title = Text(""Exploring Quadrilaterals"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parallelogram
        parallelogram = Polygon([-1, 1, 0], [1, 1, 0], [2, -1, 0], [0, -1, 0], color=BLUE)
        self.play(Create(parallelogram))
        self.wait(1)
        self.play(FadeOut(parallelogram))

        # Rhombus
        rhombus = Polygon([-1, 1, 0], [1, 1, 0], [2, -1, 0], [0, -1, 0], color=GREEN)
        rhombus.scale(0.5).rotate(PI/4)
        self.play(Create(rhombus))
        self.wait(1)
        self.play(FadeOut(rhombus))

        # Rectangle
        rectangle = Rectangle(height=2, width=3, color=ORANGE)
        self.play(Create(rectangle))
        self.wait(1)
        self.play(FadeOut(rectangle))

        # Square
        square = Square(side_length=2, color=RED)
        self.play(Create(square))
        self.wait(1)
        self.play(FadeOut(square))

        # Trapezoid
        trapezoid = Polygon([-2, -1, 0], [2, -1, 0], [1, 1, 0], [-1, 1, 0], color=PURPLE)
        self.play(Create(trapezoid))
        self.wait(1)
        self.play(FadeOut(trapezoid))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Comparing Fractions with Cross Multiplication""
    animation:  animate two fractions displayed side by side, each with different numerators and denominators. Show the process of cross multiplication to compare their values and determine which fraction is greater.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CompareFractions(Scene):
    def construct(self):
        title = Text(""Comparing Fractions with Cross Multiplication"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        fraction1 = MathTex(r""\frac{3}{4}"").shift(LEFT*2)
        fraction2 = MathTex(r""\frac{5}{6}"").shift(RIGHT*2)
        self.play(Write(fraction1), Write(fraction2))
        self.wait(1)

        cross1 = MathTex(r""3 \times 6"").next_to(fraction1, DOWN)
        cross2 = MathTex(r""5 \times 4"").next_to(fraction2, DOWN)
        self.play(Write(cross1), Write(cross2))
        self.wait(1)

        result1 = MathTex(r""18"").next_to(cross1, DOWN)
        result2 = MathTex(r""20"").next_to(cross2, DOWN)
        self.play(Transform(cross1, result1), Transform(cross2, result2))
        self.wait(1)

        greater_than = MathTex(r""18 < 20"").move_to(DOWN*2)
        self.play(Write(greater_than))
        self.wait(2)

        self.play(FadeOut(fraction1), FadeOut(fraction2), FadeOut(cross1), FadeOut(cross2), FadeOut(greater_than))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Reciprocals Exploration""
animation:  animate displaying a fraction on the screen. Show the process of finding its reciprocal by flipping the numerator and denominator, visually demonstrating the concept of reciprocals.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ReciprocalsExploration(Scene):
    def construct(self):
        title = Text(""Reciprocals Exploration"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        fraction = MathTex(r""\frac{2}{3}"").scale(2)
        reciprocal = MathTex(r""\frac{3}{2}"").scale(2)
        arrow = Arrow(UP, DOWN).next_to(fraction, DOWN)

        self.play(Write(fraction))
        self.wait(1)
        self.play(GrowArrow(arrow))
        self.play(ReplacementTransform(fraction, reciprocal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Perimeter of Polygons""
    animation:  animate different polygons with labeled side lengths. Show the process of calculating the perimeter of each polygon by adding all the side lengths together.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PerimeterOfPolygons(Scene):
    def construct(self):
        title = Text(""Calculating Perimeter of Polygons"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Triangle
        triangle = Polygon([-1, 1, 0], [1, 1, 0], [0, -1, 0], color=WHITE)
        triangle_sides = VGroup(
            Tex(""5"").next_to(triangle, UP),
            Tex(""4"").next_to(triangle, RIGHT),
            Tex(""3"").next_to(triangle, LEFT)
        )
        triangle_perimeter = Tex(""Perimeter = 5 + 4 + 3 = 12"").next_to(triangle, DOWN)
        self.play(Create(triangle), Write(triangle_sides))
        self.wait(1)
        self.play(Write(triangle_perimeter))
        self.wait(2)
        self.play(FadeOut(triangle), FadeOut(triangle_sides), FadeOut(triangle_perimeter))

        # Square
        square = Square(side_length=2).shift(DOWN)
        square_sides = VGroup(
            Tex(""4"").next_to(square, UP),
            Tex(""4"").next_to(square, RIGHT),
            Tex(""4"").next_to(square, DOWN),
            Tex(""4"").next_to(square, LEFT)
        )
        square_perimeter = Tex(""Perimeter = 4 + 4 + 4 + 4 = 16"").next_to(square, DOWN)
        self.play(Create(square), Write(square_sides))
        self.wait(1)
        self.play(Write(square_perimeter))
        self.wait(2)
        self.play(FadeOut(square), FadeOut(square_sides), FadeOut(square_perimeter))

        # Pentagon
        pentagon = RegularPolygon(n=5, color=WHITE).scale(1.2).shift(DOWN)
        pentagon_sides = VGroup(
            *[Tex(""3"").next_to(pentagon, direction) for direction in [UP, UR, DR, DL, LEFT]]
        )
        pentagon_perimeter = Tex(""Perimeter = 3 + 3 + 3 + 3 + 3 = 15"").next_to(pentagon, DOWN)
        self.play(Create(pentagon), Write(pentagon_sides))
        self.wait(1)
        self.play(Write(pentagon_perimeter))
        self.wait(2)
        self.play(FadeOut(pentagon), FadeOut(pentagon_sides), FadeOut(pentagon_perimeter))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Measuring Angles in Radians""
    animation:  animate displaying an angle in a circle and measuring it in radians by showing the ratio of arc length to radius.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MeasureRadians(Scene):
    def construct(self):
        title = Text(""Measuring Angles in Radians"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        circle = Circle(radius=2)
        angle = ValueTracker(0)
        arc = always_redraw(lambda: Arc(radius=2, angle=angle.get_value()))
        line1 = Line(start=[0,0,0], end=[2,0,0])
        line2 = always_redraw(lambda: Line(start=[0,0,0], end=[2*np.cos(angle.get_value()), 2*np.sin(angle.get_value()), 0]))
        radius_text = Text(""Radius"", font_size=24).next_to(line1, DOWN)
        arc_length_text = always_redraw(lambda: Text(f""Arc length\n{np.round(arc.get_arc_length(),2)}"", font_size=24).next_to(arc, RIGHT, buff=0.1))
        angle_measure = always_redraw(lambda: DecimalNumber(angle.get_value() / PI, num_decimal_places=2).next_to(arc.get_arc_center(), UP+LEFT))

        self.play(Create(circle), Create(line1), Create(line2), Write(radius_text))
        self.play(angle.animate.set_value(2*PI), run_time=4, rate_func=linear)
        self.play(Create(arc), Write(arc_length_text), Write(angle_measure))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Density, Mass, and Volume""
    animation:  animate objects of different sizes and materials, illustrating the relationship between density, mass, and volume using the formula D = M / V.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DensityMassVolume(Scene):
    def construct(self):
        title = Text(""Density, Mass, and Volume"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Formula
        formula = MathTex(""D = \\frac{M}{V}"").to_edge(UP)
        self.play(Write(formula))
        self.wait(1)

        # Objects
        square = Square(color=BLUE).shift(LEFT*3)
        circle = Circle(color=GREEN).shift(RIGHT*3)
        square_text = Text(""High Density"", font_size=24).next_to(square, DOWN)
        circle_text = Text(""Low Density"", font_size=24).next_to(circle, DOWN)

        # Mass and Volume indicators
        square_mass = Text(""High M"", font_size=24).next_to(square, LEFT)
        square_volume = Text(""Low V"", font_size=24).next_to(square, RIGHT)
        circle_mass = Text(""Low M"", font_size=24).next_to(circle, LEFT)
        circle_volume = Text(""High V"", font_size=24).next_to(circle, RIGHT)

        self.play(DrawBorderThenFill(square), DrawBorderThenFill(circle))
        self.wait(1)
        self.play(Write(square_text), Write(circle_text))
        self.wait(1)
        self.play(Write(square_mass), Write(square_volume), Write(circle_mass), Write(circle_volume))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Prime Factorization Explained""
animation:  animate a composite number being displayed, followed by the number breaking down into its prime factors, illustrating the process of prime factorization.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PrimeFactorization(Scene):
    def construct(self):
        title = Text(""Prime Factorization Explained"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number = 12
        number_text = Text(str(number), font_size=72)
        self.play(Write(number_text))
        self.wait(1)

        factors = self.prime_factors(number)
        factors_text = VGroup(*[Text(str(factor), font_size=72) for factor in factors])
        factors_text.arrange(RIGHT, buff=0.5)

        self.play(Transform(number_text, factors_text))
        self.wait(2)

    def prime_factors(self, n):
        i = 2
        factors = []
        while i * i <= n:
            if n % i:
                i += 1
            else:
                n //= i
                factors.append(i)
        if n > 1:
            factors.append(n)
        return factors"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Elastic vs. Inelastic Collisions""
    animation:  animate two objects colliding. Show the difference between an elastic collision where kinetic energy is conserved, and an inelastic collision where kinetic energy is lost during the collision.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CollisionAnimation(Scene):
    def construct(self):
        title = Text(""Elastic vs. Inelastic Collisions"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Elastic Collision
        ball1 = Circle(color=BLUE).shift(LEFT*3)
        ball2 = Circle(color=RED).shift(RIGHT*3)
        self.play(FadeIn(ball1), FadeIn(ball2))
        self.play(ball1.animate.shift(RIGHT*2), ball2.animate.shift(LEFT*2))
        self.play(ball1.animate.shift(RIGHT*2), ball2.animate.shift(LEFT*2))
        self.wait(1)

        self.play(FadeOut(ball1), FadeOut(ball2))

        # Inelastic Collision
        ball1 = Circle(color=BLUE).shift(LEFT*3)
        ball2 = Circle(color=RED).shift(RIGHT*3)
        self.play(FadeIn(ball1), FadeIn(ball2))
        self.play(ball1.animate.shift(RIGHT*1.5), ball2.animate.shift(LEFT*1.5))
        merged_ball = Circle(color=PURPLE, fill_opacity=1).scale(1.5).shift(RIGHT*0.25)
        self.play(ReplacementTransform(ball1, merged_ball), ReplacementTransform(ball2, merged_ball))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Multiplying Decimals""
    animation:  animate two decimals being multiplied together, emphasizing the placement of the decimal point in the product.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingDecimals(Scene):
    def construct(self):
        title = Text(""Multiplying Decimals"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup numbers for multiplication
        decimal_1 = DecimalNumber(0.75, num_decimal_places=2).scale(2)
        decimal_2 = DecimalNumber(0.4, num_decimal_places=1).next_to(decimal_1, DOWN).scale(2)
        multiply_sign = Text(""*"").scale(2).next_to(decimal_1, LEFT)
        equals_sign = Text(""="").scale(2).next_to(decimal_1, RIGHT)

        # Group for alignment
        equation = VGroup(multiply_sign, decimal_1, decimal_2, equals_sign)

        # Result of multiplication
        result = DecimalNumber(0.75 * 0.4, num_decimal_places=2).scale(2).next_to(equals_sign, RIGHT)

        # Animate the multiplication process
        self.play(Write(multiply_sign), Write(decimal_1), Write(decimal_2))
        self.wait(1)
        self.play(Write(equals_sign))
        self.wait(1)
        self.play(TransformFromCopy(equation, result))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Balancing Act: Center of Mass""
animation:  animate a flat object (like a ruler) being balanced on a finger, demonstrating the concept of the center of mass and how it affects the object's stability.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CenterOfMass(Scene):
    def construct(self):
        title = Text(""Balancing Act: Center of Mass"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a flat object (ruler)
        ruler = Rectangle(color=BLUE, height=0.2, width=3)
        finger = Dot(color=RED)
        finger.move_to(ruler.get_bottom())

        self.play(FadeIn(ruler), FadeIn(finger))
        self.wait(1)

        # Animate the ruler balancing on the finger
        for _ in range(2):
            self.play(
                ruler.animate.rotate_about_origin(PI/12).move_to(finger.get_center() + UP * 0.1),
                run_time=1,
                rate_func=there_and_back
            )
            self.play(
                ruler.animate.rotate_about_origin(-PI/12).move_to(finger.get_center() + UP * 0.1),
                run_time=1,
                rate_func=there_and_back
            )

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Rotational Symmetry in Shapes""
animation:  animate shapes with different orders of rotational symmetry (e.g., square, pentagon) rotating around their center to demonstrate their rotational symmetry properties.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RotationalSymmetry(Scene):
    def construct(self):
        title = Text(""Rotational Symmetry in Shapes"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Square rotation
        square = Square(color=BLUE)
        self.play(Create(square))
        for _ in range(4):
            self.play(Rotate(square, angle=PI/2), run_time=1)
            self.wait(0.5)
        self.play(FadeOut(square))

        # Pentagon rotation
        pentagon = RegularPolygon(5, color=GREEN)
        self.play(Create(pentagon))
        for _ in range(5):
            self.play(Rotate(pentagon, angle=TAU/5), run_time=1)
            self.wait(0.5)
        self.play(FadeOut(pentagon))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Speed, Distance, and Time Relationship""
animation:  animate an object moving at a constant speed, illustrating the relationship between speed, distance, and time by showing how speed is calculated as distance divided by time.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SpeedDistanceTime(Scene):
    def construct(self):
        title = Text(""Speed, Distance, and Time Relationship"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup
        start_point = LEFT * 4
        end_point = RIGHT * 4
        object = Dot(start_point, color=RED)
        distance_line = Line(start_point, end_point).set_color(WHITE)
        distance_text = Text(""Distance"", color=WHITE).scale(0.5).next_to(distance_line, DOWN)
        
        # Time tracker
        time_tracker = ValueTracker(0)
        time_text = Text(""Time: "", color=WHITE).scale(0.5).to_edge(UP)
        time_value = DecimalNumber(time_tracker.get_value(), num_decimal_places=2).next_to(time_text, RIGHT)
        time_value.add_updater(lambda m: m.set_value(time_tracker.get_value()))

        # Speed calculation
        speed_text = Text(""Speed = Distance / Time"", color=WHITE).scale(0.5).next_to(time_text, DOWN)
        
        # Animation
        self.play(ShowCreation(distance_line), Write(distance_text))
        self.play(FadeIn(object))
        self.play(Write(time_text), Write(time_value), Write(speed_text))
        self.play(
            object.animate.move_to(end_point),
            time_tracker.animate.set_value(5),  # Assuming it takes 5 seconds to move
            run_time=5,
            rate_func=linear
        )

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Absolute Value""
animation:  animate a number line with zero at the center, and show how the absolute value of a number is represented as the distance from zero on the number line, emphasizing the concept of magnitude without direction.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class AbsoluteValueScene(Scene):
    def construct(self):
        # Title
        title = Text(""Understanding Absolute Value"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Number line
        number_line = NumberLine(x_range=[-5, 5, 1], length=10, include_numbers=True, include_tip=True)
        self.play(Create(number_line))
        self.wait(1)

        # Absolute value demonstration
        dot = Dot(color=RED).move_to(number_line.n2p(0))
        self.play(FadeIn(dot))

        # Animate absolute value of -3
        negative_three = number_line.n2p(-3)
        self.play(dot.animate.move_to(negative_three))
        self.wait(1)
        distance_line = DashedLine(start=number_line.n2p(0), end=negative_three, color=YELLOW)
        self.play(Create(distance_line))
        self.wait(2)
        self.play(FadeOut(distance_line), dot.animate.move_to(number_line.n2p(0)))

        # Animate absolute value of 3
        three = number_line.n2p(3)
        self.play(dot.animate.move_to(three))
        self.wait(1)
        distance_line = DashedLine(start=number_line.n2p(0), end=three, color=YELLOW)
        self.play(Create(distance_line))
        self.wait(2)

        # Cleanup
        self.play(FadeOut(dot), FadeOut(distance_line), FadeOut(number_line))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Solving Proportions with Cross-Multiplication""
    animation:  display a proportion such as 2/3 = x/6 on the screen. Animate the process of cross-multiplying and dividing to solve for the unknown value of x.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SolveProportion(Scene):
    def construct(self):
        title = Text(""Solving Proportions with Cross-Multiplication"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        proportion = Text(""2/3 = x/6"").scale(1)
        self.play(Write(proportion))
        self.wait(2)

        cross_multiply = Text(""2 * 6 = 3 * x"", color=BLUE).next_to(proportion, DOWN)
        self.play(Transform(proportion, cross_multiply))
        self.wait(2)

        solve_for_x = Text(""x = 12 / 3"", color=GREEN).next_to(cross_multiply, DOWN)
        self.play(Write(solve_for_x))
        self.wait(2)

        x_value = Text(""x = 4"", color=RED).next_to(solve_for_x, DOWN)
        self.play(Transform(solve_for_x, x_value))
        self.wait(2)

        self.play(FadeOut(proportion), FadeOut(solve_for_x))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Projectile Motion Simulation""
    animation:  animate an object being launched at an angle, showing its parabolic path and the effects of gravity on its trajectory.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ProjectileMotionSimulation(Scene):
    def construct(self):
        title = Text(""Projectile Motion Simulation"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parameters for the projectile motion
        velocity = 5
        angle = 45
        g = 9.8
        time_of_flight = 2 * velocity * np.sin(np.radians(angle)) / g
        max_height = (velocity**2) * (np.sin(np.radians(angle))**2) / (2 * g)
        range_projectile = (velocity**2) * np.sin(2 * np.radians(angle)) / g

        # Creating the trajectory path
        trajectory = FunctionGraph(
            lambda x: x * np.tan(np.radians(angle)) - (g * x**2) / (2 * velocity**2 * np.cos(np.radians(angle))**2),
            x_range=[0, range_projectile],
            color=BLUE
        )

        # Creating the object
        projectile = Dot(radius=0.2, color=RED)
        projectile.move_to(trajectory.points[0])

        # Animate the projectile along the path
        self.play(MoveAlongPath(projectile, trajectory, rate_func=linear), run_time=time_of_flight)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exponents and Square Roots""
    animation:  animate a number being multiplied by itself to demonstrate an exponent operation. Next, animate finding the square root as the inverse operation, showing the original number being reconstructed from the squared result.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ExponentsAndSquareRoots(Scene):
    def construct(self):
        # Title
        title = Text(""Exponents and Square Roots"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Exponent operation
        number = Text(""3"")
        times = Text(""×"")
        number2 = Text(""3"")
        equals = Text(""="")
        result = Text(""9"")

        exponent_group = VGroup(number, times, number2, equals, result)
        exponent_group.arrange(RIGHT)

        self.play(Write(number), Write(times), Write(number2))
        self.wait(1)
        self.play(Write(equals), Write(result))
        self.wait(2)
        self.play(FadeOut(exponent_group))

        # Square root operation
        sqrt_sign = Text(""√"")
        squared_result = Text(""9"")
        equals_sqrt = Text(""="")
        original_number = Text(""3"")

        sqrt_group = VGroup(sqrt_sign, squared_result, equals_sqrt, original_number)
        sqrt_group.arrange(RIGHT)

        self.play(Write(sqrt_sign), Write(squared_result))
        self.wait(1)
        self.play(Write(equals_sqrt), Write(original_number))
        self.wait(2)
        self.play(FadeOut(sqrt_group))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Associative Property of Multiplication""
    animation:  animate multiplying three numbers in different groupings, such as (2 × 3) × 4 and 2 × (3 × 4), and show that the product remains the same in each case, illustrating the associative property of multiplication.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class AssociativeProperty(Scene):
    def construct(self):
        title = Text(""Associative Property of Multiplication"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # First grouping (2 × 3) × 4
        first_group = MathTex(""(2 \\times 3) \\times 4 = 6 \\times 4 = 24"").scale(0.7)
        self.play(Write(first_group))
        self.wait(2)
        self.play(FadeOut(first_group))

        # Second grouping 2 × (3 × 4)
        second_group = MathTex(""2 \\times (3 \\times 4) = 2 \\times 12 = 24"").scale(0.7)
        self.play(Write(second_group))
        self.wait(2)

        # Conclusion
        conclusion = Text(""The product remains the same!"").scale(0.7)
        self.play(ReplacementTransform(second_group, conclusion))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Rounding Numbers on a Number Line""
animation:  animate a number line with a number displayed on it. Show the number being rounded to the nearest ten, hundred, or thousand with a visual representation of the rounding process.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RoundingNumbers(Scene):
    def construct(self):
        title = Text(""Rounding Numbers on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[-1000, 1000, 100], length=10, include_numbers=True, numbers_to_exclude=[0])
        self.play(Create(number_line))
        self.wait(1)

        # Example number to round
        number = 253
        point = Dot(number_line.n2p(number), color=YELLOW)
        number_label = MathTex(str(number)).next_to(point, UP)
        self.play(FadeIn(point), Write(number_label))
        self.wait(1)

        # Rounding to the nearest ten
        rounded_ten = round(number, -1)
        rounded_ten_point = Dot(number_line.n2p(rounded_ten), color=GREEN)
        rounded_ten_label = MathTex(str(rounded_ten)).next_to(rounded_ten_point, UP)
        self.play(Transform(point, rounded_ten_point), Transform(number_label, rounded_ten_label))
        self.wait(1)

        # Rounding to the nearest hundred
        rounded_hundred = round(number, -2)
        rounded_hundred_point = Dot(number_line.n2p(rounded_hundred), color=BLUE)
        rounded_hundred_label = MathTex(str(rounded_hundred)).next_to(rounded_hundred_point, UP)
        self.play(Transform(point, rounded_hundred_point), Transform(number_label, rounded_hundred_label))
        self.wait(1)

        # Rounding to the nearest thousand
        rounded_thousand = round(number, -3)
        if rounded_thousand == 0:  # Avoid placing a dot at the origin if rounded to 0
            rounded_thousand_point = Dot(number_line.n2p(1), color=RED).move_to(number_line.n2p(rounded_thousand))
        else:
            rounded_thousand_point = Dot(number_line.n2p(rounded_thousand), color=RED)
        rounded_thousand_label = MathTex(str(rounded_thousand)).next_to(rounded_thousand_point, UP)
        self.play(Transform(point, rounded_thousand_point), Transform(number_label, rounded_thousand_label))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Complementary and Supplementary Angles in a Triangle""
animation:  animate a triangle with one 90° angle, and demonstrate how the other two angles are complementary, summing up to 90°.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ComplementaryAndSupplementary(Scene):
    def construct(self):
        title = Text(""Complementary and Supplementary Angles in a Triangle"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a right-angled triangle
        right_triangle = Polygon(ORIGIN, 4*RIGHT, 4*RIGHT+3*UP, color=WHITE)
        right_angle_marker = RightAngle(right_triangle, 1, length=0.3, quadrant=(-1,1))
        self.play(Create(right_triangle), Create(right_angle_marker))
        self.wait(1)

        # Labels for the angles
        angle_90 = MathTex(""90^\\circ"").next_to(right_angle_marker, DOWN, buff=0.1)
        self.play(Write(angle_90))

        # Other two angles
        angle_a = Angle(right_triangle[2], right_triangle[0], right_triangle[1], radius=0.5, color=YELLOW)
        angle_b = Angle(right_triangle[0], right_triangle[1], right_triangle[2], radius=0.5, color=BLUE)
        angle_a_label = MathTex(""\\alpha"").move_to(angle_a.point_from_proportion(0.5))
        angle_b_label = MathTex(""\\beta"").move_to(angle_b.point_from_proportion(0.5))
        self.play(Create(angle_a), Write(angle_a_label), Create(angle_b), Write(angle_b_label))
        self.wait(1)

        # Complementary angles text
        complementary_text = Text(""α + β = 90°"", font_size=36).to_edge(DOWN)
        self.play(Write(complementary_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Multiplying Powers with the Same Base""
    animation:  display two powers with the same base side by side, and animate multiplying them by adding their exponents to show the result.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingPowers(Scene):
    def construct(self):
        title = Text(""Multiplying Powers with the Same Base"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        power1 = MathTex(""a^m"").shift(LEFT)
        times = MathTex(""\\times"").next_to(power1, RIGHT)
        power2 = MathTex(""a^n"").next_to(times, RIGHT)
        equals = MathTex(""="").next_to(power2, RIGHT)
        result = MathTex(""a^{m+n}"").next_to(equals, RIGHT)

        self.play(Write(power1), Write(times), Write(power2))
        self.wait(1)
        self.play(TransformMatchingTex(power1.copy(), result[0][0]), 
                  TransformMatchingTex(power2.copy(), result[0][2:]),
                  Write(equals))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Dividing Fractions Illustrated""
animation:  animate two fractions side by side, and show the process of dividing them by multiplying the first fraction by the reciprocal of the second fraction.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DividingFractions(Scene):
    def construct(self):
        title = Text(""Dividing Fractions Illustrated"")
        title.scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Fractions
        fraction1 = MathTex(r""\frac{3}{4}"")
        fraction2 = MathTex(r""\frac{5}{6}"")
        times = MathTex(r""\times"")
        equals = MathTex(r""="")
        reciprocal = MathTex(r""\frac{6}{5}"")

        fraction_group = VGroup(fraction1, times, fraction2, equals, reciprocal).arrange(RIGHT)

        self.play(Write(fraction1), Write(fraction2))
        self.wait(1)
        self.play(Write(times))
        self.wait(1)
        self.play(Transform(fraction2.copy(), reciprocal))
        self.wait(1)
        self.play(Write(equals))
        self.wait(1)
        self.play(Write(reciprocal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Statistical Measures Visualization""
animation:  display a set of numbers and animate finding the mean (average), median (middle value), and mode (most frequent value) of the set.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class StatisticalMeasuresVisualization(Scene):
    def construct(self):
        title = Text(""Statistical Measures Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        numbers = [1, 2, 3, 4, 5, 3, 3]
        numbers_text = Text(str(numbers)).scale(0.8)
        self.play(Write(numbers_text))
        self.wait(2)

        mean_value = sum(numbers) / len(numbers)
        mean_text = Text(f""Mean: {mean_value}"").to_edge(DOWN)
        self.play(Transform(numbers_text, mean_text))
        self.wait(2)

        numbers.sort()
        if len(numbers) % 2 == 0:
            median_value = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2
        else:
            median_value = numbers[len(numbers) // 2]
        median_text = Text(f""Median: {median_value}"").to_edge(DOWN)
        self.play(Transform(numbers_text, median_text))
        self.wait(2)

        mode_value = max(set(numbers), key=numbers.count)
        mode_text = Text(f""Mode: {mode_value}"").to_edge(DOWN)
        self.play(Transform(numbers_text, mode_text))
        self.wait(2)

        self.play(FadeOut(numbers_text))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Friction and Sliding Objects""
animation:  animate an object sliding on a surface. Show how friction acts in the opposite direction to the object's motion, slowing it down and eventually bringing it to a stop.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FrictionAnimation(Scene):
    def construct(self):
        # Title
        title = Text(""Friction and Sliding Objects"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Surface
        surface = Line(LEFT * 5, RIGHT * 5)
        self.play(Create(surface))

        # Object
        object = Square(color=BLUE).scale(0.5)
        object.move_to(LEFT * 4)
        self.play(FadeIn(object))

        # Motion and Friction
        friction_arrow = Arrow(object.get_center(), object.get_center() + LEFT, buff=0, color=RED)
        motion_arrow = Arrow(object.get_center(), object.get_center() + RIGHT, buff=0, color=GREEN)

        self.play(ShowCreation(motion_arrow), GrowArrow(friction_arrow))
        for _ in range(5):
            self.play(object.animate.shift(RIGHT * 0.8), run_time=0.5)
            self.play(object.animate.shift(LEFT * 0.2), run_time=0.5)
            motion_arrow.scale(0.8, about_point=object.get_center())
            friction_arrow.scale(0.8, about_point=object.get_center())

        self.play(FadeOut(object), FadeOut(motion_arrow), FadeOut(friction_arrow), FadeOut(surface))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Simplifying Ratios""
    animation:  display a ratio on the screen and animate simplifying it by dividing both terms by their greatest common factor, showing the process of reducing the ratio to its simplest form.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SimplifyingRatios(Scene):
    def construct(self):
        title = Text(""Simplifying Ratios"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Display the initial ratio
        ratio = Text(""12:36"").scale(1.5)
        self.play(Write(ratio))
        self.wait(2)

        # Show the process of simplifying the ratio
        simplified_ratio = Text(""= 1:3"", color=BLUE).next_to(ratio, DOWN)
        self.play(TransformMatchingShapes(ratio.copy(), simplified_ratio))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Symmetry in Polygons""
animation:  animate examples of polygons with line symmetry (e.g., equilateral triangle) and rotational symmetry (e.g., square), showcasing their symmetrical properties.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SymmetryInPolygons(Scene):
    def construct(self):
        title = Text(""Symmetry in Polygons"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Line symmetry in an equilateral triangle
        triangle = RegularPolygon(n=3).scale(2)
        line_of_symmetry = Line(start=triangle.get_top(), end=triangle.get_bottom(), color=RED)
        self.play(Create(triangle))
        self.wait(1)
        self.play(ShowCreation(line_of_symmetry))
        self.wait(2)
        self.play(FadeOut(triangle), FadeOut(line_of_symmetry))

        # Rotational symmetry in a square
        square = Square().scale(2)
        dot_center = Dot(square.get_center(), color=RED)
        self.play(Create(square))
        self.wait(1)
        self.play(FadeIn(dot_center))
        self.play(Rotate(square, angle=PI/2), Rotate(dot_center, angle=PI/2))
        self.wait(1)
        self.play(FadeOut(square), FadeOut(dot_center))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Converting Between Percentages and Decimals""
    animation:  animate displaying a percentage value and show the process of converting it to a decimal by dividing by 100.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ConvertPercentageToDecimal(Scene):
    def construct(self):
        title = Text(""Converting Between Percentages and Decimals"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        percentage = Text(""75%"", font_size=72)
        equals = Text(""="", font_size=72).next_to(percentage, RIGHT)
        division = Text(""/ 100 = ?"", font_size=72).next_to(equals, RIGHT)
        self.play(Write(percentage))
        self.play(Write(equals), Write(division))
        self.wait(2)

        decimal = Text(""0.75"", font_size=72).next_to(equals, RIGHT)
        self.play(ReplacementTransform(division, decimal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Work Done""
    animation:  animate an object being pushed or lifted, and show the calculation of work done as force multiplied by distance.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WorkDone(Scene):
    def construct(self):
        title = Text(""Calculating Work Done"").scale(0.9)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        # Object
        box = Square(color=BLUE, fill_opacity=1).scale(0.5)
        self.play(FadeIn(box))
        self.wait(0.5)

        # Force arrow
        force_arrow = Arrow(start=box.get_center(), end=box.get_center() + RIGHT * 2, buff=0, color=YELLOW)
        force_text = Text(""Force"", color=YELLOW).next_to(force_arrow, UP, buff=0.1)
        self.play(GrowArrow(force_arrow), Write(force_text))
        self.wait(0.5)

        # Movement
        path = Line(start=box.get_center(), end=box.get_center() + RIGHT * 3)
        self.play(MoveAlongPath(box, path), run_time=2)
        self.play(FadeOut(force_arrow), FadeOut(force_text))

        # Distance
        distance_line = Line(start=box.get_center() + DOWN * 0.5 + LEFT * 1.5, end=box.get_center() + DOWN * 0.5 + RIGHT * 1.5)
        distance_text = Text(""Distance"", color=GREEN).next_to(distance_line, DOWN, buff=0.1)
        self.play(ShowCreation(distance_line), Write(distance_text))
        self.wait(0.5)

        # Work done calculation
        work_done = Text(""Work = Force × Distance"", color=RED).to_edge(DOWN)
        self.play(Write(work_done))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Distributive Property Visualization""
animation:  animate a number being multiplied by a sum (e.g., 2(x + 3)) and show the distribution of the multiplication over the addition, visually illustrating the distributive property in action.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DistributiveProperty(Scene):
    def construct(self):
        title = Text(""Distributive Property Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        equation = Text(""2(x + 3) = 2x + 6"").scale(1.2)
        highlight1 = SurroundingRectangle(equation[0][2:9], color=YELLOW)
        highlight2 = SurroundingRectangle(equation[0][12:], color=YELLOW)

        self.play(Write(equation))
        self.wait(1)
        self.play(Create(highlight1))
        self.wait(1)
        self.play(ReplacementTransform(highlight1, highlight2))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Solving Equations with Inverse Operations""
animation:  display an equation (e.g., x + 5 = 10) and animate the process of using the inverse operation (subtraction) to solve for the variable x.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SolveEquation(Scene):
    def construct(self):
        title = Text(""Solving Equations with Inverse Operations"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        equation = Text(""x + 5 = 10"").scale(0.7)
        self.play(Write(equation))
        self.wait(1)

        subtract_5 = Text(""-5"", color=RED).next_to(equation, DOWN)
        self.play(Write(subtract_5))
        self.wait(1)

        equation_solved = Text(""x = 5"").scale(0.7).next_to(equation, DOWN, buff=1)
        self.play(ReplacementTransform(equation.copy(), equation_solved), FadeOut(subtract_5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Velocity and Acceleration Illustrated""
animation:  animate an object moving with changing speed, clearly showing the difference between velocity (speed with direction) and acceleration (change in velocity) through visual representations.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class VelocityAcceleration(Scene):
    def construct(self):
        title = Text(""Velocity and Acceleration Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a dot to represent the object
        dot = Dot(color=BLUE).move_to(3*LEFT)
        path = VMobject(color=WHITE)
        path.set_points_as_corners([dot.get_center(), dot.get_center()])

        def update_path(path):
            previous_path = path.copy()
            previous_path.add_points_as_corners([dot.get_center()])
            path.become(previous_path)

        path.add_updater(update_path)
        self.add(path, dot)

        # Animate the dot with changing velocity and show acceleration vector
        self.play(dot.animate.shift(4*RIGHT), rate_func=there_and_back, run_time=4)
        acceleration_arrow = Arrow(dot.get_center(), dot.get_center() + RIGHT, buff=0, color=YELLOW)
        acceleration_arrow.add_updater(lambda m: m.put_start_and_end_on(dot.get_center(), dot.get_center() + RIGHT*dot.get_center()[0]*0.2))

        self.add(acceleration_arrow)
        self.wait(2)

        # Show velocity vector
        velocity_arrow = Arrow(dot.get_center(), dot.get_center() + RIGHT, buff=0, color=GREEN)
        velocity_arrow.add_updater(lambda m: m.put_start_and_end_on(dot.get_center(), dot.get_center() + RIGHT if dot.get_center()[0] < 0 else dot.get_center() + LEFT))

        self.add(velocity_arrow)
        self.wait(4)

        self.play(FadeOut(velocity_arrow), FadeOut(acceleration_arrow), FadeOut(dot), FadeOut(path))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Properties of Parallelograms""
    animation:  animate a parallelogram displaying its properties - opposite sides are parallel and equal in length, and opposite angles are equal in measure.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ParallelogramProperties(Scene):
    def construct(self):
        title = Text(""Properties of Parallelograms"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a parallelogram
        parallelogram = Polygon(
            np.array([-2, 1, 0]),
            np.array([2, 1, 0]),
            np.array([3, -1, 0]),
            np.array([-1, -1, 0]),
            color=BLUE
        )
        self.play(Create(parallelogram))
        self.wait(1)

        # Annotations for parallel and equal sides
        parallel_sign = Tex(""||"").scale(0.5)
        parallel_sign.move_to(np.array([-1.5, 0, 0]))
        self.play(Write(parallel_sign))

        parallel_sign_2 = parallel_sign.copy()
        parallel_sign_2.move_to(np.array([2.5, 0, 0]))
        self.play(Write(parallel_sign_2))

        equal_length = Tex(""=="").scale(0.5)
        equal_length.move_to(np.array([0.5, 1.2, 0]))
        self.play(Write(equal_length))

        equal_length_2 = equal_length.copy()
        equal_length_2.move_to(np.array([0.5, -1.2, 0]))
        self.play(Write(equal_length_2))

        # Annotations for angles
        angle_a = Angle(parallelogram.get_vertices()[0], parallelogram.get_vertices()[1], parallelogram.get_vertices()[3], radius=0.3, color=YELLOW)
        angle_b = angle_a.copy()
        angle_b.move_to(parallelogram.get_vertices()[2], aligned_edge=DOWN)
        self.play(Create(angle_a), Create(angle_b))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Calculating Simple Interest""
animation:  animate showing a principal amount, interest rate, and time values on the screen. Calculate the simple interest earned by multiplying the principal amount, interest rate, and time, and display the result.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SimpleInterest(Scene):
    def construct(self):
        title = Text(""Calculating Simple Interest"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Displaying principal amount, interest rate, and time
        principal_text = Text(""Principal: $1000"", font_size=24)
        interest_text = Text(""Interest Rate: 5%"", font_size=24).next_to(principal_text, DOWN)
        time_text = Text(""Time: 3 years"", font_size=24).next_to(interest_text, DOWN)

        self.play(Write(principal_text), Write(interest_text), Write(time_text))
        self.wait(2)

        # Calculating simple interest
        simple_interest = 1000 * 0.05 * 3
        result_text = Text(f""Simple Interest: ${simple_interest}"", font_size=24).next_to(time_text, DOWN)

        self.play(Write(result_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Types of Levers""
animation:  animate examples of first, second, and third-class levers in action, demonstrating how they balance effort and load. Show how each type of lever functions and the mechanical advantage it provides.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LeversAnimation(Scene):
    def create_lever(self, fulcrum_position, effort_position, load_position, lever_length=6):
        # Base line for the lever
        lever = Line(start=LEFT*lever_length/2, end=RIGHT*lever_length/2, color=WHITE)
        lever.move_to(UP*0.5)
        
        # Fulcrum
        fulcrum = Triangle().scale(0.2).set_fill(ORANGE, opacity=1)
        fulcrum.next_to(lever, DOWN, buff=0).shift(fulcrum_position*RIGHT)
        
        # Effort
        effort = Circle(color=BLUE, fill_opacity=1).scale(0.2)
        effort.next_to(lever, UP, buff=0).shift(effort_position*RIGHT)
        
        # Load
        load = Square(color=RED, fill_opacity=1).scale(0.4)
        load.next_to(lever, UP, buff=0).shift(load_position*RIGHT)
        
        return VGroup(lever, fulcrum, effort, load)

    def construct(self):
        title = Text(""Understanding Types of Levers"", font_size=24)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))
        
        # First-class lever
        first_class_lever = self.create_lever(fulcrum_position=0, effort_position=-2, load_position=2)
        self.play(ShowCreation(first_class_lever))
        self.wait(2)
        self.play(FadeOut(first_class_lever))
        
        # Second-class lever
        second_class_lever = self.create_lever(fulcrum_position=-3, effort_position=2, load_position=1)
        self.play(ShowCreation(second_class_lever))
        self.wait(2)
        self.play(FadeOut(second_class_lever))
        
        # Third-class lever
        third_class_lever = self.create_lever(fulcrum_position=-3, effort_position=1, load_position=2)
        self.play(ShowCreation(third_class_lever))
        self.wait(2)
        self.play(FadeOut(third_class_lever))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Multiplying Mixed Numbers""
animation:  display two mixed numbers and animate converting them to improper fractions. Next, show the multiplication of the two improper fractions and simplify the result.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingMixedNumbers(Scene):
    def construct(self):
        # Title
        title = Text(""Multiplying Mixed Numbers"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Mixed numbers
        mixed_number_1 = Text(""2 1/3"").scale(1)
        mixed_number_2 = Text(""1 3/4"").next_to(mixed_number_1, DOWN, buff=0.5).scale(1)

        self.play(Write(mixed_number_1), Write(mixed_number_2))
        self.wait(2)

        # Convert to improper fractions
        improper_fraction_1 = Text(""7/3"").next_to(mixed_number_1, RIGHT, buff=1)
        improper_fraction_2 = Text(""7/4"").next_to(mixed_number_2, RIGHT, buff=1)

        self.play(Transform(mixed_number_1, improper_fraction_1))
        self.play(Transform(mixed_number_2, improper_fraction_2))
        self.wait(2)

        # Multiplication
        multiplication = Text(""="").next_to(improper_fraction_1, RIGHT, buff=0.5)
        result_fraction = Text(""49/12"").next_to(multiplication, RIGHT, buff=0.5)

        self.play(Write(multiplication))
        self.play(Write(result_fraction))
        self.wait(2)

        # Simplify
        simplified_fraction = Text(""= 4 1/12"").next_to(result_fraction, RIGHT, buff=0.5)

        self.play(Write(simplified_fraction))
        self.wait(2)

        # Clear
        self.play(FadeOut(mixed_number_1), FadeOut(mixed_number_2), FadeOut(improper_fraction_1), FadeOut(improper_fraction_2), FadeOut(multiplication), FadeOut(result_fraction), FadeOut(simplified_fraction))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Average Acceleration Calculation""
animation:  animate an object changing its velocity over time. Show the calculation of its average acceleration as the change in velocity divided by time.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class AverageAcceleration(Scene):
    def construct(self):
        title = Text(""Average Acceleration Calculation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Animate object moving with changing velocity
        object = Circle().set_fill(PINK, opacity=0.5)
        start_point = LEFT * 4
        end_point = RIGHT * 4
        self.play(FadeIn(object.move_to(start_point)))
        self.wait(1)
        self.play(object.animate.shift(RIGHT * 2).set_fill(GREEN, opacity=0.5), run_time=2, rate_func=linear)
        self.wait(1)
        self.play(object.animate.shift(RIGHT * 2).set_fill(BLUE, opacity=0.5), run_time=1, rate_func=linear)
        self.wait(1)

        # Calculation of average acceleration
        formula = MathTex(r""a_{avg} = \frac{\Delta v}{\Delta t}"")
        self.play(Write(formula))
        self.wait(2)

        # Show change in velocity and time
        delta_v = MathTex(r""\Delta v = v_f - v_i = 4\,m/s - 2\,m/s = 2\,m/s"")
        delta_t = MathTex(r""\Delta t = 3\,s"")
        calculation = MathTex(r""a_{avg} = \frac{2\,m/s}{3\,s} = \frac{2}{3}\,m/s^2"")
        delta_v.next_to(formula, DOWN)
        delta_t.next_to(delta_v, DOWN)
        calculation.next_to(delta_t, DOWN)

        self.play(ReplacementTransform(formula, delta_v))
        self.wait(1)
        self.play(Write(delta_t))
        self.wait(1)
        self.play(Write(calculation))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Uniform Motion""
animation: Start with a title slide with the title, then animate an object moving in a straight line at a constant speed, illustrating the concept of uniform motion.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class UniformMotion(Scene):
    def construct(self):
        title = Text(""Uniform Motion"").scale(1.5)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        line = Line(LEFT*4, RIGHT*4)
        dot = Dot(LEFT*4)
        self.add(line, dot)
        self.play(MoveAlongPath(dot, line), run_time=4, rate_func=linear)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Newton's Second Law in Action""
    animation:  animate an object being pushed with a force and accelerating in the direction of the force, demonstrating the relationship F = ma as described by Newton's Second Law of Motion.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NewtonSecondLaw(Scene):
    def construct(self):
        title = Text(""Newton's Second Law in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup
        ground = Line(start=3*LEFT, end=3*RIGHT, color=WHITE)
        self.play(Create(ground))
        box = Square(side_length=0.5, color=BLUE)
        box.move_to(2.5*LEFT)
        self.play(Create(box))

        # Force arrow
        force_arrow = Arrow(start=box.get_center(), end=box.get_center() + RIGHT, buff=0, color=YELLOW)
        force_text = Text(""F"", font_size=24).next_to(force_arrow, UP, buff=0.1)
        self.play(GrowArrow(force_arrow), Write(force_text))

        # Acceleration
        self.play(box.animate.shift(4*RIGHT), run_time=2, rate_func=linear)
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Inertia""
animation:  animate an object at rest remaining stationary, and another object in motion continuing its motion at a constant velocity, both resisting changes to their state of motion when acted upon by external forces.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class UnderstandingInertia(Scene):
    def construct(self):
        title = Text(""Understanding Inertia"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Object at rest
        square_rest = Square(color=BLUE, fill_opacity=1).shift(LEFT*3)
        text_rest = Text(""Rest"", font_size=24).next_to(square_rest, DOWN)
        self.play(FadeIn(square_rest), Write(text_rest))
        self.wait(2)

        # Object in motion
        square_motion = Square(color=GREEN, fill_opacity=1).shift(RIGHT*3)
        text_motion = Text(""Motion"", font_size=24).next_to(square_motion, DOWN)
        self.play(FadeIn(square_motion), Write(text_motion))
        self.play(square_motion.animate.shift(RIGHT*2), run_time=2, rate_func=linear)
        self.wait(2)

        # Show resistance to change
        arrow = Arrow(start=ORIGIN, end=UP*1, buff=0, color=YELLOW)
        arrow_rest = arrow.copy().next_to(square_rest, UP)
        arrow_motion = arrow.copy().next_to(square_motion, UP)
        self.play(GrowArrow(arrow_rest), GrowArrow(arrow_motion))
        self.wait(2)

        self.play(FadeOut(square_rest, square_motion, text_rest, text_motion, arrow_rest, arrow_motion))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Hooke's Law Illustrated""
    animation:  animate a spring being stretched or compressed, demonstrating how the force applied is proportional to the displacement according to Hooke's Law (F = kx).
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class HookesLaw(Scene):
    def construct(self):
        title = Text(""Hooke's Law Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Spring setup
        spring = Spring().shift(LEFT*2)
        block = Square().next_to(spring, RIGHT)
        equilibrium = Text(""Equilibrium"", font_size=24).next_to(spring, UP, buff=0.1)

        self.play(FadeIn(spring, shift=RIGHT), FadeIn(block, shift=LEFT))
        self.play(Write(equilibrium))
        self.wait(1)

        # Stretching and compressing
        for _ in range(2):
            self.play(spring.stretch, 1.5, {""dim"": 0}, rate_func=there_and_back, run_time=2)
            self.play(block.shift, RIGHT*1.5, rate_func=there_and_back, run_time=2)
            self.play(spring.stretch, 0.5, {""dim"": 0}, rate_func=there_and_back, run_time=2)
            self.play(block.shift, LEFT*0.5, rate_func=there_and_back, run_time=2)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Calculating Pressure""
animation:  animate a force acting on a surface and show the calculation of pressure as the force divided by the area (P = F / A).
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PressureCalculation(Scene):
    def construct(self):
        title = Text(""Calculating Pressure"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Animate force arrow
        force_arrow = Arrow(start=2*LEFT, end=2*RIGHT, color=RED)
        force_label = MathTex(""F"", color=RED).next_to(force_arrow, UP)
        self.play(GrowArrow(force_arrow), Write(force_label))
        self.wait(1)

        # Animate surface
        surface = Line(start=3*DOWN + 2*LEFT, end=3*DOWN + 2*RIGHT)
        area_label = MathTex(""A"", color=BLUE).next_to(surface, DOWN)
        self.play(Write(surface), Write(area_label))
        self.wait(1)

        # Show calculation of pressure
        pressure_formula = MathTex(r""P = \frac{F}{A}"").shift(UP)
        self.play(Write(pressure_formula))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Heat Transfer Mechanisms""
animation:  animate examples of heat transfer through conduction, convection, and radiation. Show conduction with a hot object touching a cold object, convection with fluid motion transferring heat, and radiation with electromagnetic waves emitting heat.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class HeatTransferMechanisms(Scene):
    def construct(self):
        title = Text(""Heat Transfer Mechanisms"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Conduction
        hot_obj = Square(color=RED).shift(LEFT)
        cold_obj = Square(color=BLUE).shift(RIGHT)
        self.play(GrowFromCenter(hot_obj), GrowFromCenter(cold_obj))
        self.wait(1)
        heat_transfer = Line(LEFT, RIGHT).set_color(YELLOW)
        self.play(ShowCreation(heat_transfer))
        self.wait(2)
        self.play(FadeOut(hot_obj), FadeOut(cold_obj), FadeOut(heat_transfer))

        # Convection
        fluid = Rectangle(height=2, width=4, color=BLUE).shift(DOWN*0.5)
        arrows = VGroup(
            Arrow(ORIGIN, UP*0.5).shift(LEFT*1.5 + DOWN*0.5),
            Arrow(ORIGIN, UP*0.5).shift(LEFT*0.5 + DOWN*0.5),
            Arrow(ORIGIN, UP*0.5).shift(RIGHT*0.5 + DOWN*0.5),
            Arrow(ORIGIN, UP*0.5).shift(RIGHT*1.5 + DOWN*0.5),
        )
        self.play(ShowCreation(fluid))
        self.play(ShowCreation(arrows))
        self.wait(2)
        self.play(FadeOut(fluid), FadeOut(arrows))

        # Radiation
        source = Circle(color=YELLOW).scale(0.5)
        waves = VGroup(
            CurvedArrow(0.6*UP, 0.6*RIGHT, angle=-TAU/4),
            CurvedArrow(0.6*RIGHT, 0.6*DOWN, angle=-TAU/4),
            CurvedArrow(0.6*DOWN, 0.6*LEFT, angle=-TAU/4),
            CurvedArrow(0.6*LEFT, 0.6*UP, angle=-TAU/4),
        ).set_color(ORANGE)
        self.play(ShowCreation(source))
        self.play(ShowCreation(waves))
        self.wait(2)
        self.play(FadeOut(source), FadeOut(waves))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Light Reflection and Refraction""
animation:  animate a light ray reflecting off a mirror and refracting as it passes through a lens, demonstrating the principles of reflection and refraction of light.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LightReflectionRefraction(Scene):
    def construct(self):
        title = Text(""Light Reflection and Refraction"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Mirror
        mirror = Line(UP, DOWN).set_color(WHITE)
        mirror.shift(LEFT * 2)
        self.play(Create(mirror))

        # Lens
        lens = Ellipse(width=1.5, height=3, stroke_color=WHITE).shift(RIGHT * 2)
        self.play(Create(lens))

        # Incident Ray (towards mirror)
        incident_ray = Arrow(start=LEFT * 4 + UP * 2, end=LEFT * 2 + UP * 0.5, buff=0, color=YELLOW)
        self.play(Create(incident_ray))

        # Reflected Ray
        reflected_ray = Arrow(start=LEFT * 2 + UP * 0.5, end=LEFT * 0 + UP * 2, buff=0, color=YELLOW)
        self.play(Create(reflected_ray))

        # Refracted Ray (through lens)
        refracted_ray = Arrow(start=RIGHT * 2 + UP * 0.5, end=RIGHT * 4 + UP * 1, buff=0, color=YELLOW)
        self.play(Create(refracted_ray))

        # Incident Ray (towards lens)
        self.play(Transform(incident_ray, Arrow(start=LEFT * 0 + UP * 2, end=RIGHT * 2 + UP * 0.5, buff=0, color=YELLOW)))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Dispersion of Light""
    animation:  animate a prism splitting white light into its component colors, creating a rainbow effect.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DispersionOfLight(Scene):
    def construct(self):
        title = Text(""Dispersion of Light"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create prism and light
        prism = Polygon([-1, 2, 0], [1, 2, 0], [0, -1, 0], color=WHITE).scale(1.5)
        light = Line([-7, 0, 0], [-2, 0, 0], color=WHITE)
        self.play(ShowCreation(prism), ShowCreation(light))
        self.wait(1)

        # Create rainbow effect
        colors = [RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, VIOLET]
        rays = VGroup()
        for i, color in enumerate(colors):
            angle = i * 10 - 30
            ray = Line([-2, 0, 0], [3 * np.cos(np.radians(angle)), 3 * np.sin(np.radians(angle)), 0], color=color)
            rays.add(ray)

        self.play(Transform(light, rays))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Wave Types""
    animation:  animate examples of transverse waves (e.g., light) and longitudinal waves (e.g., sound), showcasing their distinct characteristics and motion patterns.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaveTypes(Scene):
    def construct(self):
        title = Text(""Exploring Wave Types"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Transverse Wave
        transverse_wave = FunctionGraph(
            lambda x: np.sin(x), x_range=[-3, 3], color=BLUE
        )
        transverse_wave_label = Text(""Transverse Wave (e.g., light)"").to_edge(UP)
        self.play(Create(transverse_wave), Write(transverse_wave_label))
        self.play(transverse_wave.animate.shift(UP*2).set_color(BLUE))
        self.play(transverse_wave.animate.shift(DOWN*4).set_color(BLUE))
        self.play(FadeOut(transverse_wave), FadeOut(transverse_wave_label))

        self.wait(1)

        # Longitudinal Wave
        dots = VGroup(*[Dot(radius=0.1).shift(RIGHT*i*0.5) for i in range(-6, 7)])
        original_positions = [dot.get_center() for dot in dots]
        longitudinal_wave_label = Text(""Longitudinal Wave (e.g., sound)"").to_edge(UP)

        def update_dots(dots):
            for i, dot in enumerate(dots):
                dot.move_to(original_positions[i] + np.array([np.sin(i + self.time*3)*0.2, 0, 0]))

        self.play(Write(longitudinal_wave_label))
        self.add(dots)
        dots.add_updater(update_dots)
        self.wait(4)
        dots.remove_updater(update_dots)
        self.play(FadeOut(dots), FadeOut(longitudinal_wave_label))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Wave Interference Patterns""
    animation:  animate two wave sources emitting waves and show the resulting interference pattern, demonstrating both constructive and destructive interference.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaveInterference(Scene):
    def construct(self):
        title = Text(""Wave Interference Patterns"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        source1 = Dot(point=LEFT*2, color=BLUE)
        source2 = Dot(point=RIGHT*2, color=RED)
        self.play(FadeIn(source1), FadeIn(source2))
        self.wait(1)

        waves1 = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=BLUE).move_to(source1.get_center()) for i in range(1, 20)])
        waves2 = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=RED).move_to(source2.get_center()) for i in range(1, 20)])

        def update_wave1(wave, dt):
            wave.scale(1.05)
            wave.set_stroke(opacity=max(0, wave.stroke_opacity - 0.05))

        def update_wave2(wave, dt):
            wave.scale(1.05)
            wave.set_stroke(opacity=max(0, wave.stroke_opacity - 0.05))

        for wave in waves1:
            wave.add_updater(update_wave1)
            self.add(wave)
            self.wait(0.1)
            wave.remove_updater(update_wave1)

        for wave in waves2:
            wave.add_updater(update_wave2)
            self.add(wave)
            self.wait(0.1)
            wave.remove_updater(update_wave2)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Coulomb's Law Visualization""
animation:  animate two charged particles with opposite charges to demonstrate the force of attraction between them. Next, animate two charged particles with the same charge to demonstrate the force of repulsion between them, illustrating Coulomb's Law.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CoulombsLawVisualization(Scene):
    def construct(self):
        title = Text(""Coulomb's Law Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Attraction
        positive_charge = Circle(color=RED, fill_opacity=1).shift(LEFT*2)
        positive_text = Text(""+"", color=WHITE).scale(2).move_to(positive_charge.get_center())
        negative_charge = Circle(color=BLUE, fill_opacity=1).shift(RIGHT*2)
        negative_text = Text(""-"", color=WHITE).scale(2).move_to(negative_charge.get_center())

        self.play(GrowFromCenter(positive_charge), Write(positive_text),
                  GrowFromCenter(negative_charge), Write(negative_text))
        self.wait(1)
        self.play(positive_charge.animate.shift(RIGHT*1.5), negative_charge.animate.shift(LEFT*1.5))
        self.wait(1)
        self.play(FadeOut(positive_charge), FadeOut(positive_text),
                  FadeOut(negative_charge), FadeOut(negative_text))

        # Repulsion
        positive_charge_1 = Circle(color=RED, fill_opacity=1).shift(LEFT*2 + DOWN*2)
        positive_text_1 = Text(""+"", color=WHITE).scale(2).move_to(positive_charge_1.get_center())
        positive_charge_2 = Circle(color=RED, fill_opacity=1).shift(RIGHT*2 + DOWN*2)
        positive_text_2 = Text(""+"", color=WHITE).scale(2).move_to(positive_charge_2.get_center())

        self.play(GrowFromCenter(positive_charge_1), Write(positive_text_1),
                  GrowFromCenter(positive_charge_2), Write(positive_text_2))
        self.wait(1)
        self.play(positive_charge_1.animate.shift(RIGHT*0.5), positive_charge_2.animate.shift(LEFT*0.5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Number Line Arithmetic""
    animation:  animate a point moving along a number line to the right for addition and to the left for subtraction, illustrating basic arithmetic operations.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NumberLineArithmetic(Scene):
    def construct(self):
        title = Text(""Number Line Arithmetic"").scale(0.9)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[-5, 5, 1], length=10, color=WHITE, include_numbers=True)
        self.play(Create(number_line))
        dot = Dot(point=number_line.n2p(0), color=YELLOW)
        self.play(FadeIn(dot))

        # Addition
        self.play(dot.animate.move_to(number_line.n2p(2)))
        self.wait(1)

        # Subtraction
        self.play(dot.animate.move_to(number_line.n2p(-1)))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Angles""
animation:  animate the formation of angles by rotating one line around a fixed point where it intersects another line. Highlight acute, obtuse, and right angles to illustrate the concept of angles.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class UnderstandingAngles(Scene):
    def construct(self):
        title = Text(""Understanding Angles"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create lines
        line1 = Line(ORIGIN, 2*RIGHT, color=WHITE)
        line2 = Line(ORIGIN, 2*UP, color=WHITE).rotate_about_origin(PI/4)
        dot = Dot(ORIGIN, color=YELLOW)

        self.play(Create(line1), Create(dot))
        self.play(Rotate(line2, angle=-PI/4, about_point=ORIGIN), run_time=2)
        self.wait(1)

        # Acute angle
        acute_angle = Angle(line1, line2, radius=0.5, color=GREEN)
        self.play(Create(acute_angle))
        self.wait(1)

        # Right angle
        self.play(Rotate(line2, angle=PI/4, about_point=ORIGIN), run_time=2)
        right_angle = RightAngle(line1, line2, length=0.5, color=BLUE)
        self.play(Transform(acute_angle, right_angle))
        self.wait(1)

        # Obtuse angle
        self.play(Rotate(line2, angle=PI/2, about_point=ORIGIN), run_time=2)
        obtuse_angle = Angle(line1, line2, radius=0.5, other_angle=True, color=RED)
        self.play(Transform(acute_angle, obtuse_angle))
        self.wait(2)

        self.play(FadeOut(line1), FadeOut(line2), FadeOut(dot), FadeOut(acute_angle))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Simple Harmonic Motion""
animation:  animate a pendulum swinging back and forth or a mass on a spring oscillating to demonstrate the basic idea of periodic motion.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SimpleHarmonicMotion(Scene):
    def construct(self):
        title = Text(""Simple Harmonic Motion"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Pendulum setup
        pivot = Dot(ORIGIN).shift(UP*2)
        bob = Dot().shift(DOWN*2)
        rod = Line(pivot.get_center(), bob.get_center()).set_stroke(width=2)
        pendulum = VGroup(pivot, rod, bob)

        def update_pendulum(mob, dt):
            rate = 2  # Speed of oscillation
            mob.rotate(rate * dt, about_point=pivot.get_center())

        pendulum.add_updater(update_pendulum)
        self.add(pendulum)
        self.wait(10)  # Let it swing for 10 seconds
        pendulum.clear_updaters()
        self.play(FadeOut(pendulum))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Visualizing Prime Numbers""
animation:  display a grid of numbers where prime numbers are highlighted in one color and non-prime numbers in another color. Optionally, animate the sieve of Eratosthenes algorithm to demonstrate how prime numbers are identified.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

class PrimeVisualization(Scene):
    def construct(self):
        title = Text(""Visualizing Prime Numbers"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        grid = VGroup()
        for i in range(1, 101):
            color = GREEN if is_prime(i) else RED
            number = Text(str(i), color=color).scale(0.5)
            grid.add(number)

        grid.arrange_in_grid(rows=10, cols=10, buff=0.5)
        self.play(Write(grid), run_time=3)
        self.wait(2)

        # Optional: Animate Sieve of Eratosthenes
        primes = []
        for i in range(2, 101):
            if is_prime(i):
                primes.append(i)
                for j in range(i*2, 101, i):
                    grid[j-1].set_color(BLUE)
                self.play(*[grid[j-1].animate.set_color(BLUE) for j in range(i*2, 101, i)], run_time=0.5)
                self.wait(0.5)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""The Water Cycle in Nature""
    animation:  animate clouds forming, raining, and the rainwater collecting back into a body of water, illustrating the process of evaporation, condensation, precipitation, and collection in the water cycle.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaterCycleScene(Scene):
    def construct(self):
        # Title
        title = Text(""The Water Cycle in Nature"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Clouds forming (Condensation)
        cloud1 = Circle(color=WHITE).shift(LEFT*2)
        cloud2 = Circle(color=WHITE).shift(LEFT*2 + UP*0.5)
        cloud3 = Circle(color=WHITE).shift(RIGHT*2)
        cloud4 = Circle(color=WHITE).shift(RIGHT*2 + UP*0.5)
        clouds = VGroup(cloud1, cloud2, cloud3, cloud4).scale(0.5)
        self.play(FadeIn(clouds))
        self.wait(2)

        # Rain (Precipitation)
        raindrops = VGroup(*[Line(start=3*UP + i*RIGHT*0.5, end=2*DOWN + i*RIGHT*0.5) for i in range(-5, 6)])
        self.play(ShowCreation(raindrops), run_time=2)
        self.wait(1)
        self.play(FadeOut(raindrops))

        # Water collection (Collection)
        water = Rectangle(width=FRAME_WIDTH, height=1, color=BLUE).shift(DOWN*1.5)
        self.play(FadeIn(water))
        self.wait(1)

        # Evaporation
        evaporation = Text(""Evaporation"", font_size=24).shift(UP*3)
        self.play(Write(evaporation))
        self.wait(2)
        self.play(FadeOut(evaporation), FadeOut(water), FadeOut(clouds))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Electric Circuit Demonstration""
animation:  animate a basic electrical circuit consisting of a battery, resistor, and a light bulb. Show the flow of current from the battery through the resistor, lighting up the bulb to demonstrate the circuit in action.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ElectricCircuitDemo(Scene):
    def construct(self):
        title = Text(""Electric Circuit Demonstration"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Drawing the circuit components
        battery = Rectangle(height=1, width=0.5).set_fill(BLUE, opacity=0.5)
        battery_text = Text(""Battery"", font_size=24).next_to(battery, UP)
        resistor = Rectangle(height=0.5, width=1).set_fill(RED, opacity=0.5)
        resistor_text = Text(""Resistor"", font_size=24).next_to(resistor, UP)
        bulb = Circle(radius=0.5).set_fill(YELLOW, opacity=0.5)
        bulb_text = Text(""Bulb"", font_size=24).next_to(bulb, UP)

        # Positioning
        battery.shift(LEFT * 3)
        resistor.next_to(battery, RIGHT, buff=1)
        bulb.next_to(resistor, RIGHT, buff=1)

        # Drawing wires
        wire1 = Line(battery.get_right(), resistor.get_left())
        wire2 = Line(resistor.get_right(), bulb.get_center())
        wire3 = Line(bulb.get_center(), battery.get_left())

        self.play(FadeIn(battery, battery_text, resistor, resistor_text, bulb, bulb_text, wire1, wire2, wire3))

        # Animate current flow
        current_dots = [Dot(color=RED).move_to(wire1.get_start()) for _ in range(5)]
        for dot in current_dots:
            self.add(dot)
            self.play(dot.animate(rate_func=linear).move_to(wire2.get_end()), run_time=2)
            self.play(dot.animate(rate_func=linear).move_to(wire3.get_end()), run_time=2)
            self.remove(dot)

        # Light up the bulb
        self.play(bulb.animate.set_fill(YELLOW, opacity=1))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Gravity in Action""
animation:  animate objects of different masses falling towards the Earth at the same rate, disregarding air resistance, to illustrate the concept of gravity.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class GravityInAction(Scene):
    def construct(self):
        title = Text(""Gravity in Action"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        earth = Circle(color=BLUE, fill_opacity=1).scale(0.5).shift(DOWN*3)
        earth_text = Text(""Earth"", color=WHITE).scale(0.5).next_to(earth, DOWN)
        self.add(earth, earth_text)

        # Objects with different masses
        object1 = Circle(color=RED, fill_opacity=1).scale(0.2).shift(UP*3 + LEFT*3)
        object2 = Square(color=YELLOW, fill_opacity=1).scale(0.3).shift(UP*3)
        object3 = Triangle(color=GREEN, fill_opacity=1).scale(0.25).shift(UP*3 + RIGHT*3)

        self.play(FadeIn(object1, object2, object3))
        self.wait(1)

        # Animate objects falling at the same rate
        self.play(object1.animate.shift(DOWN*6), object2.animate.shift(DOWN*6), object3.animate.shift(DOWN*6), run_time=2, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Seasons Explained""
    animation:  animate the Earth's tilt and orbit around the Sun, demonstrating how the angle of sunlight changes over the course of a year and how this leads to the occurrence of seasons.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SeasonsExplained(Scene):
    def construct(self):
        # Title
        title = Text(""Seasons Explained"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup
        sun = Circle(radius=0.5, color=YELLOW).shift(LEFT*3)
        earth = Circle(radius=0.2, color=BLUE).shift(RIGHT*3)
        orbit_path = Ellipse(width=6, height=3, color=WHITE).shift(LEFT*3)

        # Earth's tilt
        tilt_line = Line(earth.get_top(), earth.get_bottom(), color=WHITE)
        earth.add(tilt_line)
        earth_tilt = earth.copy().rotate(23.5 * DEGREES, about_point=earth.get_center())

        # Animation
        self.play(Create(sun), Create(orbit_path), Transform(earth, earth_tilt))
        self.play(earth.animate.move_to(orbit_path.point_from_proportion(0)))
        self.play(MoveAlongPath(earth, orbit_path), rate_func=linear, run_time=8)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Decimal to Binary Conversion""
animation:  animate the conversion of decimal numbers to binary by lighting up bits (0s and 1s) in a row to represent different decimal values.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DecimalToBinary(Scene):
    def construct(self):
        title = Text(""Decimal to Binary Conversion"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        numbers = [1, 2, 3, 4, 5, 6, 7, 8]
        for number in numbers:
            binary_string = format(number, 'b')
            binary_text = Text(binary_string, font_size=64)
            self.play(Write(binary_text))
            self.wait(1)
            self.play(FadeOut(binary_text))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Caesar Cipher Encryption and Decryption""
animation:  animate the process of encrypting a message using a Caesar cipher by shifting letters in the alphabet to the right, and decrypting the message by shifting letters to the left, visualizing simple data encryption and decryption.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CaesarCipher(Scene):
    def construct(self):
        title = Text(""Caesar Cipher Encryption and Decryption"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Encryption
        plaintext = Text(""HELLO"", font_size=48)
        self.play(Write(plaintext))
        self.wait(1)

        shift_text = Text(""Shift: 3"", font_size=36).next_to(plaintext, DOWN)
        self.play(Write(shift_text))
        self.wait(1)

        encrypted_text = Text(""KHOOR"", font_size=48).next_to(shift_text, DOWN)
        self.play(Transform(plaintext, encrypted_text))
        self.wait(2)

        # Decryption
        decrypt_text = Text(""Decrypt"", font_size=36).next_to(encrypted_text, DOWN)
        self.play(Write(decrypt_text))
        self.wait(1)

        decrypted_text = Text(""HELLO"", font_size=48).move_to(plaintext.get_center())
        self.play(Transform(encrypted_text, decrypted_text))
        self.wait(2)

        self.play(FadeOut(plaintext), FadeOut(shift_text), FadeOut(decrypted_text), FadeOut(decrypt_text))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Pythagorean Theorem Visualization""
animation:  animate a right-angled triangle with squares drawn on each side. As the triangle changes size, show that the sum of the areas of the squares on the two shorter sides always equals the area of the square on the longest side, illustrating the Pythagorean Theorem.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PythagoreanTheorem(Scene):
    def construct(self):
        title = Text(""Pythagorean Theorem Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a right-angled triangle
        triangle = Polygon(ORIGIN, 4*RIGHT, 3*UP, color=WHITE)
        square_hypotenuse = Square(side_length=5).move_to(triangle.get_center(), aligned_edge=DL).rotate_about_origin(triangle.get_angle()).set_color(BLUE)
        square_adjacent = Square(side_length=4).next_to(triangle, DOWN, buff=0).set_color(RED)
        square_opposite = Square(side_length=3).next_to(triangle, LEFT, buff=0).set_color(GREEN)

        self.play(Create(triangle))
        self.play(Create(square_hypotenuse), Create(square_adjacent), Create(square_opposite))
        self.wait(2)

        # Animate the triangle changing size
        for factor in [0.8, 1.2, 1.0]:
            new_triangle = Polygon(ORIGIN, 4*RIGHT*factor, 3*UP*factor, color=WHITE)
            new_square_hypotenuse = Square(side_length=5*factor).move_to(new_triangle.get_center(), aligned_edge=DL).rotate_about_origin(new_triangle.get_angle()).set_color(BLUE)
            new_square_adjacent = Square(side_length=4*factor).next_to(new_triangle, DOWN, buff=0).set_color(RED)
            new_square_opposite = Square(side_length=3*factor).next_to(new_triangle, LEFT, buff=0).set_color(GREEN)

            self.play(Transform(triangle, new_triangle), Transform(square_hypotenuse, new_square_hypotenuse), Transform(square_adjacent, new_square_adjacent), Transform(square_opposite, new_square_opposite), run_time=2)
            self.wait(1)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Doppler Effect Simulation""
animation:  animate a sound source (e.g., an ambulance) moving past an observer. Show the sound waves being compressed in front of the source and stretched out behind it, illustrating the change in pitch heard by the observer.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DopplerEffectSimulation(Scene):
    def construct(self):
        title = Text(""Doppler Effect Simulation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Sound source - Ambulance
        ambulance = Circle(color=RED, fill_opacity=1).scale(0.5)
        ambulance_text = Text(""Ambulance"", font_size=24).next_to(ambulance, DOWN)
        ambulance_group = VGroup(ambulance, ambulance_text)

        # Observer
        observer = Dot(color=BLUE).shift(4*RIGHT)
        observer_text = Text(""Observer"", font_size=24).next_to(observer, DOWN)
        observer_group = VGroup(observer, observer_text)

        self.play(FadeIn(ambulance_group), FadeIn(observer_group))
        self.wait(1)

        # Sound waves
        waves = VGroup()
        for i in range(5):
            wave = Circle(color=BLUE, fill_opacity=0.2).scale(i*0.5)
            wave.move_to(ambulance.get_center())
            waves.add(wave)

        def update_waves(waves):
            new_waves = VGroup()
            for wave in waves:
                new_wave = wave.copy()
                new_wave.scale(1.1, about_point=ambulance.get_center())
                if new_wave.width < 0.1 or new_wave.height < 0.1:
                    continue
                new_waves.add(new_wave)
            return new_waves

        self.play(ambulance_group.animate.shift(8*LEFT), UpdateFromFunc(waves, update_waves), run_time=4, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Magnetic Fields Interaction""
animation:  animate a bar magnet with field lines surrounding it. Introduce a second magnet and show how the field lines interact, demonstrating attraction and repulsion between the two magnets.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MagneticFieldsInteraction(Scene):
    def construct(self):
        title = Text(""Magnetic Fields Interaction"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Magnet 1
        magnet1 = Rectangle(color=RED, height=1, width=2).shift(LEFT*3)
        magnet1_label_n = Text(""N"", color=WHITE).scale(0.5).next_to(magnet1, UP, buff=0.1)
        magnet1_label_s = Text(""S"", color=WHITE).scale(0.5).next_to(magnet1, DOWN, buff=0.1)
        self.play(GrowFromCenter(magnet1), Write(magnet1_label_n), Write(magnet1_label_s))

        # Field lines for Magnet 1
        field_lines1 = VGroup(*[ArcBetweenPoints(start_point=magnet1.get_top() + UP*0.2 + LEFT*0.2*i,
                                                 end_point=magnet1.get_bottom() + DOWN*0.2 + LEFT*0.2*i,
                                                 angle=-TAU/4) for i in range(6)])
        self.play(ShowCreation(field_lines1))

        # Magnet 2
        magnet2 = Rectangle(color=BLUE, height=1, width=2).shift(RIGHT*3)
        magnet2_label_n = Text(""N"", color=WHITE).scale(0.5).next_to(magnet2, UP, buff=0.1)
        magnet2_label_s = Text(""S"", color=WHITE).scale(0.5).next_to(magnet2, DOWN, buff=0.1)
        self.play(GrowFromCenter(magnet2), Write(magnet2_label_n), Write(magnet2_label_s))

        # Field lines for Magnet 2
        field_lines2 = VGroup(*[ArcBetweenPoints(start_point=magnet2.get_top() + UP*0.2 + RIGHT*0.2*i,
                                                 end_point=magnet2.get_bottom() + DOWN*0.2 + RIGHT*0.2*i,
                                                 angle=TAU/4) for i in range(6)])
        self.play(ShowCreation(field_lines2))

        # Interaction
        self.play(magnet2.animate.shift(LEFT*2.5), rate_func=there_and_back, run_time=2)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Projectile Motion Simulation""
    animation:  animate an object being launched at an angle, showing its path as a parabola. The horizontal motion should be constant, while the vertical motion should be affected by gravity, causing the object to follow a curved trajectory.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ProjectileMotion(Scene):
    def construct(self):
        title = Text(""Projectile Motion Simulation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Constants for the projectile motion
        velocity = 5
        angle = 45
        gravity = 9.8
        time_of_flight = 2 * velocity * np.sin(np.radians(angle)) / gravity
        max_height = (velocity**2) * (np.sin(np.radians(angle))**2) / (2 * gravity)
        range = velocity * np.cos(np.radians(angle)) * time_of_flight

        # Creating the trajectory path
        trajectory = FunctionGraph(
            lambda x: x * np.tan(np.radians(angle)) - (gravity * x**2) / (2 * velocity**2 * np.cos(np.radians(angle))**2),
            x_range=[0, range],
            color=BLUE
        )

        # Creating the object
        object = Dot(radius=0.1, color=YELLOW)
        object.move_to(trajectory.points[0])

        # Animating the object along the path
        self.play(MoveAlongPath(object, trajectory, rate_func=linear), run_time=time_of_flight)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Photosynthesis in Action""
    animation:  animate a plant absorbing sunlight, CO2, and water to produce glucose and oxygen. Show the chloroplasts in the leaves and the chemical reaction taking place, illustrating the process of photosynthesis.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PhotosynthesisInAction(Scene):
    def construct(self):
        # Title
        title = Text(""Photosynthesis in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Elements of Photosynthesis
        sun = Circle(color=YELLOW, fill_opacity=1).scale(0.5).shift(UP*3 + LEFT*4)
        sun_text = Text(""Sunlight"", color=BLACK).scale(0.3).next_to(sun, DOWN)
        co2 = Text(""CO2"", color=WHITE).scale(0.5).shift(UP*3 + RIGHT*4)
        water = SVGMobject().set(width=0.5).move_to(DOWN*2 + LEFT*4)
        water_text = Text(""H2O"", color=WHITE).scale(0.5).next_to(water, DOWN)

        # Plant
        plant = Line(ORIGIN, DOWN*2, color=GREEN).shift(DOWN)
        leaf_left = Ellipse(width=1.5, height=1, color=GREEN, fill_opacity=1).shift(DOWN + LEFT*0.75)
        leaf_right = Ellipse(width=1.5, height=1, color=GREEN, fill_opacity=1).shift(DOWN + RIGHT*0.75)
        chloroplasts = VGroup(*[Dot(color=DARK_GREEN).move_to(leaf_left.get_center() + point) for point in [UP*0.3, DOWN*0.3, LEFT*0.3, RIGHT*0.3]])

        # Chemical Reaction
        reactants = Text(""6CO2 + 6H2O + Light -> C6H12O6 + 6O2"", color=WHITE).scale(0.5).shift(DOWN*3)

        # Animation
        self.play(FadeIn(sun), FadeIn(sun_text), FadeIn(co2), FadeIn(water), FadeIn(water_text))
        self.play(GrowFromCenter(plant), GrowFromCenter(leaf_left), GrowFromCenter(leaf_right), FadeIn(chloroplasts))
        self.wait(1)
        self.play(ReplacementTransform(co2.copy(), chloroplasts), ReplacementTransform(water_text.copy(), chloroplasts), ReplacementTransform(sun_text.copy(), chloroplasts))
        self.wait(1)
        self.play(Write(reactants))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Archimedes' Principle Illustrated""
animation:  animate an object being submerged in water. Show the water level rising and a force (buoyant force) pushing up on the object. Illustrate that the buoyant force equals the weight of the water displaced by the object.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ArchimedesPrinciple(Scene):
    def construct(self):
        title = Text(""Archimedes' Principle Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Water container
        container = Rectangle(height=4, width=6).set_fill(BLUE, opacity=0.5).set_stroke(width=2)
        self.play(Create(container))

        # Object
        object = Square(side_length=1).set_fill(GRAY, opacity=1).move_to(3*UP)
        self.play(Create(object))
        self.play(object.animate.shift(2.5*DOWN), run_time=2)

        # Water level rise animation
        displaced_water = Rectangle(height=0.3, width=6).set_fill(BLUE, opacity=0.8).next_to(container, UP, buff=0)
        self.play(container.animate.set_fill(BLUE, opacity=0.8), GrowFromCenter(displaced_water))

        # Buoyant force arrow
        buoyant_force = Arrow(start=object.get_center(), end=object.get_center() + 1*UP, buff=0.1, color=YELLOW)
        buoyant_force_label = Text(""Buoyant Force"", font_size=24).next_to(buoyant_force, UP, buff=0.1)
        self.play(GrowArrow(buoyant_force), Write(buoyant_force_label))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Balancing Chemical Equations""
animation:  animate reactant molecules combining to form product molecules, while ensuring that the number of each type of atom remains constant throughout the reaction.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class BalancingChemicalEquations(Scene):
    def construct(self):
        title = Text(""Balancing Chemical Equations"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Reactants
        reactant1 = Circle(color=BLUE).scale(0.5)
        reactant1_text = Text(""H"", color=WHITE).scale(0.5)
        reactant1_group = VGroup(reactant1, reactant1_text)

        reactant2 = Circle(color=RED).scale(0.5).next_to(reactant1, RIGHT, buff=0.1)
        reactant2_text = Text(""O"", color=WHITE).scale(0.5)
        reactant2_group = VGroup(reactant2, reactant2_text)

        reactants = VGroup(reactant1_group, reactant2_group).move_to(LEFT*3)

        # Products
        product1 = Circle(color=GREEN).scale(0.5)
        product1_text = Text(""H2O"", color=WHITE).scale(0.5)
        product1_group = VGroup(product1, product1_text).move_to(RIGHT*3)

        self.play(ShowCreation(reactant1), Write(reactant1_text), ShowCreation(reactant2), Write(reactant2_text))
        self.wait(1)
        self.play(Transform(reactant1_group, product1_group), Transform(reactant2_group, product1_group.copy().next_to(product1_group, RIGHT, buff=0.1)))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Centripetal Force in Action""
    animation:  animate an object moving in a circular path, with a force constantly pulling it towards the center of the circle, demonstrating the concept of centripetal force.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CentripetalForceScene(Scene):
    def construct(self):
        title = Text(""Centripetal Force in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        circle = Circle(radius=2)
        dot = Dot(circle.get_start())
        arrow = Arrow(dot.get_center(), circle.get_center(), buff=0)

        self.play(Create(circle))
        self.play(FadeIn(dot))
        self.play(ShowCreation(arrow))
        self.play(MoveAlongPath(dot, circle), rate_func=linear, run_time=4)
        self.play(FadeOut(dot), FadeOut(circle), FadeOut(arrow))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Resonance Phenomenon""
animation:  animate a tuning fork vibrating at its natural frequency. Next, introduce a second tuning fork of the same frequency nearby and show it starting to vibrate due to resonance between the two forks.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ResonancePhenomenon(Scene):
    def construct(self):
        # Title slide
        title = Text(""Resonance Phenomenon"", font_size=48)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # First tuning fork
        fork1 = Line(ORIGIN, UP * 2).shift(LEFT * 2)
        fork1_head = VGroup(
            Line(fork1.get_end(), fork1.get_end() + RIGHT * 0.5),
            Line(fork1.get_end(), fork1.get_end() + LEFT * 0.5)
        )
        tuning_fork1 = VGroup(fork1, fork1_head)

        # Second tuning fork
        fork2 = Line(ORIGIN, UP * 2).shift(RIGHT * 2)
        fork2_head = VGroup(
            Line(fork2.get_end(), fork2.get_end() + RIGHT * 0.5),
            Line(fork2.get_end(), fork2.get_end() + LEFT * 0.5)
        )
        tuning_fork2 = VGroup(fork2, fork2_head)

        self.play(ShowCreation(tuning_fork1), ShowCreation(tuning_fork2))
        self.wait(1)

        # Animate first tuning fork vibrating
        for _ in range(4):
            self.play(tuning_fork1.animate.shift(RIGHT * 0.1), run_time=0.1)
            self.play(tuning_fork1.animate.shift(LEFT * 0.2), run_time=0.2)
            self.play(tuning_fork1.animate.shift(RIGHT * 0.1), run_time=0.1)

        self.wait(1)

        # Animate second tuning fork starting to vibrate due to resonance
        for _ in range(4):
            self.play(tuning_fork2.animate.shift(RIGHT * 0.1), run_time=0.1)
            self.play(tuning_fork2.animate.shift(LEFT * 0.2), run_time=0.2)
            self.play(tuning_fork2.animate.shift(RIGHT * 0.1), run_time=0.1)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Ohm's Law Illustrated""
animation:  animate a circuit with a battery, a resistor, and current flowing through the circuit. Show that the current is directly proportional to the voltage and inversely proportional to the resistance, as per Ohm's Law.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class OhmsLaw(Scene):
    def construct(self):
        title = Text(""Ohm's Law Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Circuit components
        battery = Line(ORIGIN, UP).set_color(YELLOW)
        battery.shift(LEFT*2)
        resistor = Rectangle(width=1, height=0.5).set_color(RED)
        resistor.next_to(battery, RIGHT, buff=1)
        wire1 = Line(battery.get_right(), resistor.get_left()).set_color(GREY)
        wire2 = Line(resistor.get_right(), resistor.get_right() + RIGHT).set_color(GREY)
        wire3 = Line(battery.get_left(), battery.get_left() + LEFT).set_color(GREY)
        wire4 = Line(battery.get_left() + LEFT, resistor.get_right() + RIGHT).set_color(GREY)
        circuit = VGroup(battery, resistor, wire1, wire2, wire3, wire4)

        # Current flow
        current_dots = VGroup(*[Dot(radius=0.05, color=BLUE).move_to(wire4.get_start() + RIGHT*i*0.2) for i in range(5)])
        current_animation = Succession(*[ApplyMethod(dot.move_to, wire4.get_start() + RIGHT*(i+1)*0.2) for i, dot in enumerate(current_dots)], lag_ratio=1)

        self.play(FadeIn(circuit))
        self.wait(1)
        self.play(ShowCreation(current_dots), run_time=1)
        self.play(current_animation, run_time=2, rate_func=linear)
        self.wait(1)

        # Ohm's Law Visualization
        ohms_law_text = Text(""V = I * R"", font_size=36)
        ohms_law_text.to_edge(UP)

        increasing_voltage = Text(""Increasing Voltage"", font_size=24).next_to(battery, DOWN, buff=0.5)
        decreasing_resistance = Text(""Decreasing Resistance"", font_size=24).next_to(resistor, DOWN, buff=0.5)

        self.play(Write(ohms_law_text))
        self.wait(1)
        self.play(Write(increasing_voltage))
        self.play(battery.stretch, 1.5, 0, {""about_edge"": UP})
        self.wait(1)
        self.play(ReplacementTransform(increasing_voltage, decreasing_resistance))
        self.play(resistor.stretch, 0.5, 0, {""about_edge"": RIGHT})
        self.wait(2)

        self.play(FadeOut(VGroup(circuit, current_dots, ohms_law_text, decreasing_resistance)))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Electromagnetic Induction Demonstration""
    animation:  animate a magnet moving through a coil of wire, showing the induced current flowing in the coil as a result of electromagnetic induction.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ElectromagneticInduction(Scene):
    def construct(self):
        title = Text(""Electromagnetic Induction Demonstration"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Coil
        coil = VGroup(*[Circle(arc_center=[i*0.2, 0, 0], radius=0.5) for i in range(-10, 11)])
        coil.set_color(BLUE)
        self.play(ShowCreation(coil))
        
        # Magnet
        magnet = Rectangle(width=1, height=0.5, color=RED)
        magnet_text = Text(""N"", font_size=24).next_to(magnet, LEFT, buff=0.1)
        magnet_text2 = Text(""S"", font_size=24).next_to(magnet, RIGHT, buff=0.1)
        magnet_group = VGroup(magnet, magnet_text, magnet_text2)
        self.play(FadeIn(magnet_group))
        
        # Animate magnet moving through the coil
        self.play(magnet_group.animate.shift(RIGHT*4), rate_func=there_and_back, run_time=4)
        
        # Induced current flow
        current_flow = CurvedArrow(start_point=[-2, 0.5, 0], end_point=[2, 0.5, 0], color=YELLOW)
        self.play(ShowCreation(current_flow))
        self.wait(2)
        self.play(FadeOut(coil), FadeOut(magnet_group), FadeOut(current_flow))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Newton's Third Law Illustrated""
animation:  animate two objects, such as a book and a table, interacting with each other. Show equal and opposite forces acting on both objects, demonstrating Newton's Third Law of motion.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NewtonsThirdLaw(Scene):
    def construct(self):
        title = Text(""Newton's Third Law Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create objects
        book = Square(color=BLUE, fill_opacity=1).scale(0.5)
        table = Rectangle(width=3, height=0.5, color=GREEN, fill_opacity=1).next_to(book, DOWN, buff=0)

        book_text = Text(""Book"", color=WHITE).scale(0.5).move_to(book)
        table_text = Text(""Table"", color=WHITE).scale(0.5).move_to(table)

        # Add objects to scene
        self.play(FadeIn(book), FadeIn(table), FadeIn(book_text), FadeIn(table_text))
        self.wait(1)

        # Forces
        force_book = Arrow(book.get_top(), book.get_top() + UP, buff=0, color=RED)
        force_table = Arrow(table.get_top(), table.get_top() + DOWN, buff=0, color=YELLOW)

        force_book_label = Text(""Force on Book"", color=RED).scale(0.5).next_to(force_book, UP, buff=0.1)
        force_table_label = Text(""Force on Table"", color=YELLOW).scale(0.5).next_to(force_table, DOWN, buff=0.1)

        self.play(GrowArrow(force_book), GrowArrow(force_table), Write(force_book_label), Write(force_table_label))
        self.wait(2)

        # Demonstrating Newton's Third Law
        self.play(book.shift, UP*0.5, table.shift, DOWN*0.5)
        self.wait(1)

        self.play(book.shift, DOWN*0.5, table.shift, UP*0.5)
        self.wait(2)

        self.play(FadeOut(book), FadeOut(table), FadeOut(book_text), FadeOut(table_text),
                  FadeOut(force_book), FadeOut(force_table), FadeOut(force_book_label), FadeOut(force_table_label))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Normal Distribution Visualization""
animation:  animate a normal distribution curve with the mean at the center and the standard deviations marked off. Show a point moving along the curve to represent a value and its corresponding probability.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NormalDistributionVisualization(Scene):
    def construct(self):
        title = Text(""Normal Distribution Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        axes = Axes(
            x_range=[-4, 4, 1],
            y_range=[0, 0.5, 0.1],
            axis_config={""color"": BLUE},
        )

        mean = 0
        std_dev = 1
        curve = axes.plot(lambda x: np.exp(-0.5 * ((x - mean) / std_dev) ** 2) / (std_dev * np.sqrt(2 * np.pi)), color=WHITE)
        curve_label = axes.get_graph_label(curve, label='\\sigma')

        self.play(Create(axes), Write(curve_label))
        self.play(Create(curve))
        self.wait(1)

        dot = Dot(color=RED).move_to(axes.c2p(0, 0))
        self.play(FadeIn(dot))

        def update_dot(mob, alpha):
            x = interpolate(-3, 3, alpha)
            y = np.exp(-0.5 * ((x - mean) / std_dev) ** 2) / (std_dev * np.sqrt(2 * np.pi))
            mob.move_to(axes.c2p(x, y))

        self.play(UpdateFromAlphaFunc(dot, update_dot), run_time=4, rate_func=there_and_back)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Radioactive Decay Simulation""
animation:  animate a group of unstable nuclei decaying over time, with the number of undecayed nuclei decreasing exponentially to illustrate radioactive decay.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RadioactiveDecaySimulation(Scene):
    def construct(self):
        title = Text(""Radioactive Decay Simulation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parameters
        start_nuclei = 50
        half_life = 2  # seconds
        decay_rate = 0.5  # half per half_life
        simulation_time = 8  # seconds

        # Create initial nuclei
        nuclei = VGroup(*[Dot(radius=0.05, color=BLUE) for _ in range(start_nuclei)])
        nuclei.arrange_in_grid(rows=5, buff=0.5)
        self.play(ShowCreation(nuclei))
        self.wait(1)

        # Simulate decay
        for t in range(1, simulation_time + 1):
            decayed = int(start_nuclei * (decay_rate ** (t / half_life)))
            to_decay = start_nuclei - decayed
            start_nuclei = decayed

            if to_decay > 0:
                decaying_nuclei = nuclei[:to_decay]
                self.play(decaying_nuclei.animate.set_opacity(0.2), rate_func=linear, run_time=1)
            self.wait(1)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Electric Field Visualization""
animation:  animate a positive charge and a negative charge on the screen, with electric field lines emanating from the positive charge and terminating on the negative charge, visually illustrating the concept of an electric field.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ElectricFieldVisualization(Scene):
    def construct(self):
        title = Text(""Electric Field Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Charges
        positive_charge = Circle(color=RED, fill_opacity=1).scale(0.5)
        positive_charge_text = Text(""+"", font_size=48).move_to(positive_charge)
        positive_charge_group = VGroup(positive_charge, positive_charge_text).shift(LEFT*2)

        negative_charge = Circle(color=BLUE, fill_opacity=1).scale(0.5)
        negative_charge_text = Text(""-"", font_size=48).move_to(negative_charge)
        negative_charge_group = VGroup(negative_charge, negative_charge_text).shift(RIGHT*2)

        self.play(FadeIn(positive_charge_group), FadeIn(negative_charge_group))
        self.wait(1)

        # Electric field lines
        field_lines = []
        for angle in np.linspace(0, 2*np.pi, 16, endpoint=False):
            start_point = positive_charge.get_center() + np.array([np.cos(angle), np.sin(angle), 0])
            end_point = negative_charge.get_center() + np.array([np.cos(angle+np.pi), np.sin(angle+np.pi), 0])*0.5
            line = Arrow(start_point, end_point, buff=0.1)
            field_lines.append(line)

        self.play(*[GrowArrow(line) for line in field_lines], run_time=2)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Torque""
animation:  animate a wrench turning a bolt, with the force applied at a distance from the axis of rotation. Show how the concept of torque is calculated as the product of force and distance.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class TorqueAnimation(Scene):
    def construct(self):
        title = Text(""Understanding Torque"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup wrench and bolt
        wrench = Line(ORIGIN, RIGHT * 2, color=BLUE).shift(LEFT)
        bolt = Circle(radius=0.2, color=WHITE).shift(RIGHT * 2)
        force_arrow = Arrow(start=wrench.get_end(), end=wrench.get_end() + UP * 1, buff=0, color=YELLOW)
        distance_line = DashedLine(start=bolt.get_center(), end=wrench.get_end(), color=PURPLE)

        # Labels
        force_label = MathTex(""F"", color=YELLOW).next_to(force_arrow, UP, buff=0.1)
        distance_label = MathTex(""d"", color=PURPLE).next_to(distance_line, DOWN, buff=0.1)
        torque_label = MathTex(r""\tau = F \times d"", color=GREEN).shift(DOWN * 2)

        self.play(FadeIn(bolt), GrowFromPoint(wrench, point=wrench.get_start()))
        self.play(ShowCreation(force_arrow), Write(force_label))
        self.play(ShowCreation(distance_line), Write(distance_label))
        self.wait(1)
        self.play(Write(torque_label))
        self.wait(1)

        # Animate wrench turning
        wrench_turn = Rotating(wrench, about_point=bolt.get_center(), radians=PI/2)
        bolt_turn = Rotating(bolt, about_point=bolt.get_center(), radians=PI/2)
        self.play(wrench_turn, bolt_turn, run_time=2)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Wave Interference Demonstration""
animation:  animate two wave sources producing waves that overlap and form an interference pattern. Show areas of constructive interference where waves amplify each other, and areas of destructive interference where waves cancel each other out.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaveInterference(Scene):
    def construct(self):
        title = Text(""Wave Interference Demonstration"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parameters for wave sources and waves
        source_a = Dot(point=LEFT*2, color=BLUE)
        source_b = Dot(point=RIGHT*2, color=RED)
        waves_a = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=BLUE).move_to(source_a.get_center()) for i in range(1, 20)])
        waves_b = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=RED).move_to(source_b.get_center()) for i in range(1, 20)])
        
        self.play(FadeIn(source_a), FadeIn(source_b))
        self.play(AnimationGroup(*[GrowFromCenter(wave) for wave in waves_a], lag_ratio=0.1),
                  AnimationGroup(*[GrowFromCenter(wave) for wave in waves_b], lag_ratio=0.1),
                  run_time=4, rate_func=linear)
        
        interference_text = Text(""Interference Pattern"", color=YELLOW).to_edge(UP)
        self.play(Write(interference_text))
        self.wait(2)

        # Highlight areas of constructive and destructive interference
        constructive_area = Circle(radius=1, color=YELLOW).move_to(0.5*LEFT)
        destructive_area = Circle(radius=1, color=WHITE).move_to(1.5*RIGHT)
        self.play(ShowCreation(constructive_area), ShowCreation(destructive_area))
        self.wait(2)

        self.play(FadeOut(constructive_area), FadeOut(destructive_area), FadeOut(interference_text),
                  FadeOut(waves_a), FadeOut(waves_b), FadeOut(source_a), FadeOut(source_b))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Bernoulli's Principle in Action""
    animation:  animate fluid flowing through a constricted pipe. Show the velocity increasing and the pressure decreasing in the constricted area, illustrating Bernoulli's Principle in action.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class BernoullisPrinciple(Scene):
    def construct(self):
        title = Text(""Bernoulli's Principle in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Pipe
        pipe_start = Rectangle(width=6, height=1, color=BLUE)
        pipe_constriction = Rectangle(width=2, height=0.5, color=BLUE)
        pipe_end = Rectangle(width=6, height=1, color=BLUE)

        pipe_constriction.next_to(pipe_start, RIGHT, buff=0)
        pipe_end.next_to(pipe_constriction, RIGHT, buff=0)

        self.play(DrawBorderThenFill(pipe_start), DrawBorderThenFill(pipe_constriction), DrawBorderThenFill(pipe_end))
        
        # Fluid flow
        fluid_particles_start = VGroup(*[Circle(radius=0.1, color=WHITE).move_to(pipe_start.get_left() + RIGHT * x + 0.2 * UP * np.random.rand()) for x in np.linspace(0.5, 5.5, 20)])
        fluid_particles_constriction = VGroup(*[Circle(radius=0.05, color=WHITE).move_to(pipe_constriction.get_left() + RIGHT * x + 0.1 * UP * np.random.rand()) for x in np.linspace(0.5, 1.5, 20)])
        fluid_particles_end = VGroup(*[Circle(radius=0.1, color=WHITE).move_to(pipe_end.get_left() + RIGHT * x + 0.2 * UP * np.random.rand()) for x in np.linspace(0.5, 5.5, 20)])

        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 6 * RIGHT)) for particle in fluid_particles_start], lag_ratio=0.1))
        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 2 * RIGHT)) for particle in fluid_particles_constriction], lag_ratio=0.05))
        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 6 * RIGHT)) for particle in fluid_particles_end], lag_ratio=0.1))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Polarization of Light""
animation:  animate a light wave passing through a polarizing filter. Show the wave being blocked when the filter is rotated perpendicular to the plane of polarization, demonstrating the concept of polarization.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PolarizationOfLight(Scene):
    def construct(self):
        title = Text(""Polarization of Light"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a light wave
        light_wave = FunctionGraph(lambda x: np.sin(x), x_range=[-PI, PI], color=YELLOW)
        light_wave.move_to(3*LEFT)
        self.play(ShowCreation(light_wave))
        self.wait(1)

        # Create a polarizing filter
        filter_rect = Rectangle(height=2, width=0.2, fill_opacity=1, color=GREY)
        filter_rect.next_to(light_wave, RIGHT, buff=1)
        self.play(ShowCreation(filter_rect))
        self.wait(1)

        # Animate light wave passing through the filter
        passed_wave = FunctionGraph(lambda x: np.sin(x), x_range=[-PI, PI], color=YELLOW)
        passed_wave.next_to(filter_rect, RIGHT, buff=1)
        self.play(Transform(light_wave, passed_wave))
        self.wait(1)

        # Rotate filter to block the wave
        self.play(Rotate(filter_rect, angle=PI/2))
        blocked_wave = FunctionGraph(lambda x: 0*x, x_range=[-PI, PI], color=RED)
        blocked_wave.next_to(filter_rect, RIGHT, buff=1)
        self.play(Transform(light_wave, blocked_wave))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Odd and Even Numbers on a Number Line""
animation:  animate a number line with even numbers on one side and odd numbers on the other, visually distinguishing between them.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class OddEvenNumberLine(Scene):
    def construct(self):
        title = Text(""Odd and Even Numbers on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[-10, 10, 2], length=10, color=BLUE, include_numbers=True)
        self.play(Create(number_line))
        self.wait(1)

        even_numbers = VGroup()
        odd_numbers = VGroup()

        for x in range(-10, 11, 2):
            if x % 2 == 0:
                even_dot = Dot(number_line.n2p(x), color=GREEN)
                even_numbers.add(even_dot)
            else:
                odd_dot = Dot(number_line.n2p(x), color=RED)
                odd_numbers.add(odd_dot)

        self.play(FadeIn(even_numbers), FadeIn(odd_numbers))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Counting by Tens""
animation:  show a number line with multiples of ten highlighted, and animate a point jumping from one multiple to the next, demonstrating counting by tens.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CountingByTens(Scene):
    def construct(self):
        title = Text(""Counting by Tens"").scale(1.5)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        number_line = NumberLine(
            x_range=[0, 100, 10],
            length=10,
            color=BLUE,
            include_numbers=True,
            label_direction=DOWN,
        )

        self.play(Create(number_line))
        self.wait(1)

        for x in range(0, 101, 10):
            dot = Dot(point=number_line.number_to_point(x), color=YELLOW)
            self.play(MoveAlongPath(dot, Line(start=dot.get_center(), end=number_line.number_to_point(x))), run_time=0.5)
            self.wait(0.5)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Triangle Types""
    animation:  animate and display an equilateral triangle, an isosceles triangle, and a scalene triangle, highlighting their differences in side lengths and angles.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class TriangleTypes(Scene):
    def construct(self):
        title = Text(""Exploring Triangle Types"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Equilateral Triangle
        equilateral_triangle = Polygon([0, 0, 0], [2, 0, 0], [1, np.sqrt(3), 0])
        equilateral_label = Text(""Equilateral"", font_size=24).next_to(equilateral_triangle, DOWN)
        self.play(Create(equilateral_triangle))
        self.play(Write(equilateral_label))
        self.wait(2)
        self.play(FadeOut(equilateral_triangle), FadeOut(equilateral_label))

        # Isosceles Triangle
        isosceles_triangle = Polygon([0, 0, 0], [2, 0, 0], [1, 1.5, 0])
        isosceles_label = Text(""Isosceles"", font_size=24).next_to(isosceles_triangle, DOWN)
        self.play(Create(isosceles_triangle))
        self.play(Write(isosceles_label))
        self.wait(2)
        self.play(FadeOut(isosceles_triangle), FadeOut(isosceles_label))

        # Scalene Triangle
        scalene_triangle = Polygon([0, 0, 0], [2.5, 0, 0], [2, 1.5, 0])
        scalene_label = Text(""Scalene"", font_size=24).next_to(scalene_triangle, DOWN)
        self.play(Create(scalene_triangle))
        self.play(Write(scalene_label))
        self.wait(2)
        self.play(FadeOut(scalene_triangle), FadeOut(scalene_label))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Complementary Colors and Neutral Tones""
    animation:  show a color wheel with complementary colors positioned opposite each other. Next, animate the mixing of these complementary colors to create neutral tones, demonstrating how they cancel each other out.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ComplementaryColors(Scene):
    def construct(self):
        title = Text(""Complementary Colors and Neutral Tones"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create color wheel
        colors = [RED, YELLOW, BLUE, ORANGE, GREEN, PURPLE]
        wheel = VGroup(*[AnnularSector(inner_radius=0.5, outer_radius=1, angle=PI/3, start_angle=PI/3 * i, color=color) for i, color in enumerate(colors)])
        self.play(Create(wheel))
        self.wait(2)

        # Highlight complementary colors
        comp_pairs = [(RED, GREEN), (YELLOW, PURPLE), (BLUE, ORANGE)]
        for color1, color2 in comp_pairs:
            self.play(wheel.animate.set_color_by_gradient(color1, color2))
            self.wait(1)

        # Mix to neutral tones
        neutral_wheel = wheel.copy()
        neutral_color = GREY
        for sector in neutral_wheel:
            sector.set_color(neutral_color)

        self.play(Transform(wheel, neutral_wheel))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""The Power of the Lever""
animation:  animate a lever with a fulcrum, effort, and load, demonstrating how applying a small force at one end can lift a heavy load at the other end, showcasing the mechanical advantage of the lever.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LeverAnimation(Scene):
    def construct(self):
        # Title
        title = Text(""The Power of the Lever"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Lever setup
        lever = Line(LEFT * 5, RIGHT * 5, color=WHITE)
        fulcrum = Triangle().scale(0.5).rotate(PI).move_to(DOWN * 0.25)
        load = Square().scale(0.5).set_fill(BLUE, opacity=0.8).move_to(lever.get_start() + DOWN * 0.5)
        effort_point = Circle(radius=0.2, color=YELLOW).move_to(lever.get_end() + DOWN * 0.2)

        self.play(Create(lever), GrowFromPoint(fulcrum, point=lever.get_center()), FadeIn(load), FadeIn(effort_point))
        self.wait(1)

        # Demonstrate lever principle
        for _ in range(2):
            self.play(lever.animate.rotate(PI/6, about_point=fulcrum.get_center()), rate_func=there_and_back, run_time=2)
            self.play(load.animate.shift(UP * 0.5), effort_point.animate.shift(DOWN * 0.5))
            self.play(load.animate.shift(DOWN * 0.5), effort_point.animate.shift(UP * 0.5))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""States of Matter Visualization""
    animation:  animate molecules in solid, liquid, and gas states, showing their different movement patterns and densities. The solid state should show molecules in a fixed position, the liquid state should show molecules moving around but staying close together, and the gas state should show molecules moving freely and far apart from each other.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class StatesOfMatter(Scene):
    def construct(self):
        title = Text(""States of Matter Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Solid state
        solid_molecules = VGroup(*[Dot(radius=0.05, color=BLUE) for _ in range(25)])
        solid_molecules.arrange_in_grid(rows=5, cols=5, buff=0.2)
        self.play(ShowCreation(solid_molecules))
        self.wait(2)

        # Transition to liquid state
        self.play(solid_molecules.animate.arrange_in_grid(rows=5, cols=5, buff=0.5), run_time=2)
        for molecule in solid_molecules:
            self.play(molecule.animate.shift(UP*0.1 + RIGHT*0.1), run_time=0.5, rate_func=there_and_back)
            self.play(molecule.animate.shift(DOWN*0.1 + LEFT*0.1), run_time=0.5, rate_func=there_and_back)
        self.wait(2)

        # Transition to gas state
        self.play(FadeOut(solid_molecules))
        gas_molecules = VGroup(*[Dot(radius=0.05, color=RED) for _ in range(15)])
        self.play(ShowCreation(gas_molecules))
        for molecule in gas_molecules:
            self.play(molecule.animate.shift(UP*3 + RIGHT*3), run_time=3, rate_func=linear)
            self.play(molecule.animate.shift(DOWN*3 + LEFT*3), run_time=3, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Fractions on a Number Line""
animation:  animate a number line divided into equal parts, highlighting fractions such as 1/2, 1/3, and 1/4 to visually represent their positions on the number line.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FractionsOnNumberLine(Scene):
    def construct(self):
        title = Text(""Fractions on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[0, 1, 0.25], length=10, include_numbers=True, label_direction=DOWN)
        self.play(Create(number_line))
        self.wait(1)

        fractions = [1/2, 1/3, 1/4]
        colors = [RED, GREEN, BLUE]

        for fraction, color in zip(fractions, colors):
            dot = Dot(color=color).move_to(number_line.number_to_point(fraction))
            self.play(GrowFromCenter(dot))
            self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Polygons""
animation:  animate different polygons such as triangles, quadrilaterals, pentagons, etc., highlighting their number of sides and angles.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ExploringPolygons(Scene):
    def construct(self):
        title = Text(""Exploring Polygons"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        polygons = [
            (Triangle(), ""Triangle"", 3),
            (Square(), ""Quadrilateral"", 4),
            (RegularPolygon(5), ""Pentagon"", 5),
            (RegularPolygon(6), ""Hexagon"", 6),
            (RegularPolygon(7), ""Heptagon"", 7),
            (RegularPolygon(8), ""Octagon"", 8),
        ]

        for poly, name, sides in polygons:
            poly_text = Text(name, font_size=24).next_to(poly, UP)
            sides_text = Text(f""Sides: {sides}"", font_size=24).next_to(poly, DOWN)
            self.play(Create(poly), Write(poly_text), Write(sides_text))
            self.wait(2)
            self.play(FadeOut(poly), FadeOut(poly_text), FadeOut(sides_text))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Symmetry in Shapes""
animation:  animate shapes with reflectional and rotational symmetry. Show the reflection lines for shapes with reflectional symmetry and the rotation points for shapes with rotational symmetry.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SymmetryInShapes(Scene):
    def construct(self):
        title = Text(""Symmetry in Shapes"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Reflectional Symmetry
        square = Square(side_length=2).shift(LEFT*3)
        line_of_symmetry = DashedLine(start=square.get_top(), end=square.get_bottom()).shift(LEFT*3)
        self.play(Create(square), Create(line_of_symmetry))
        self.wait(1)

        # Rotational Symmetry
        circle = Circle(radius=1).shift(RIGHT*3)
        dot = Dot(point=circle.get_center()).shift(RIGHT*3)
        self.play(Create(circle), FadeIn(dot))
        self.wait(1)

        # Animate rotation to show rotational symmetry
        self.play(Rotate(circle, angle=PI/2, about_point=circle.get_center()), Rotate(dot, angle=PI/2, about_point=dot.get_center()))
        self.wait(1)

        self.play(FadeOut(square), FadeOut(line_of_symmetry), FadeOut(circle), FadeOut(dot))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Parallel and Perpendicular Lines""
animation:  animate two sets of parallel lines and two sets of perpendicular lines, emphasizing their constant distance or 90-degree angle respectively.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ParallelPerpendicular(Scene):
    def construct(self):
        title = Text(""Exploring Parallel and Perpendicular Lines"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parallel lines
        parallel_lines_1 = VGroup(*[Line(UP*3 + LEFT*4 + RIGHT*x, DOWN*3 + LEFT*4 + RIGHT*x) for x in range(0, 3)])
        parallel_lines_2 = VGroup(*[Line(UP*3 + RIGHT*4 + LEFT*x, DOWN*3 + RIGHT*4 + LEFT*x) for x in range(0, 3)])
        self.play(ShowCreation(parallel_lines_1), ShowCreation(parallel_lines_2))
        self.wait(2)
        self.play(FadeOut(parallel_lines_1), FadeOut(parallel_lines_2))

        # Perpendicular lines
        perpendicular_lines_1 = VGroup(Line(UP*3, DOWN*3), Line(LEFT*3, RIGHT*3))
        perpendicular_lines_2 = VGroup(Line(UP*2 + LEFT*2, DOWN*2 + LEFT*2), Line(UP*2 + LEFT*2, UP*2 + RIGHT*2))
        self.play(ShowCreation(perpendicular_lines_1), ShowCreation(perpendicular_lines_2))
        self.wait(2)
        self.play(FadeOut(perpendicular_lines_1), FadeOut(perpendicular_lines_2))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Varieties of Leaves""
animation:  animate simple, compound, and needle-like leaves, highlighting their differences in shape and structure.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LeavesAnimation(Scene):
    def construct(self):
        title = Text(""Varieties of Leaves"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Simple Leaf
        simple_leaf = Ellipse(width=2.0, height=1.0, color=GREEN).shift(LEFT*4)
        simple_leaf_label = Text(""Simple Leaf"", font_size=24).next_to(simple_leaf, DOWN)
        self.play(Create(simple_leaf), Write(simple_leaf_label))
        self.wait(1)

        # Compound Leaf
        compound_leaf = VGroup(
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(LEFT*0.5 + UP*0.75),
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(RIGHT*0.5 + UP*0.75),
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(LEFT*0.5 + DOWN*0.75),
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(RIGHT*0.5 + DOWN*0.75),
            Line(ORIGIN, UP*0.75, color=WHITE),
        ).shift(RIGHT*0)
        compound_leaf_label = Text(""Compound Leaf"", font_size=24).next_to(compound_leaf, DOWN)
        self.play(Create(compound_leaf), Write(compound_leaf_label))
        self.wait(1)

        # Needle-like Leaf
        needle_leaf = Line(UP*0.5, DOWN*0.5, color=GREEN).shift(RIGHT*4)
        needle_leaf_label = Text(""Needle-like Leaf"", font_size=24).next_to(needle_leaf, DOWN)
        self.play(Create(needle_leaf), Write(needle_leaf_label))
        self.wait(2)

        # Grouping all leaves
        all_leaves = VGroup(simple_leaf, simple_leaf_label, compound_leaf, compound_leaf_label, needle_leaf, needle_leaf_label)
        self.play(all_leaves.animate.scale(0.6).arrange(RIGHT, buff=1).to_edge(DOWN))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Law of Reflection""
animation:  animate a light ray hitting a flat surface and reflecting off it, with the angle of incidence equal to the angle of reflection, demonstrating the law of reflection.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LawOfReflection(Scene):
    def construct(self):
        title = Text(""Law of Reflection"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create surface
        surface = Line(LEFT * 5, RIGHT * 5)
        self.play(Create(surface))

        # Create incident ray
        incident_ray = Arrow(start=LEFT * 3 + UP * 2, end=ORIGIN, buff=0, color=YELLOW)
        self.play(GrowArrow(incident_ray))

        # Create reflected ray
        reflected_ray = Arrow(start=ORIGIN, end=RIGHT * 3 + UP * 2, buff=0, color=YELLOW)
        self.play(GrowArrow(reflected_ray))

        # Angles
        angle_of_incidence = Angle(incident_ray, surface, radius=0.5, other_angle=True, color=WHITE)
        angle_of_reflection = Angle(surface, reflected_ray, radius=0.5, color=WHITE)
        self.play(Create(angle_of_incidence), Create(angle_of_reflection))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Mixtures and Solutions""
animation:  animate a mixture of different substances being poured into a container, followed by the substances dissolving into a solution, demonstrating the process of dissolution.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MixturesAndSolutions(Scene):
    def construct(self):
        # Title
        title = Text(""Mixtures and Solutions"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Container
        container = Rectangle(height=4, width=3, color=WHITE)
        self.play(Create(container))
        self.wait(1)

        # Substances
        substance1 = Circle(radius=0.2, color=BLUE).move_to(3*UP + 2*LEFT)
        substance2 = Circle(radius=0.2, color=RED).move_to(3*UP + 2*RIGHT)
        self.play(FadeIn(substance1), FadeIn(substance2))
        self.wait(1)

        # Pouring substances
        self.play(substance1.animate.move_to(container.get_top() + 0.5*DOWN), 
                  substance2.animate.move_to(container.get_top() + 0.5*DOWN))
        self.wait(1)

        # Dissolving substances
        dissolved_substance1 = substance1.copy().set_opacity(0.2)
        dissolved_substance2 = substance2.copy().set_opacity(0.2)
        self.play(Transform(substance1, dissolved_substance1), 
                  Transform(substance2, dissolved_substance2),
                  substance1.animate.scale(5),
                  substance2.animate.scale(5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Magnetic Poles Interaction""
    animation:  animate a bar magnet with clearly labeled north and south poles. Show the attraction between the north and south poles of two magnets, and the repulsion between like poles.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MagneticPolesInteraction(Scene):
    def construct(self):
        title = Text(""Magnetic Poles Interaction"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Magnet 1
        magnet1 = Rectangle(color=BLUE, height=1, width=2)
        north1 = Text(""N"", color=WHITE).move_to(magnet1.get_left() + RIGHT * 0.3)
        south1 = Text(""S"", color=WHITE).move_to(magnet1.get_right() + LEFT * 0.3)
        magnet1_group = VGroup(magnet1, north1, south1).shift(LEFT*3)

        # Magnet 2
        magnet2 = Rectangle(color=RED, height=1, width=2)
        north2 = Text(""N"", color=WHITE).move_to(magnet2.get_left() + RIGHT * 0.3)
        south2 = Text(""S"", color=WHITE).move_to(magnet2.get_right() + LEFT * 0.3)
        magnet2_group = VGroup(magnet2, north2, south2).shift(RIGHT*3)

        self.play(FadeIn(magnet1_group), FadeIn(magnet2_group))
        self.wait(1)

        # Attraction
        self.play(magnet1_group.animate.shift(RIGHT*2), magnet2_group.animate.shift(LEFT*2))
        self.wait(1)

        # Repulsion setup
        magnet2_group.generate_target()
        magnet2_group.target.rotate(PI).move_to(RIGHT*3)

        self.play(MoveToTarget(magnet2_group))
        self.wait(1)

        # Repulsion
        self.play(magnet1_group.animate.shift(RIGHT*0.5), magnet2_group.animate.shift(LEFT*0.5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Rectangles: Area and Perimeter""
    animation:  animate rectangles with different dimensions, calculating and displaying their area (length x width) and perimeter (2 x length + 2 x width) in a visually engaging way.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RectangleAnimation(Scene):
    def construct(self):
        title = Text(""Exploring Rectangles: Area and Perimeter"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        rectangles = [
            (4, 2),
            (3, 3),
            (6, 1),
        ]

        for length, width in rectangles:
            rectangle = Rectangle(width=width, height=length)
            area_text = Text(f""Area: {length * width}"", font_size=24).next_to(rectangle, DOWN)
            perimeter_text = Text(f""Perimeter: {2 * (length + width)}"", font_size=24).next_to(area_text, DOWN)

            self.play(Create(rectangle))
            self.play(Write(area_text), Write(perimeter_text))
            self.wait(2)
            self.play(FadeOut(rectangle), FadeOut(area_text), FadeOut(perimeter_text))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Water Displacement Demonstration""
animation:  animate an object being submerged in water, with the water level rising by an amount equal to the volume of the object, illustrating the principle of water displacement.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaterDisplacement(Scene):
    def construct(self):
        title = Text(""Water Displacement Demonstration"").scale(0.5)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        # Container
        container = Rectangle(height=6, width=4).set_fill(BLUE, opacity=0.5).set_stroke(width=2)
        self.play(Create(container))

        # Water
        water = Rectangle(height=2, width=3.8).set_fill(BLUE, opacity=0.7).set_stroke(width=0)
        water.shift(DOWN * 1)
        self.play(Create(water))

        # Object
        object = Circle(radius=0.5).set_fill(GRAY, opacity=1).set_stroke(width=2)
        object.move_to(UP * 3)
        self.play(Create(object))

        # Animate object submersion
        self.play(object.animate.shift(DOWN * 4))

        # Animate water displacement
        displaced_water = water.copy().stretch_to_fit_height(water.height + 0.5)
        self.play(Transform(water, displaced_water))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Multiplication as Repeated Addition""
animation:  animate groups of objects being added together repeatedly, transitioning to multiplication by showing the equation 3 + 3 + 3 = 3 × 3.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplicationScene(Scene):
    def construct(self):
        title = Text(""Multiplication as Repeated Addition"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create groups of objects (circles in this case)
        group1 = VGroup(*[Circle(radius=0.2, color=BLUE) for _ in range(3)])
        group1.arrange(RIGHT, buff=0.5)
        group2 = group1.copy().next_to(group1, DOWN, buff=1)
        group3 = group1.copy().next_to(group2, DOWN, buff=1)

        # Animate groups appearing one after the other
        self.play(ShowCreation(group1))
        self.wait(0.5)
        self.play(ShowCreation(group2))
        self.wait(0.5)
        self.play(ShowCreation(group3))
        self.wait(1)

        # Transition to multiplication
        equals_text = Text(""="").next_to(group3, RIGHT, buff=1)
        multiplication_text = Text(""3 × 3"").next_to(equals_text, RIGHT, buff=0.5)
        plus_signs = VGroup(
            *[Text(""+"").next_to(group1, RIGHT, buff=0.2).shift(0.5*DOWN),
              Text(""+"").next_to(group2, RIGHT, buff=0.2).shift(0.5*DOWN)]
        )

        self.play(Write(plus_signs))
        self.wait(0.5)
        self.play(Write(equals_text), Write(multiplication_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Divisibility Rules Explained""
animation:  animate the process of checking if a number is divisible by 2, 3, 5, or 10 based on its last digit or sum of digits, illustrating the different rules visually.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DivisibilityRules(Scene):
    def construct(self):
        # Title
        title = Text(""Divisibility Rules Explained"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Divisible by 2
        divisible_by_2 = Text(""Divisible by 2: Last digit is even"", font_size=24)
        self.play(Write(divisible_by_2))
        self.wait(2)
        self.play(FadeOut(divisible_by_2))

        # Divisible by 3
        divisible_by_3 = Text(""Divisible by 3: Sum of digits is divisible by 3"", font_size=24)
        self.play(Write(divisible_by_3))
        self.wait(2)
        self.play(FadeOut(divisible_by_3))

        # Divisible by 5
        divisible_by_5 = Text(""Divisible by 5: Last digit is 0 or 5"", font_size=24)
        self.play(Write(divisible_by_5))
        self.wait(2)
        self.play(FadeOut(divisible_by_5))

        # Divisible by 10
        divisible_by_10 = Text(""Divisible by 10: Last digit is 0"", font_size=24)
        self.play(Write(divisible_by_10))
        self.wait(2)
        self.play(FadeOut(divisible_by_10))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Scaling on a Coordinate Plane""
    animation:  show a shape on a coordinate plane, and animate it being scaled by a factor of 2 or 3, visually demonstrating the concept of scaling in a geometric context.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ScalingAnimation(Scene):
    def construct(self):
        title = Text(""Scaling on a Coordinate Plane"")
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        axes = Axes(
            x_range=[-5, 5],
            y_range=[-5, 5],
            axis_config={""color"": BLUE},
        )
        self.play(Create(axes))

        square = Square(color=RED).move_to(axes.c2p(0, 0))
        self.play(Create(square))
        self.wait(1)

        scaled_square = square.copy().scale(2)
        self.play(Transform(square, scaled_square))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Complementary and Supplementary Angles""
animation:  animate two angles adding up to 90° (complementary) and 180° (supplementary), showcasing their relationship and how they form a straight line or a right angle.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ComplementaryAndSupplementary(Scene):
    def construct(self):
        title = Text(""Complementary and Supplementary Angles"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Complementary angles
        line1 = Line(ORIGIN, 2*RIGHT)
        line2 = Line(ORIGIN, 2*UP).rotate_about_origin(PI/4)
        angle1 = Angle(line1, line2, radius=0.5, color=YELLOW)
        self.play(Create(line1), Create(line2), GrowFromCenter(angle1))
        self.wait(1)

        comp_text = Text(""Complementary"", font_size=24).next_to(angle1, UP)
        self.play(Write(comp_text))
        self.wait(2)
        self.play(FadeOut(line1), FadeOut(line2), FadeOut(angle1), FadeOut(comp_text))

        # Supplementary angles
        line3 = Line(ORIGIN, 2*RIGHT)
        line4 = Line(ORIGIN, 2*LEFT)
        angle2 = Angle(line3, line4, radius=0.5, other_angle=True, color=GREEN)
        self.play(Create(line3), Create(line4), GrowFromCenter(angle2))
        self.wait(1)

        supp_text = Text(""Supplementary"", font_size=24).next_to(angle2, UP, buff=0.5)
        self.play(Write(supp_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Circle Diameter and Radius Relationship""
animation:  animate a circle with its diameter and radius labeled, showing the relationship between them (diameter = 2 × radius).
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CircleDiameterRadius(Scene):
    def construct(self):
        title = Text(""Circle Diameter and Radius Relationship"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        circle = Circle(radius=2)
        diameter = Line(start=circle.get_left(), end=circle.get_right(), color=BLUE)
        radius = Line(start=circle.get_center(), end=circle.get_right(), color=RED)

        diameter_label = Tex(""Diameter = 2 $\\times$ Radius"").next_to(circle, DOWN)
        radius_label = Tex(""Radius"", color=RED).next_to(radius, DOWN)

        self.play(Create(circle))
        self.play(ShowCreation(diameter), ShowCreation(radius))
        self.play(Write(diameter_label), Write(radius_label))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Fraction of a Whole Number""
    animation:  animate dividing a whole number into equal parts to find a fraction of it, such as showing 1/4 of 20 by dividing 20 into 4 equal parts.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FractionOfWhole(Scene):
    def construct(self):
        title = Text(""Fraction of a Whole Number"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        whole_number = 20
        fraction = 1/4
        parts = int(1/fraction)

        number_line = NumberLine(x_range=[0, whole_number+1, 1], length=10, include_numbers=True, numbers_to_exclude=[whole_number+1])
        self.play(Create(number_line))
        self.wait(1)

        divisions = [number_line.number_to_point(i) for i in range(0, whole_number+1, whole_number//parts)]
        rects = [
            Rectangle(width=number_line.number_to_point(1)[0] - number_line.number_to_point(0)[0], height=0.5)
            .move_to(number_line.number_to_point(i) + UP * 0.25)
            for i in range(0, whole_number, whole_number//parts)
        ]

        for rect in rects:
            self.play(Create(rect), run_time=0.5)
        self.wait(1)

        highlight_rect = Rectangle(
            width=(number_line.number_to_point(whole_number//parts)[0] - number_line.number_to_point(0)[0]) * fraction,
            height=0.75, color=YELLOW
        ).move_to(number_line.number_to_point((whole_number//parts) * fraction / 2) + UP * 0.25)

        self.play(Create(highlight_rect))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Area of Rectangles""
    animation:  animate displaying rectangles with varying lengths and widths. Show the calculation of their areas using the formula A = L × W for each rectangle.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RectangleArea(Scene):
    def construct(self):
        title = Text(""Calculating Area of Rectangles"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        rectangles = [
            (4, 2),
            (3, 3),
            (5, 1)
        ]

        for length, width in rectangles:
            rectangle = Rectangle(width=width, height=length, color=BLUE)
            area_text = Text(f""A = {length} × {width} = {length * width}"", font_size=24)
            area_calculation = VGroup(rectangle, area_text).arrange(DOWN)

            self.play(Create(rectangle))
            self.wait(1)
            self.play(Write(area_text))
            self.wait(2)
            self.play(FadeOut(area_calculation))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""The Inclined Plane in Action""
animation:  animate an object being pushed up an inclined plane, demonstrating how the incline reduces the force required to move the object uphill.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class InclinedPlane(Scene):
    def construct(self):
        title = Text(""The Inclined Plane in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create inclined plane
        plane = Polygon([0, 0, 0], [3, 0, 0], [3, 1.5, 0], [0, 0, 0], color=WHITE)
        self.play(Create(plane))
        
        # Create object
        obj = Dot([2.5, 0.75, 0], color=RED)
        self.play(FadeIn(obj))
        
        # Animate object moving up the plane
        self.play(obj.animate.shift([-2, 1, 0]), run_time=2, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Converting Fractions to Decimals""
animation:  animate showing a fraction on the screen and demonstrate the process of converting it to a decimal by dividing the numerator by the denominator.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ConvertFractionsToDecimals(Scene):
    def construct(self):
        title = Text(""Converting Fractions to Decimals"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        fraction = MathTex(r""\frac{3}{4}"")
        self.play(Write(fraction))
        self.wait(1)

        equals = MathTex(""="")
        equals.next_to(fraction, RIGHT)
        self.play(Write(equals))

        decimal = DecimalNumber(3/4, num_decimal_places=2)
        decimal.next_to(equals, RIGHT)
        self.play(TransformFromCopy(fraction, decimal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Reflection and Rotation of Shapes""
animation:  display a shape and animate its reflection across a line followed by its rotation around a point, showcasing the transformation of the shape.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ReflectionAndRotation(Scene):
    def construct(self):
        title = Text(""Reflection and Rotation of Shapes"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a shape
        square = Square(color=BLUE, fill_opacity=0.5)
        self.play(Create(square))
        self.wait(1)

        # Reflection line
        line = DashedLine(start=3*UP, end=3*DOWN, color=WHITE)
        self.play(ShowCreation(line))
        self.wait(1)

        # Reflect the square across the line
        reflected_square = square.copy()
        self.play(reflected_square.animate.apply_function(lambda p: np.array([-p[0], p[1], p[2]])))
        self.wait(1)

        # Rotation around a point
        self.play(Rotate(square, angle=PI/2), Rotate(reflected_square, angle=-PI/2))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Energy Conversion in a Roller Coaster""
    animation:  animate a roller coaster track with a cart moving along it. Show the cart at the top of a hill with high potential energy, then descending down the hill converting potential energy into kinetic energy as it gains speed.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RollerCoaster(Scene):
    def construct(self):
        title = Text(""Energy Conversion in a Roller Coaster"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Roller Coaster Track
        track_start = 3 * UP + 5 * LEFT
        track_end = 3 * UP + 5 * RIGHT
        track = VMobject()
        track.set_points_as_corners([track_start, [0, 3, 0], [0, 0, 0], [3, 0, 0], track_end])
        track.make_smooth()
        self.play(Create(track))

        # Cart
        cart = Dot(track_start, color=RED)
        self.play(FadeIn(cart))

        # Potential Energy at the top
        potential_energy_text = Text(""High Potential Energy"", font_size=24).next_to(cart, UP)
        self.play(Write(potential_energy_text))
        self.wait(1)
        self.play(FadeOut(potential_energy_text))

        # Move the cart along the track
        self.play(MoveAlongPath(cart, track), rate_func=linear, run_time=4)

        # Kinetic Energy at the bottom
        kinetic_energy_text = Text(""High Kinetic Energy"", font_size=24).next_to(cart, DOWN)
        self.play(Write(kinetic_energy_text))
        self.wait(2)
        self.play(FadeOut(kinetic_energy_text), FadeOut(cart), FadeOut(track))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Multiplying Fractions Illustrated""
animation:  animate two fractions side by side. Show the multiplication process by separately animating the multiplication of their numerators and denominators, illustrating how the fractions are multiplied together.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingFractions(Scene):
    def construct(self):
        title = Text(""Multiplying Fractions Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        fraction1 = MathTex(r""\frac{2}{3}"").scale(2)
        fraction2 = MathTex(r""\frac{4}{5}"").scale(2).next_to(fraction1, RIGHT, buff=1)

        self.play(Write(fraction1), Write(fraction2))
        self.wait(1)

        times = MathTex(r""\times"").scale(2).next_to(fraction1, RIGHT, buff=0.2)
        self.play(Write(times))
        self.wait(1)

        equals = MathTex(r""="").scale(2).next_to(fraction2, RIGHT, buff=0.2)
        self.play(Write(equals))
        self.wait(1)

        result_fraction = MathTex(r""\frac{2 \times 4}{3 \times 5}"").scale(2).next_to(equals, RIGHT, buff=0.2)
        self.play(Write(result_fraction))
        self.wait(1)

        simplified_fraction = MathTex(r""\frac{8}{15}"").scale(2).next_to(equals, RIGHT, buff=0.2)
        self.play(ReplacementTransform(result_fraction, simplified_fraction))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Balancing Equations: Isolating Variables""
animation:  display a simple equation (e.g., x + 3 = 7), and animate the process of subtracting 3 from both sides to isolate the variable x, demonstrating the concept of balancing equations.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class BalancingEquations(Scene):
    def construct(self):
        title = Text(""Balancing Equations: Isolating Variables"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        equation = Text(""x + 3 = 7"")
        self.play(Write(equation))
        self.wait(1)

        subtract_text = Text(""-3"", color=RED).next_to(equation, DOWN)
        self.play(Write(subtract_text))
        self.wait(1)

        equation_transformed = Text(""x = 4"")
        self.play(ReplacementTransform(equation, equation_transformed), FadeOut(subtract_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Probability of Coin Flips""
animation:  animate flipping a coin multiple times and visually represent the probability of getting heads or tails. Show a bar graph or pie chart to illustrate the distribution of outcomes.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *
import random

class CoinFlipProbability(Scene):
    def construct(self):
        title = Text(""Probability of Coin Flips"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        outcomes = {""Heads"": 0, ""Tails"": 0}
        coins = VGroup()
        for i in range(5):
            coin = Circle().scale(0.5)
            if random.random() < 0.5:
                outcomes[""Heads""] += 1
                coin.set_fill(WHITE, opacity=1)
                heads_text = Text(""H"", font_size=36).move_to(coin)
                coin.add(heads_text)
            else:
                outcomes[""Tails""] += 1
                coin.set_fill(BLACK, opacity=1)
                tails_text = Text(""T"", color=WHITE, font_size=36).move_to(coin)
                coin.add(tails_text)
            coins.add(coin)
        
        coins.arrange_in_grid(rows=1)
        self.play(AnimationGroup(*[DrawBorderThenFill(coin) for coin in coins], lag_ratio=0.5))
        self.wait(2)

        bars = VGroup()
        for outcome, count in outcomes.items():
            bar = Rectangle(height=count, width=0.5, fill_opacity=1)
            if outcome == ""Heads"":
                bar.set_fill(WHITE)
                bar.set_stroke(WHITE)
            else:
                bar.set_fill(BLACK)
                bar.set_stroke(BLACK)
            bars.add(bar)

        bars.arrange(buff=1).to_edge(DOWN)
        self.play(AnimationGroup(*[GrowFromCenter(bar) for bar in bars], lag_ratio=0.5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Factors and Multiples""
animation:  display a number on the screen and animate finding its factors (numbers that divide into it evenly) and multiples (products of the number and integers) in a visually engaging way.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FactorsAndMultiples(Scene):
    def construct(self):
        title = Text(""Exploring Factors and Multiples"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number = 12
        number_text = Text(str(number), font_size=72)
        self.play(Write(number_text))
        self.wait(1)

        factors = []
        multiples = [number * i for i in range(1, 6)]

        for i in range(1, number + 1):
            if number % i == 0:
                factors.append(i)

        factors_group = VGroup(*[Text(str(factor), font_size=36) for factor in factors])
        multiples_group = VGroup(*[Text(str(multiple), font_size=36) for multiple in multiples])

        factors_group.arrange(DOWN, center=False, aligned_edge=LEFT).to_edge(LEFT, buff=1)
        multiples_group.arrange(DOWN, center=False, aligned_edge=RIGHT).to_edge(RIGHT, buff=1)

        self.play(Transform(number_text, factors_group))
        self.wait(1)
        self.play(Transform(number_text, multiples_group))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Measuring Length in Metric Units""
animation:  animate showing objects of different lengths being measured in millimeters, centimeters, and meters, highlighting the conversion between the units.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MeasureLength(Scene):
    def construct(self):
        title = Text(""Measuring Length in Metric Units"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Millimeters example
        mm_line = Line(ORIGIN, RIGHT * 0.5, color=BLUE)
        mm_text = Text(""50mm"").next_to(mm_line, DOWN)
        self.play(GrowFromCenter(mm_line), Write(mm_text))
        self.wait(2)
        self.play(FadeOut(mm_line), FadeOut(mm_text))

        # Centimeters to millimeters conversion
        cm_line = Line(ORIGIN, RIGHT * 2, color=GREEN)
        cm_text = Text(""2cm = 20mm"").next_to(cm_line, DOWN)
        self.play(GrowFromCenter(cm_line), Write(cm_text))
        self.wait(2)
        self.play(FadeOut(cm_line), FadeOut(cm_text))

        # Meters example
        m_line = Line(ORIGIN, RIGHT * 5, color=RED)
        m_text = Text(""1m = 100cm"").next_to(m_line, DOWN)
        self.play(GrowFromCenter(m_line), Write(m_text))
        self.wait(2)
        self.play(FadeOut(m_line), FadeOut(m_text))

        # Conversion between units
        conversion_text = Text(""1m = 100cm = 1000mm"").scale(0.7)
        self.play(Write(conversion_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Volumes of Cubes""
    animation:  animate displaying cubes with different side lengths, followed by animating the calculation of their volumes using the formula V = s³.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CubeVolume(Scene):
    def construct(self):
        title = Text(""Calculating Volumes of Cubes"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        side_lengths = [1, 2, 3]
        for side_length in side_lengths:
            cube = Cube(side_length=side_length).set_fill(BLUE, opacity=0.5)
            formula = MathTex(f""V = {side_length}^3 = {side_length ** 3}"")
            formula.next_to(cube, DOWN)

            self.play(Create(cube))
            self.play(Write(formula))
            self.wait(2)
            self.play(FadeOut(cube), FadeOut(formula))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Equivalent Ratios""
    animation:  show two sets of numbers representing equivalent ratios (e.g., 2:3 and 4:6) and animate their proportional relationship by visually demonstrating how they are equal in value.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class EquivalentRatios(Scene):
    def construct(self):
        title = Text(""Exploring Equivalent Ratios"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        ratio1 = Text(""2:3"", color=BLUE).shift(UP*2)
        ratio2 = Text(""4:6"", color=YELLOW).next_to(ratio1, DOWN, buff=1.5)

        self.play(Write(ratio1), Write(ratio2))
        self.wait(1)

        # Visual demonstration of equivalence
        rect1 = Rectangle(height=2, width=3, color=BLUE).next_to(ratio1, DOWN, buff=0.5)
        rect2 = Rectangle(height=4, width=6, color=YELLOW).next_to(ratio2, DOWN, buff=0.5).scale(0.5)

        self.play(DrawBorderThenFill(rect1), DrawBorderThenFill(rect2))
        self.wait(1)

        equivalence = Text(""These ratios are equivalent!"", color=GREEN).scale(0.7).next_to(rect2, DOWN, buff=0.5)
        self.play(Write(equivalence))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Newton's First Law in Action""
    animation:  animate a stationary object remaining at rest, and a moving object continuing its motion at a constant velocity in a straight line, unless acted upon by an external force.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NewtonsFirstLaw(Scene):
    def construct(self):
        title = Text(""Newton's First Law in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Stationary object
        stationary_square = Square(color=BLUE, fill_opacity=1).shift(LEFT*3)
        self.play(FadeIn(stationary_square))
        self.wait(2)

        # Moving object
        moving_circle = Circle(color=RED, fill_opacity=1).shift(RIGHT*3)
        self.play(FadeIn(moving_circle))
        self.play(moving_circle.animate.shift(LEFT*6), run_time=2, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Subtracting Integers on a Number Line""
animation:  animate a number line with integers marked on it. Show the process of subtracting positive and negative integers by moving left or right along the number line.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SubtractingIntegers(Scene):
    def construct(self):
        # Title
        title = Text(""Subtracting Integers on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Number line
        number_line = NumberLine(
            x_range=[-10, 10, 1],
            length=10,
            color=WHITE,
            include_numbers=True,
            label_direction=DOWN,
        )
        self.play(Create(number_line))
        self.wait(1)

        # Example of subtracting positive integer (e.g., 3 - 2)
        start_point = number_line.number_to_point(3)
        end_point = number_line.number_to_point(1)
        pointer = Triangle().move_to(start_point).set_color(RED)
        self.play(FadeIn(pointer))
        self.wait(1)
        self.play(pointer.animate.move_to(end_point))
        self.wait(2)

        # Clearing for next example
        self.play(FadeOut(pointer))
        
        # Example of subtracting negative integer (e.g., -2 - (-3))
        start_point = number_line.number_to_point(-2)
        end_point = number_line.number_to_point(1)
        pointer = Triangle().move_to(start_point).set_color(BLUE)
        self.play(FadeIn(pointer))
        self.wait(1)
        self.play(pointer.animate.move_to(end_point))
        self.wait(2)

        # End
        self.play(FadeOut(pointer), FadeOut(number_line))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Quadrilaterals""
animation:  animate examples of parallelograms, rhombuses, rectangles, squares, and trapezoids, highlighting their properties such as angles, sides, and symmetry.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class Quadrilaterals(Scene):
    def construct(self):
        title = Text(""Exploring Quadrilaterals"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parallelogram
        parallelogram = Polygon([-1, 1, 0], [1, 1, 0], [2, -1, 0], [0, -1, 0], color=BLUE)
        self.play(Create(parallelogram))
        self.wait(1)
        self.play(FadeOut(parallelogram))

        # Rhombus
        rhombus = Polygon([-1, 1, 0], [1, 1, 0], [2, -1, 0], [0, -1, 0], color=GREEN)
        rhombus.scale(0.5).rotate(PI/4)
        self.play(Create(rhombus))
        self.wait(1)
        self.play(FadeOut(rhombus))

        # Rectangle
        rectangle = Rectangle(height=2, width=3, color=ORANGE)
        self.play(Create(rectangle))
        self.wait(1)
        self.play(FadeOut(rectangle))

        # Square
        square = Square(side_length=2, color=RED)
        self.play(Create(square))
        self.wait(1)
        self.play(FadeOut(square))

        # Trapezoid
        trapezoid = Polygon([-2, -1, 0], [2, -1, 0], [1, 1, 0], [-1, 1, 0], color=PURPLE)
        self.play(Create(trapezoid))
        self.wait(1)
        self.play(FadeOut(trapezoid))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Comparing Fractions with Cross Multiplication""
    animation:  animate two fractions displayed side by side, each with different numerators and denominators. Show the process of cross multiplication to compare their values and determine which fraction is greater.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CompareFractions(Scene):
    def construct(self):
        title = Text(""Comparing Fractions with Cross Multiplication"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        fraction1 = MathTex(r""\frac{3}{4}"").shift(LEFT*2)
        fraction2 = MathTex(r""\frac{5}{6}"").shift(RIGHT*2)
        self.play(Write(fraction1), Write(fraction2))
        self.wait(1)

        cross1 = MathTex(r""3 \times 6"").next_to(fraction1, DOWN)
        cross2 = MathTex(r""5 \times 4"").next_to(fraction2, DOWN)
        self.play(Write(cross1), Write(cross2))
        self.wait(1)

        result1 = MathTex(r""18"").next_to(cross1, DOWN)
        result2 = MathTex(r""20"").next_to(cross2, DOWN)
        self.play(Transform(cross1, result1), Transform(cross2, result2))
        self.wait(1)

        greater_than = MathTex(r""18 < 20"").move_to(DOWN*2)
        self.play(Write(greater_than))
        self.wait(2)

        self.play(FadeOut(fraction1), FadeOut(fraction2), FadeOut(cross1), FadeOut(cross2), FadeOut(greater_than))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Reciprocals Exploration""
animation:  animate displaying a fraction on the screen. Show the process of finding its reciprocal by flipping the numerator and denominator, visually demonstrating the concept of reciprocals.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ReciprocalsExploration(Scene):
    def construct(self):
        title = Text(""Reciprocals Exploration"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        fraction = MathTex(r""\frac{2}{3}"").scale(2)
        reciprocal = MathTex(r""\frac{3}{2}"").scale(2)
        arrow = Arrow(UP, DOWN).next_to(fraction, DOWN)

        self.play(Write(fraction))
        self.wait(1)
        self.play(GrowArrow(arrow))
        self.play(ReplacementTransform(fraction, reciprocal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Perimeter of Polygons""
    animation:  animate different polygons with labeled side lengths. Show the process of calculating the perimeter of each polygon by adding all the side lengths together.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PerimeterOfPolygons(Scene):
    def construct(self):
        title = Text(""Calculating Perimeter of Polygons"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Triangle
        triangle = Polygon([-1, 1, 0], [1, 1, 0], [0, -1, 0], color=WHITE)
        triangle_sides = VGroup(
            Tex(""5"").next_to(triangle, UP),
            Tex(""4"").next_to(triangle, RIGHT),
            Tex(""3"").next_to(triangle, LEFT)
        )
        triangle_perimeter = Tex(""Perimeter = 5 + 4 + 3 = 12"").next_to(triangle, DOWN)
        self.play(Create(triangle), Write(triangle_sides))
        self.wait(1)
        self.play(Write(triangle_perimeter))
        self.wait(2)
        self.play(FadeOut(triangle), FadeOut(triangle_sides), FadeOut(triangle_perimeter))

        # Square
        square = Square(side_length=2).shift(DOWN)
        square_sides = VGroup(
            Tex(""4"").next_to(square, UP),
            Tex(""4"").next_to(square, RIGHT),
            Tex(""4"").next_to(square, DOWN),
            Tex(""4"").next_to(square, LEFT)
        )
        square_perimeter = Tex(""Perimeter = 4 + 4 + 4 + 4 = 16"").next_to(square, DOWN)
        self.play(Create(square), Write(square_sides))
        self.wait(1)
        self.play(Write(square_perimeter))
        self.wait(2)
        self.play(FadeOut(square), FadeOut(square_sides), FadeOut(square_perimeter))

        # Pentagon
        pentagon = RegularPolygon(n=5, color=WHITE).scale(1.2).shift(DOWN)
        pentagon_sides = VGroup(
            *[Tex(""3"").next_to(pentagon, direction) for direction in [UP, UR, DR, DL, LEFT]]
        )
        pentagon_perimeter = Tex(""Perimeter = 3 + 3 + 3 + 3 + 3 = 15"").next_to(pentagon, DOWN)
        self.play(Create(pentagon), Write(pentagon_sides))
        self.wait(1)
        self.play(Write(pentagon_perimeter))
        self.wait(2)
        self.play(FadeOut(pentagon), FadeOut(pentagon_sides), FadeOut(pentagon_perimeter))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Measuring Angles in Radians""
    animation:  animate displaying an angle in a circle and measuring it in radians by showing the ratio of arc length to radius.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MeasureRadians(Scene):
    def construct(self):
        title = Text(""Measuring Angles in Radians"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        circle = Circle(radius=2)
        angle = ValueTracker(0)
        arc = always_redraw(lambda: Arc(radius=2, angle=angle.get_value()))
        line1 = Line(start=[0,0,0], end=[2,0,0])
        line2 = always_redraw(lambda: Line(start=[0,0,0], end=[2*np.cos(angle.get_value()), 2*np.sin(angle.get_value()), 0]))
        radius_text = Text(""Radius"", font_size=24).next_to(line1, DOWN)
        arc_length_text = always_redraw(lambda: Text(f""Arc length\n{np.round(arc.get_arc_length(),2)}"", font_size=24).next_to(arc, RIGHT, buff=0.1))
        angle_measure = always_redraw(lambda: DecimalNumber(angle.get_value() / PI, num_decimal_places=2).next_to(arc.get_arc_center(), UP+LEFT))

        self.play(Create(circle), Create(line1), Create(line2), Write(radius_text))
        self.play(angle.animate.set_value(2*PI), run_time=4, rate_func=linear)
        self.play(Create(arc), Write(arc_length_text), Write(angle_measure))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Density, Mass, and Volume""
    animation:  animate objects of different sizes and materials, illustrating the relationship between density, mass, and volume using the formula D = M / V.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DensityMassVolume(Scene):
    def construct(self):
        title = Text(""Density, Mass, and Volume"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Formula
        formula = MathTex(""D = \\frac{M}{V}"").to_edge(UP)
        self.play(Write(formula))
        self.wait(1)

        # Objects
        square = Square(color=BLUE).shift(LEFT*3)
        circle = Circle(color=GREEN).shift(RIGHT*3)
        square_text = Text(""High Density"", font_size=24).next_to(square, DOWN)
        circle_text = Text(""Low Density"", font_size=24).next_to(circle, DOWN)

        # Mass and Volume indicators
        square_mass = Text(""High M"", font_size=24).next_to(square, LEFT)
        square_volume = Text(""Low V"", font_size=24).next_to(square, RIGHT)
        circle_mass = Text(""Low M"", font_size=24).next_to(circle, LEFT)
        circle_volume = Text(""High V"", font_size=24).next_to(circle, RIGHT)

        self.play(DrawBorderThenFill(square), DrawBorderThenFill(circle))
        self.wait(1)
        self.play(Write(square_text), Write(circle_text))
        self.wait(1)
        self.play(Write(square_mass), Write(square_volume), Write(circle_mass), Write(circle_volume))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Prime Factorization Explained""
animation:  animate a composite number being displayed, followed by the number breaking down into its prime factors, illustrating the process of prime factorization.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PrimeFactorization(Scene):
    def construct(self):
        title = Text(""Prime Factorization Explained"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number = 12
        number_text = Text(str(number), font_size=72)
        self.play(Write(number_text))
        self.wait(1)

        factors = self.prime_factors(number)
        factors_text = VGroup(*[Text(str(factor), font_size=72) for factor in factors])
        factors_text.arrange(RIGHT, buff=0.5)

        self.play(Transform(number_text, factors_text))
        self.wait(2)

    def prime_factors(self, n):
        i = 2
        factors = []
        while i * i <= n:
            if n % i:
                i += 1
            else:
                n //= i
                factors.append(i)
        if n > 1:
            factors.append(n)
        return factors"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Elastic vs. Inelastic Collisions""
    animation:  animate two objects colliding. Show the difference between an elastic collision where kinetic energy is conserved, and an inelastic collision where kinetic energy is lost during the collision.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CollisionAnimation(Scene):
    def construct(self):
        title = Text(""Elastic vs. Inelastic Collisions"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Elastic Collision
        ball1 = Circle(color=BLUE).shift(LEFT*3)
        ball2 = Circle(color=RED).shift(RIGHT*3)
        self.play(FadeIn(ball1), FadeIn(ball2))
        self.play(ball1.animate.shift(RIGHT*2), ball2.animate.shift(LEFT*2))
        self.play(ball1.animate.shift(RIGHT*2), ball2.animate.shift(LEFT*2))
        self.wait(1)

        self.play(FadeOut(ball1), FadeOut(ball2))

        # Inelastic Collision
        ball1 = Circle(color=BLUE).shift(LEFT*3)
        ball2 = Circle(color=RED).shift(RIGHT*3)
        self.play(FadeIn(ball1), FadeIn(ball2))
        self.play(ball1.animate.shift(RIGHT*1.5), ball2.animate.shift(LEFT*1.5))
        merged_ball = Circle(color=PURPLE, fill_opacity=1).scale(1.5).shift(RIGHT*0.25)
        self.play(ReplacementTransform(ball1, merged_ball), ReplacementTransform(ball2, merged_ball))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Multiplying Decimals""
    animation:  animate two decimals being multiplied together, emphasizing the placement of the decimal point in the product.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingDecimals(Scene):
    def construct(self):
        title = Text(""Multiplying Decimals"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup numbers for multiplication
        decimal_1 = DecimalNumber(0.75, num_decimal_places=2).scale(2)
        decimal_2 = DecimalNumber(0.4, num_decimal_places=1).next_to(decimal_1, DOWN).scale(2)
        multiply_sign = Text(""*"").scale(2).next_to(decimal_1, LEFT)
        equals_sign = Text(""="").scale(2).next_to(decimal_1, RIGHT)

        # Group for alignment
        equation = VGroup(multiply_sign, decimal_1, decimal_2, equals_sign)

        # Result of multiplication
        result = DecimalNumber(0.75 * 0.4, num_decimal_places=2).scale(2).next_to(equals_sign, RIGHT)

        # Animate the multiplication process
        self.play(Write(multiply_sign), Write(decimal_1), Write(decimal_2))
        self.wait(1)
        self.play(Write(equals_sign))
        self.wait(1)
        self.play(TransformFromCopy(equation, result))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Balancing Act: Center of Mass""
animation:  animate a flat object (like a ruler) being balanced on a finger, demonstrating the concept of the center of mass and how it affects the object's stability.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CenterOfMass(Scene):
    def construct(self):
        title = Text(""Balancing Act: Center of Mass"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a flat object (ruler)
        ruler = Rectangle(color=BLUE, height=0.2, width=3)
        finger = Dot(color=RED)
        finger.move_to(ruler.get_bottom())

        self.play(FadeIn(ruler), FadeIn(finger))
        self.wait(1)

        # Animate the ruler balancing on the finger
        for _ in range(2):
            self.play(
                ruler.animate.rotate_about_origin(PI/12).move_to(finger.get_center() + UP * 0.1),
                run_time=1,
                rate_func=there_and_back
            )
            self.play(
                ruler.animate.rotate_about_origin(-PI/12).move_to(finger.get_center() + UP * 0.1),
                run_time=1,
                rate_func=there_and_back
            )

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Rotational Symmetry in Shapes""
animation:  animate shapes with different orders of rotational symmetry (e.g., square, pentagon) rotating around their center to demonstrate their rotational symmetry properties.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RotationalSymmetry(Scene):
    def construct(self):
        title = Text(""Rotational Symmetry in Shapes"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Square rotation
        square = Square(color=BLUE)
        self.play(Create(square))
        for _ in range(4):
            self.play(Rotate(square, angle=PI/2), run_time=1)
            self.wait(0.5)
        self.play(FadeOut(square))

        # Pentagon rotation
        pentagon = RegularPolygon(5, color=GREEN)
        self.play(Create(pentagon))
        for _ in range(5):
            self.play(Rotate(pentagon, angle=TAU/5), run_time=1)
            self.wait(0.5)
        self.play(FadeOut(pentagon))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Speed, Distance, and Time Relationship""
animation:  animate an object moving at a constant speed, illustrating the relationship between speed, distance, and time by showing how speed is calculated as distance divided by time.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SpeedDistanceTime(Scene):
    def construct(self):
        title = Text(""Speed, Distance, and Time Relationship"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup
        start_point = LEFT * 4
        end_point = RIGHT * 4
        object = Dot(start_point, color=RED)
        distance_line = Line(start_point, end_point).set_color(WHITE)
        distance_text = Text(""Distance"", color=WHITE).scale(0.5).next_to(distance_line, DOWN)
        
        # Time tracker
        time_tracker = ValueTracker(0)
        time_text = Text(""Time: "", color=WHITE).scale(0.5).to_edge(UP)
        time_value = DecimalNumber(time_tracker.get_value(), num_decimal_places=2).next_to(time_text, RIGHT)
        time_value.add_updater(lambda m: m.set_value(time_tracker.get_value()))

        # Speed calculation
        speed_text = Text(""Speed = Distance / Time"", color=WHITE).scale(0.5).next_to(time_text, DOWN)
        
        # Animation
        self.play(ShowCreation(distance_line), Write(distance_text))
        self.play(FadeIn(object))
        self.play(Write(time_text), Write(time_value), Write(speed_text))
        self.play(
            object.animate.move_to(end_point),
            time_tracker.animate.set_value(5),  # Assuming it takes 5 seconds to move
            run_time=5,
            rate_func=linear
        )

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Absolute Value""
animation:  animate a number line with zero at the center, and show how the absolute value of a number is represented as the distance from zero on the number line, emphasizing the concept of magnitude without direction.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class AbsoluteValueScene(Scene):
    def construct(self):
        # Title
        title = Text(""Understanding Absolute Value"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Number line
        number_line = NumberLine(x_range=[-5, 5, 1], length=10, include_numbers=True, include_tip=True)
        self.play(Create(number_line))
        self.wait(1)

        # Absolute value demonstration
        dot = Dot(color=RED).move_to(number_line.n2p(0))
        self.play(FadeIn(dot))

        # Animate absolute value of -3
        negative_three = number_line.n2p(-3)
        self.play(dot.animate.move_to(negative_three))
        self.wait(1)
        distance_line = DashedLine(start=number_line.n2p(0), end=negative_three, color=YELLOW)
        self.play(Create(distance_line))
        self.wait(2)
        self.play(FadeOut(distance_line), dot.animate.move_to(number_line.n2p(0)))

        # Animate absolute value of 3
        three = number_line.n2p(3)
        self.play(dot.animate.move_to(three))
        self.wait(1)
        distance_line = DashedLine(start=number_line.n2p(0), end=three, color=YELLOW)
        self.play(Create(distance_line))
        self.wait(2)

        # Cleanup
        self.play(FadeOut(dot), FadeOut(distance_line), FadeOut(number_line))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Solving Proportions with Cross-Multiplication""
    animation:  display a proportion such as 2/3 = x/6 on the screen. Animate the process of cross-multiplying and dividing to solve for the unknown value of x.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SolveProportion(Scene):
    def construct(self):
        title = Text(""Solving Proportions with Cross-Multiplication"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        proportion = Text(""2/3 = x/6"").scale(1)
        self.play(Write(proportion))
        self.wait(2)

        cross_multiply = Text(""2 * 6 = 3 * x"", color=BLUE).next_to(proportion, DOWN)
        self.play(Transform(proportion, cross_multiply))
        self.wait(2)

        solve_for_x = Text(""x = 12 / 3"", color=GREEN).next_to(cross_multiply, DOWN)
        self.play(Write(solve_for_x))
        self.wait(2)

        x_value = Text(""x = 4"", color=RED).next_to(solve_for_x, DOWN)
        self.play(Transform(solve_for_x, x_value))
        self.wait(2)

        self.play(FadeOut(proportion), FadeOut(solve_for_x))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Projectile Motion Simulation""
    animation:  animate an object being launched at an angle, showing its parabolic path and the effects of gravity on its trajectory.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ProjectileMotionSimulation(Scene):
    def construct(self):
        title = Text(""Projectile Motion Simulation"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parameters for the projectile motion
        velocity = 5
        angle = 45
        g = 9.8
        time_of_flight = 2 * velocity * np.sin(np.radians(angle)) / g
        max_height = (velocity**2) * (np.sin(np.radians(angle))**2) / (2 * g)
        range_projectile = (velocity**2) * np.sin(2 * np.radians(angle)) / g

        # Creating the trajectory path
        trajectory = FunctionGraph(
            lambda x: x * np.tan(np.radians(angle)) - (g * x**2) / (2 * velocity**2 * np.cos(np.radians(angle))**2),
            x_range=[0, range_projectile],
            color=BLUE
        )

        # Creating the object
        projectile = Dot(radius=0.2, color=RED)
        projectile.move_to(trajectory.points[0])

        # Animate the projectile along the path
        self.play(MoveAlongPath(projectile, trajectory, rate_func=linear), run_time=time_of_flight)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exponents and Square Roots""
    animation:  animate a number being multiplied by itself to demonstrate an exponent operation. Next, animate finding the square root as the inverse operation, showing the original number being reconstructed from the squared result.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ExponentsAndSquareRoots(Scene):
    def construct(self):
        # Title
        title = Text(""Exponents and Square Roots"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Exponent operation
        number = Text(""3"")
        times = Text(""×"")
        number2 = Text(""3"")
        equals = Text(""="")
        result = Text(""9"")

        exponent_group = VGroup(number, times, number2, equals, result)
        exponent_group.arrange(RIGHT)

        self.play(Write(number), Write(times), Write(number2))
        self.wait(1)
        self.play(Write(equals), Write(result))
        self.wait(2)
        self.play(FadeOut(exponent_group))

        # Square root operation
        sqrt_sign = Text(""√"")
        squared_result = Text(""9"")
        equals_sqrt = Text(""="")
        original_number = Text(""3"")

        sqrt_group = VGroup(sqrt_sign, squared_result, equals_sqrt, original_number)
        sqrt_group.arrange(RIGHT)

        self.play(Write(sqrt_sign), Write(squared_result))
        self.wait(1)
        self.play(Write(equals_sqrt), Write(original_number))
        self.wait(2)
        self.play(FadeOut(sqrt_group))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Associative Property of Multiplication""
    animation:  animate multiplying three numbers in different groupings, such as (2 × 3) × 4 and 2 × (3 × 4), and show that the product remains the same in each case, illustrating the associative property of multiplication.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class AssociativeProperty(Scene):
    def construct(self):
        title = Text(""Associative Property of Multiplication"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # First grouping (2 × 3) × 4
        first_group = MathTex(""(2 \\times 3) \\times 4 = 6 \\times 4 = 24"").scale(0.7)
        self.play(Write(first_group))
        self.wait(2)
        self.play(FadeOut(first_group))

        # Second grouping 2 × (3 × 4)
        second_group = MathTex(""2 \\times (3 \\times 4) = 2 \\times 12 = 24"").scale(0.7)
        self.play(Write(second_group))
        self.wait(2)

        # Conclusion
        conclusion = Text(""The product remains the same!"").scale(0.7)
        self.play(ReplacementTransform(second_group, conclusion))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Rounding Numbers on a Number Line""
animation:  animate a number line with a number displayed on it. Show the number being rounded to the nearest ten, hundred, or thousand with a visual representation of the rounding process.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RoundingNumbers(Scene):
    def construct(self):
        title = Text(""Rounding Numbers on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[-1000, 1000, 100], length=10, include_numbers=True, numbers_to_exclude=[0])
        self.play(Create(number_line))
        self.wait(1)

        # Example number to round
        number = 253
        point = Dot(number_line.n2p(number), color=YELLOW)
        number_label = MathTex(str(number)).next_to(point, UP)
        self.play(FadeIn(point), Write(number_label))
        self.wait(1)

        # Rounding to the nearest ten
        rounded_ten = round(number, -1)
        rounded_ten_point = Dot(number_line.n2p(rounded_ten), color=GREEN)
        rounded_ten_label = MathTex(str(rounded_ten)).next_to(rounded_ten_point, UP)
        self.play(Transform(point, rounded_ten_point), Transform(number_label, rounded_ten_label))
        self.wait(1)

        # Rounding to the nearest hundred
        rounded_hundred = round(number, -2)
        rounded_hundred_point = Dot(number_line.n2p(rounded_hundred), color=BLUE)
        rounded_hundred_label = MathTex(str(rounded_hundred)).next_to(rounded_hundred_point, UP)
        self.play(Transform(point, rounded_hundred_point), Transform(number_label, rounded_hundred_label))
        self.wait(1)

        # Rounding to the nearest thousand
        rounded_thousand = round(number, -3)
        if rounded_thousand == 0:  # Avoid placing a dot at the origin if rounded to 0
            rounded_thousand_point = Dot(number_line.n2p(1), color=RED).move_to(number_line.n2p(rounded_thousand))
        else:
            rounded_thousand_point = Dot(number_line.n2p(rounded_thousand), color=RED)
        rounded_thousand_label = MathTex(str(rounded_thousand)).next_to(rounded_thousand_point, UP)
        self.play(Transform(point, rounded_thousand_point), Transform(number_label, rounded_thousand_label))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Complementary and Supplementary Angles in a Triangle""
animation:  animate a triangle with one 90° angle, and demonstrate how the other two angles are complementary, summing up to 90°.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ComplementaryAndSupplementary(Scene):
    def construct(self):
        title = Text(""Complementary and Supplementary Angles in a Triangle"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a right-angled triangle
        right_triangle = Polygon(ORIGIN, 4*RIGHT, 4*RIGHT+3*UP, color=WHITE)
        right_angle_marker = RightAngle(right_triangle, 1, length=0.3, quadrant=(-1,1))
        self.play(Create(right_triangle), Create(right_angle_marker))
        self.wait(1)

        # Labels for the angles
        angle_90 = MathTex(""90^\\circ"").next_to(right_angle_marker, DOWN, buff=0.1)
        self.play(Write(angle_90))

        # Other two angles
        angle_a = Angle(right_triangle[2], right_triangle[0], right_triangle[1], radius=0.5, color=YELLOW)
        angle_b = Angle(right_triangle[0], right_triangle[1], right_triangle[2], radius=0.5, color=BLUE)
        angle_a_label = MathTex(""\\alpha"").move_to(angle_a.point_from_proportion(0.5))
        angle_b_label = MathTex(""\\beta"").move_to(angle_b.point_from_proportion(0.5))
        self.play(Create(angle_a), Write(angle_a_label), Create(angle_b), Write(angle_b_label))
        self.wait(1)

        # Complementary angles text
        complementary_text = Text(""α + β = 90°"", font_size=36).to_edge(DOWN)
        self.play(Write(complementary_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Multiplying Powers with the Same Base""
    animation:  display two powers with the same base side by side, and animate multiplying them by adding their exponents to show the result.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingPowers(Scene):
    def construct(self):
        title = Text(""Multiplying Powers with the Same Base"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        power1 = MathTex(""a^m"").shift(LEFT)
        times = MathTex(""\\times"").next_to(power1, RIGHT)
        power2 = MathTex(""a^n"").next_to(times, RIGHT)
        equals = MathTex(""="").next_to(power2, RIGHT)
        result = MathTex(""a^{m+n}"").next_to(equals, RIGHT)

        self.play(Write(power1), Write(times), Write(power2))
        self.wait(1)
        self.play(TransformMatchingTex(power1.copy(), result[0][0]), 
                  TransformMatchingTex(power2.copy(), result[0][2:]),
                  Write(equals))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Dividing Fractions Illustrated""
animation:  animate two fractions side by side, and show the process of dividing them by multiplying the first fraction by the reciprocal of the second fraction.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DividingFractions(Scene):
    def construct(self):
        title = Text(""Dividing Fractions Illustrated"")
        title.scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Fractions
        fraction1 = MathTex(r""\frac{3}{4}"")
        fraction2 = MathTex(r""\frac{5}{6}"")
        times = MathTex(r""\times"")
        equals = MathTex(r""="")
        reciprocal = MathTex(r""\frac{6}{5}"")

        fraction_group = VGroup(fraction1, times, fraction2, equals, reciprocal).arrange(RIGHT)

        self.play(Write(fraction1), Write(fraction2))
        self.wait(1)
        self.play(Write(times))
        self.wait(1)
        self.play(Transform(fraction2.copy(), reciprocal))
        self.wait(1)
        self.play(Write(equals))
        self.wait(1)
        self.play(Write(reciprocal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Statistical Measures Visualization""
animation:  display a set of numbers and animate finding the mean (average), median (middle value), and mode (most frequent value) of the set.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class StatisticalMeasuresVisualization(Scene):
    def construct(self):
        title = Text(""Statistical Measures Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        numbers = [1, 2, 3, 4, 5, 3, 3]
        numbers_text = Text(str(numbers)).scale(0.8)
        self.play(Write(numbers_text))
        self.wait(2)

        mean_value = sum(numbers) / len(numbers)
        mean_text = Text(f""Mean: {mean_value}"").to_edge(DOWN)
        self.play(Transform(numbers_text, mean_text))
        self.wait(2)

        numbers.sort()
        if len(numbers) % 2 == 0:
            median_value = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2
        else:
            median_value = numbers[len(numbers) // 2]
        median_text = Text(f""Median: {median_value}"").to_edge(DOWN)
        self.play(Transform(numbers_text, median_text))
        self.wait(2)

        mode_value = max(set(numbers), key=numbers.count)
        mode_text = Text(f""Mode: {mode_value}"").to_edge(DOWN)
        self.play(Transform(numbers_text, mode_text))
        self.wait(2)

        self.play(FadeOut(numbers_text))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Friction and Sliding Objects""
animation:  animate an object sliding on a surface. Show how friction acts in the opposite direction to the object's motion, slowing it down and eventually bringing it to a stop.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FrictionAnimation(Scene):
    def construct(self):
        # Title
        title = Text(""Friction and Sliding Objects"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Surface
        surface = Line(LEFT * 5, RIGHT * 5)
        self.play(Create(surface))

        # Object
        object = Square(color=BLUE).scale(0.5)
        object.move_to(LEFT * 4)
        self.play(FadeIn(object))

        # Motion and Friction
        friction_arrow = Arrow(object.get_center(), object.get_center() + LEFT, buff=0, color=RED)
        motion_arrow = Arrow(object.get_center(), object.get_center() + RIGHT, buff=0, color=GREEN)

        self.play(ShowCreation(motion_arrow), GrowArrow(friction_arrow))
        for _ in range(5):
            self.play(object.animate.shift(RIGHT * 0.8), run_time=0.5)
            self.play(object.animate.shift(LEFT * 0.2), run_time=0.5)
            motion_arrow.scale(0.8, about_point=object.get_center())
            friction_arrow.scale(0.8, about_point=object.get_center())

        self.play(FadeOut(object), FadeOut(motion_arrow), FadeOut(friction_arrow), FadeOut(surface))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Simplifying Ratios""
    animation:  display a ratio on the screen and animate simplifying it by dividing both terms by their greatest common factor, showing the process of reducing the ratio to its simplest form.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SimplifyingRatios(Scene):
    def construct(self):
        title = Text(""Simplifying Ratios"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Display the initial ratio
        ratio = Text(""12:36"").scale(1.5)
        self.play(Write(ratio))
        self.wait(2)

        # Show the process of simplifying the ratio
        simplified_ratio = Text(""= 1:3"", color=BLUE).next_to(ratio, DOWN)
        self.play(TransformMatchingShapes(ratio.copy(), simplified_ratio))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Symmetry in Polygons""
animation:  animate examples of polygons with line symmetry (e.g., equilateral triangle) and rotational symmetry (e.g., square), showcasing their symmetrical properties.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SymmetryInPolygons(Scene):
    def construct(self):
        title = Text(""Symmetry in Polygons"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Line symmetry in an equilateral triangle
        triangle = RegularPolygon(n=3).scale(2)
        line_of_symmetry = Line(start=triangle.get_top(), end=triangle.get_bottom(), color=RED)
        self.play(Create(triangle))
        self.wait(1)
        self.play(ShowCreation(line_of_symmetry))
        self.wait(2)
        self.play(FadeOut(triangle), FadeOut(line_of_symmetry))

        # Rotational symmetry in a square
        square = Square().scale(2)
        dot_center = Dot(square.get_center(), color=RED)
        self.play(Create(square))
        self.wait(1)
        self.play(FadeIn(dot_center))
        self.play(Rotate(square, angle=PI/2), Rotate(dot_center, angle=PI/2))
        self.wait(1)
        self.play(FadeOut(square), FadeOut(dot_center))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Converting Between Percentages and Decimals""
    animation:  animate displaying a percentage value and show the process of converting it to a decimal by dividing by 100.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ConvertPercentageToDecimal(Scene):
    def construct(self):
        title = Text(""Converting Between Percentages and Decimals"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        percentage = Text(""75%"", font_size=72)
        equals = Text(""="", font_size=72).next_to(percentage, RIGHT)
        division = Text(""/ 100 = ?"", font_size=72).next_to(equals, RIGHT)
        self.play(Write(percentage))
        self.play(Write(equals), Write(division))
        self.wait(2)

        decimal = Text(""0.75"", font_size=72).next_to(equals, RIGHT)
        self.play(ReplacementTransform(division, decimal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Work Done""
    animation:  animate an object being pushed or lifted, and show the calculation of work done as force multiplied by distance.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WorkDone(Scene):
    def construct(self):
        title = Text(""Calculating Work Done"").scale(0.9)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        # Object
        box = Square(color=BLUE, fill_opacity=1).scale(0.5)
        self.play(FadeIn(box))
        self.wait(0.5)

        # Force arrow
        force_arrow = Arrow(start=box.get_center(), end=box.get_center() + RIGHT * 2, buff=0, color=YELLOW)
        force_text = Text(""Force"", color=YELLOW).next_to(force_arrow, UP, buff=0.1)
        self.play(GrowArrow(force_arrow), Write(force_text))
        self.wait(0.5)

        # Movement
        path = Line(start=box.get_center(), end=box.get_center() + RIGHT * 3)
        self.play(MoveAlongPath(box, path), run_time=2)
        self.play(FadeOut(force_arrow), FadeOut(force_text))

        # Distance
        distance_line = Line(start=box.get_center() + DOWN * 0.5 + LEFT * 1.5, end=box.get_center() + DOWN * 0.5 + RIGHT * 1.5)
        distance_text = Text(""Distance"", color=GREEN).next_to(distance_line, DOWN, buff=0.1)
        self.play(ShowCreation(distance_line), Write(distance_text))
        self.wait(0.5)

        # Work done calculation
        work_done = Text(""Work = Force × Distance"", color=RED).to_edge(DOWN)
        self.play(Write(work_done))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Distributive Property Visualization""
animation:  animate a number being multiplied by a sum (e.g., 2(x + 3)) and show the distribution of the multiplication over the addition, visually illustrating the distributive property in action.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DistributiveProperty(Scene):
    def construct(self):
        title = Text(""Distributive Property Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        equation = Text(""2(x + 3) = 2x + 6"").scale(1.2)
        highlight1 = SurroundingRectangle(equation[0][2:9], color=YELLOW)
        highlight2 = SurroundingRectangle(equation[0][12:], color=YELLOW)

        self.play(Write(equation))
        self.wait(1)
        self.play(Create(highlight1))
        self.wait(1)
        self.play(ReplacementTransform(highlight1, highlight2))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Solving Equations with Inverse Operations""
animation:  display an equation (e.g., x + 5 = 10) and animate the process of using the inverse operation (subtraction) to solve for the variable x.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SolveEquation(Scene):
    def construct(self):
        title = Text(""Solving Equations with Inverse Operations"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        equation = Text(""x + 5 = 10"").scale(0.7)
        self.play(Write(equation))
        self.wait(1)

        subtract_5 = Text(""-5"", color=RED).next_to(equation, DOWN)
        self.play(Write(subtract_5))
        self.wait(1)

        equation_solved = Text(""x = 5"").scale(0.7).next_to(equation, DOWN, buff=1)
        self.play(ReplacementTransform(equation.copy(), equation_solved), FadeOut(subtract_5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Velocity and Acceleration Illustrated""
animation:  animate an object moving with changing speed, clearly showing the difference between velocity (speed with direction) and acceleration (change in velocity) through visual representations.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class VelocityAcceleration(Scene):
    def construct(self):
        title = Text(""Velocity and Acceleration Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a dot to represent the object
        dot = Dot(color=BLUE).move_to(3*LEFT)
        path = VMobject(color=WHITE)
        path.set_points_as_corners([dot.get_center(), dot.get_center()])

        def update_path(path):
            previous_path = path.copy()
            previous_path.add_points_as_corners([dot.get_center()])
            path.become(previous_path)

        path.add_updater(update_path)
        self.add(path, dot)

        # Animate the dot with changing velocity and show acceleration vector
        self.play(dot.animate.shift(4*RIGHT), rate_func=there_and_back, run_time=4)
        acceleration_arrow = Arrow(dot.get_center(), dot.get_center() + RIGHT, buff=0, color=YELLOW)
        acceleration_arrow.add_updater(lambda m: m.put_start_and_end_on(dot.get_center(), dot.get_center() + RIGHT*dot.get_center()[0]*0.2))

        self.add(acceleration_arrow)
        self.wait(2)

        # Show velocity vector
        velocity_arrow = Arrow(dot.get_center(), dot.get_center() + RIGHT, buff=0, color=GREEN)
        velocity_arrow.add_updater(lambda m: m.put_start_and_end_on(dot.get_center(), dot.get_center() + RIGHT if dot.get_center()[0] < 0 else dot.get_center() + LEFT))

        self.add(velocity_arrow)
        self.wait(4)

        self.play(FadeOut(velocity_arrow), FadeOut(acceleration_arrow), FadeOut(dot), FadeOut(path))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Properties of Parallelograms""
    animation:  animate a parallelogram displaying its properties - opposite sides are parallel and equal in length, and opposite angles are equal in measure.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ParallelogramProperties(Scene):
    def construct(self):
        title = Text(""Properties of Parallelograms"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a parallelogram
        parallelogram = Polygon(
            np.array([-2, 1, 0]),
            np.array([2, 1, 0]),
            np.array([3, -1, 0]),
            np.array([-1, -1, 0]),
            color=BLUE
        )
        self.play(Create(parallelogram))
        self.wait(1)

        # Annotations for parallel and equal sides
        parallel_sign = Tex(""||"").scale(0.5)
        parallel_sign.move_to(np.array([-1.5, 0, 0]))
        self.play(Write(parallel_sign))

        parallel_sign_2 = parallel_sign.copy()
        parallel_sign_2.move_to(np.array([2.5, 0, 0]))
        self.play(Write(parallel_sign_2))

        equal_length = Tex(""=="").scale(0.5)
        equal_length.move_to(np.array([0.5, 1.2, 0]))
        self.play(Write(equal_length))

        equal_length_2 = equal_length.copy()
        equal_length_2.move_to(np.array([0.5, -1.2, 0]))
        self.play(Write(equal_length_2))

        # Annotations for angles
        angle_a = Angle(parallelogram.get_vertices()[0], parallelogram.get_vertices()[1], parallelogram.get_vertices()[3], radius=0.3, color=YELLOW)
        angle_b = angle_a.copy()
        angle_b.move_to(parallelogram.get_vertices()[2], aligned_edge=DOWN)
        self.play(Create(angle_a), Create(angle_b))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Calculating Simple Interest""
animation:  animate showing a principal amount, interest rate, and time values on the screen. Calculate the simple interest earned by multiplying the principal amount, interest rate, and time, and display the result.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SimpleInterest(Scene):
    def construct(self):
        title = Text(""Calculating Simple Interest"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Displaying principal amount, interest rate, and time
        principal_text = Text(""Principal: $1000"", font_size=24)
        interest_text = Text(""Interest Rate: 5%"", font_size=24).next_to(principal_text, DOWN)
        time_text = Text(""Time: 3 years"", font_size=24).next_to(interest_text, DOWN)

        self.play(Write(principal_text), Write(interest_text), Write(time_text))
        self.wait(2)

        # Calculating simple interest
        simple_interest = 1000 * 0.05 * 3
        result_text = Text(f""Simple Interest: ${simple_interest}"", font_size=24).next_to(time_text, DOWN)

        self.play(Write(result_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Types of Levers""
animation:  animate examples of first, second, and third-class levers in action, demonstrating how they balance effort and load. Show how each type of lever functions and the mechanical advantage it provides.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LeversAnimation(Scene):
    def create_lever(self, fulcrum_position, effort_position, load_position, lever_length=6):
        # Base line for the lever
        lever = Line(start=LEFT*lever_length/2, end=RIGHT*lever_length/2, color=WHITE)
        lever.move_to(UP*0.5)
        
        # Fulcrum
        fulcrum = Triangle().scale(0.2).set_fill(ORANGE, opacity=1)
        fulcrum.next_to(lever, DOWN, buff=0).shift(fulcrum_position*RIGHT)
        
        # Effort
        effort = Circle(color=BLUE, fill_opacity=1).scale(0.2)
        effort.next_to(lever, UP, buff=0).shift(effort_position*RIGHT)
        
        # Load
        load = Square(color=RED, fill_opacity=1).scale(0.4)
        load.next_to(lever, UP, buff=0).shift(load_position*RIGHT)
        
        return VGroup(lever, fulcrum, effort, load)

    def construct(self):
        title = Text(""Understanding Types of Levers"", font_size=24)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))
        
        # First-class lever
        first_class_lever = self.create_lever(fulcrum_position=0, effort_position=-2, load_position=2)
        self.play(ShowCreation(first_class_lever))
        self.wait(2)
        self.play(FadeOut(first_class_lever))
        
        # Second-class lever
        second_class_lever = self.create_lever(fulcrum_position=-3, effort_position=2, load_position=1)
        self.play(ShowCreation(second_class_lever))
        self.wait(2)
        self.play(FadeOut(second_class_lever))
        
        # Third-class lever
        third_class_lever = self.create_lever(fulcrum_position=-3, effort_position=1, load_position=2)
        self.play(ShowCreation(third_class_lever))
        self.wait(2)
        self.play(FadeOut(third_class_lever))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Multiplying Mixed Numbers""
animation:  display two mixed numbers and animate converting them to improper fractions. Next, show the multiplication of the two improper fractions and simplify the result.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingMixedNumbers(Scene):
    def construct(self):
        # Title
        title = Text(""Multiplying Mixed Numbers"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Mixed numbers
        mixed_number_1 = Text(""2 1/3"").scale(1)
        mixed_number_2 = Text(""1 3/4"").next_to(mixed_number_1, DOWN, buff=0.5).scale(1)

        self.play(Write(mixed_number_1), Write(mixed_number_2))
        self.wait(2)

        # Convert to improper fractions
        improper_fraction_1 = Text(""7/3"").next_to(mixed_number_1, RIGHT, buff=1)
        improper_fraction_2 = Text(""7/4"").next_to(mixed_number_2, RIGHT, buff=1)

        self.play(Transform(mixed_number_1, improper_fraction_1))
        self.play(Transform(mixed_number_2, improper_fraction_2))
        self.wait(2)

        # Multiplication
        multiplication = Text(""="").next_to(improper_fraction_1, RIGHT, buff=0.5)
        result_fraction = Text(""49/12"").next_to(multiplication, RIGHT, buff=0.5)

        self.play(Write(multiplication))
        self.play(Write(result_fraction))
        self.wait(2)

        # Simplify
        simplified_fraction = Text(""= 4 1/12"").next_to(result_fraction, RIGHT, buff=0.5)

        self.play(Write(simplified_fraction))
        self.wait(2)

        # Clear
        self.play(FadeOut(mixed_number_1), FadeOut(mixed_number_2), FadeOut(improper_fraction_1), FadeOut(improper_fraction_2), FadeOut(multiplication), FadeOut(result_fraction), FadeOut(simplified_fraction))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Average Acceleration Calculation""
animation:  animate an object changing its velocity over time. Show the calculation of its average acceleration as the change in velocity divided by time.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class AverageAcceleration(Scene):
    def construct(self):
        title = Text(""Average Acceleration Calculation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Animate object moving with changing velocity
        object = Circle().set_fill(PINK, opacity=0.5)
        start_point = LEFT * 4
        end_point = RIGHT * 4
        self.play(FadeIn(object.move_to(start_point)))
        self.wait(1)
        self.play(object.animate.shift(RIGHT * 2).set_fill(GREEN, opacity=0.5), run_time=2, rate_func=linear)
        self.wait(1)
        self.play(object.animate.shift(RIGHT * 2).set_fill(BLUE, opacity=0.5), run_time=1, rate_func=linear)
        self.wait(1)

        # Calculation of average acceleration
        formula = MathTex(r""a_{avg} = \frac{\Delta v}{\Delta t}"")
        self.play(Write(formula))
        self.wait(2)

        # Show change in velocity and time
        delta_v = MathTex(r""\Delta v = v_f - v_i = 4\,m/s - 2\,m/s = 2\,m/s"")
        delta_t = MathTex(r""\Delta t = 3\,s"")
        calculation = MathTex(r""a_{avg} = \frac{2\,m/s}{3\,s} = \frac{2}{3}\,m/s^2"")
        delta_v.next_to(formula, DOWN)
        delta_t.next_to(delta_v, DOWN)
        calculation.next_to(delta_t, DOWN)

        self.play(ReplacementTransform(formula, delta_v))
        self.wait(1)
        self.play(Write(delta_t))
        self.wait(1)
        self.play(Write(calculation))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Uniform Motion""
animation: Start with a title slide with the title, then animate an object moving in a straight line at a constant speed, illustrating the concept of uniform motion.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class UniformMotion(Scene):
    def construct(self):
        title = Text(""Uniform Motion"").scale(1.5)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        line = Line(LEFT*4, RIGHT*4)
        dot = Dot(LEFT*4)
        self.add(line, dot)
        self.play(MoveAlongPath(dot, line), run_time=4, rate_func=linear)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Newton's Second Law in Action""
    animation:  animate an object being pushed with a force and accelerating in the direction of the force, demonstrating the relationship F = ma as described by Newton's Second Law of Motion.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NewtonSecondLaw(Scene):
    def construct(self):
        title = Text(""Newton's Second Law in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup
        ground = Line(start=3*LEFT, end=3*RIGHT, color=WHITE)
        self.play(Create(ground))
        box = Square(side_length=0.5, color=BLUE)
        box.move_to(2.5*LEFT)
        self.play(Create(box))

        # Force arrow
        force_arrow = Arrow(start=box.get_center(), end=box.get_center() + RIGHT, buff=0, color=YELLOW)
        force_text = Text(""F"", font_size=24).next_to(force_arrow, UP, buff=0.1)
        self.play(GrowArrow(force_arrow), Write(force_text))

        # Acceleration
        self.play(box.animate.shift(4*RIGHT), run_time=2, rate_func=linear)
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Inertia""
animation:  animate an object at rest remaining stationary, and another object in motion continuing its motion at a constant velocity, both resisting changes to their state of motion when acted upon by external forces.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class UnderstandingInertia(Scene):
    def construct(self):
        title = Text(""Understanding Inertia"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Object at rest
        square_rest = Square(color=BLUE, fill_opacity=1).shift(LEFT*3)
        text_rest = Text(""Rest"", font_size=24).next_to(square_rest, DOWN)
        self.play(FadeIn(square_rest), Write(text_rest))
        self.wait(2)

        # Object in motion
        square_motion = Square(color=GREEN, fill_opacity=1).shift(RIGHT*3)
        text_motion = Text(""Motion"", font_size=24).next_to(square_motion, DOWN)
        self.play(FadeIn(square_motion), Write(text_motion))
        self.play(square_motion.animate.shift(RIGHT*2), run_time=2, rate_func=linear)
        self.wait(2)

        # Show resistance to change
        arrow = Arrow(start=ORIGIN, end=UP*1, buff=0, color=YELLOW)
        arrow_rest = arrow.copy().next_to(square_rest, UP)
        arrow_motion = arrow.copy().next_to(square_motion, UP)
        self.play(GrowArrow(arrow_rest), GrowArrow(arrow_motion))
        self.wait(2)

        self.play(FadeOut(square_rest, square_motion, text_rest, text_motion, arrow_rest, arrow_motion))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Hooke's Law Illustrated""
    animation:  animate a spring being stretched or compressed, demonstrating how the force applied is proportional to the displacement according to Hooke's Law (F = kx).
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class HookesLaw(Scene):
    def construct(self):
        title = Text(""Hooke's Law Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Spring setup
        spring = Spring().shift(LEFT*2)
        block = Square().next_to(spring, RIGHT)
        equilibrium = Text(""Equilibrium"", font_size=24).next_to(spring, UP, buff=0.1)

        self.play(FadeIn(spring, shift=RIGHT), FadeIn(block, shift=LEFT))
        self.play(Write(equilibrium))
        self.wait(1)

        # Stretching and compressing
        for _ in range(2):
            self.play(spring.stretch, 1.5, {""dim"": 0}, rate_func=there_and_back, run_time=2)
            self.play(block.shift, RIGHT*1.5, rate_func=there_and_back, run_time=2)
            self.play(spring.stretch, 0.5, {""dim"": 0}, rate_func=there_and_back, run_time=2)
            self.play(block.shift, LEFT*0.5, rate_func=there_and_back, run_time=2)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Calculating Pressure""
animation:  animate a force acting on a surface and show the calculation of pressure as the force divided by the area (P = F / A).
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PressureCalculation(Scene):
    def construct(self):
        title = Text(""Calculating Pressure"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Animate force arrow
        force_arrow = Arrow(start=2*LEFT, end=2*RIGHT, color=RED)
        force_label = MathTex(""F"", color=RED).next_to(force_arrow, UP)
        self.play(GrowArrow(force_arrow), Write(force_label))
        self.wait(1)

        # Animate surface
        surface = Line(start=3*DOWN + 2*LEFT, end=3*DOWN + 2*RIGHT)
        area_label = MathTex(""A"", color=BLUE).next_to(surface, DOWN)
        self.play(Write(surface), Write(area_label))
        self.wait(1)

        # Show calculation of pressure
        pressure_formula = MathTex(r""P = \frac{F}{A}"").shift(UP)
        self.play(Write(pressure_formula))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Heat Transfer Mechanisms""
animation:  animate examples of heat transfer through conduction, convection, and radiation. Show conduction with a hot object touching a cold object, convection with fluid motion transferring heat, and radiation with electromagnetic waves emitting heat.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class HeatTransferMechanisms(Scene):
    def construct(self):
        title = Text(""Heat Transfer Mechanisms"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Conduction
        hot_obj = Square(color=RED).shift(LEFT)
        cold_obj = Square(color=BLUE).shift(RIGHT)
        self.play(GrowFromCenter(hot_obj), GrowFromCenter(cold_obj))
        self.wait(1)
        heat_transfer = Line(LEFT, RIGHT).set_color(YELLOW)
        self.play(ShowCreation(heat_transfer))
        self.wait(2)
        self.play(FadeOut(hot_obj), FadeOut(cold_obj), FadeOut(heat_transfer))

        # Convection
        fluid = Rectangle(height=2, width=4, color=BLUE).shift(DOWN*0.5)
        arrows = VGroup(
            Arrow(ORIGIN, UP*0.5).shift(LEFT*1.5 + DOWN*0.5),
            Arrow(ORIGIN, UP*0.5).shift(LEFT*0.5 + DOWN*0.5),
            Arrow(ORIGIN, UP*0.5).shift(RIGHT*0.5 + DOWN*0.5),
            Arrow(ORIGIN, UP*0.5).shift(RIGHT*1.5 + DOWN*0.5),
        )
        self.play(ShowCreation(fluid))
        self.play(ShowCreation(arrows))
        self.wait(2)
        self.play(FadeOut(fluid), FadeOut(arrows))

        # Radiation
        source = Circle(color=YELLOW).scale(0.5)
        waves = VGroup(
            CurvedArrow(0.6*UP, 0.6*RIGHT, angle=-TAU/4),
            CurvedArrow(0.6*RIGHT, 0.6*DOWN, angle=-TAU/4),
            CurvedArrow(0.6*DOWN, 0.6*LEFT, angle=-TAU/4),
            CurvedArrow(0.6*LEFT, 0.6*UP, angle=-TAU/4),
        ).set_color(ORANGE)
        self.play(ShowCreation(source))
        self.play(ShowCreation(waves))
        self.wait(2)
        self.play(FadeOut(source), FadeOut(waves))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Light Reflection and Refraction""
animation:  animate a light ray reflecting off a mirror and refracting as it passes through a lens, demonstrating the principles of reflection and refraction of light.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LightReflectionRefraction(Scene):
    def construct(self):
        title = Text(""Light Reflection and Refraction"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Mirror
        mirror = Line(UP, DOWN).set_color(WHITE)
        mirror.shift(LEFT * 2)
        self.play(Create(mirror))

        # Lens
        lens = Ellipse(width=1.5, height=3, stroke_color=WHITE).shift(RIGHT * 2)
        self.play(Create(lens))

        # Incident Ray (towards mirror)
        incident_ray = Arrow(start=LEFT * 4 + UP * 2, end=LEFT * 2 + UP * 0.5, buff=0, color=YELLOW)
        self.play(Create(incident_ray))

        # Reflected Ray
        reflected_ray = Arrow(start=LEFT * 2 + UP * 0.5, end=LEFT * 0 + UP * 2, buff=0, color=YELLOW)
        self.play(Create(reflected_ray))

        # Refracted Ray (through lens)
        refracted_ray = Arrow(start=RIGHT * 2 + UP * 0.5, end=RIGHT * 4 + UP * 1, buff=0, color=YELLOW)
        self.play(Create(refracted_ray))

        # Incident Ray (towards lens)
        self.play(Transform(incident_ray, Arrow(start=LEFT * 0 + UP * 2, end=RIGHT * 2 + UP * 0.5, buff=0, color=YELLOW)))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Dispersion of Light""
    animation:  animate a prism splitting white light into its component colors, creating a rainbow effect.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DispersionOfLight(Scene):
    def construct(self):
        title = Text(""Dispersion of Light"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create prism and light
        prism = Polygon([-1, 2, 0], [1, 2, 0], [0, -1, 0], color=WHITE).scale(1.5)
        light = Line([-7, 0, 0], [-2, 0, 0], color=WHITE)
        self.play(ShowCreation(prism), ShowCreation(light))
        self.wait(1)

        # Create rainbow effect
        colors = [RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, VIOLET]
        rays = VGroup()
        for i, color in enumerate(colors):
            angle = i * 10 - 30
            ray = Line([-2, 0, 0], [3 * np.cos(np.radians(angle)), 3 * np.sin(np.radians(angle)), 0], color=color)
            rays.add(ray)

        self.play(Transform(light, rays))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Wave Types""
    animation:  animate examples of transverse waves (e.g., light) and longitudinal waves (e.g., sound), showcasing their distinct characteristics and motion patterns.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaveTypes(Scene):
    def construct(self):
        title = Text(""Exploring Wave Types"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Transverse Wave
        transverse_wave = FunctionGraph(
            lambda x: np.sin(x), x_range=[-3, 3], color=BLUE
        )
        transverse_wave_label = Text(""Transverse Wave (e.g., light)"").to_edge(UP)
        self.play(Create(transverse_wave), Write(transverse_wave_label))
        self.play(transverse_wave.animate.shift(UP*2).set_color(BLUE))
        self.play(transverse_wave.animate.shift(DOWN*4).set_color(BLUE))
        self.play(FadeOut(transverse_wave), FadeOut(transverse_wave_label))

        self.wait(1)

        # Longitudinal Wave
        dots = VGroup(*[Dot(radius=0.1).shift(RIGHT*i*0.5) for i in range(-6, 7)])
        original_positions = [dot.get_center() for dot in dots]
        longitudinal_wave_label = Text(""Longitudinal Wave (e.g., sound)"").to_edge(UP)

        def update_dots(dots):
            for i, dot in enumerate(dots):
                dot.move_to(original_positions[i] + np.array([np.sin(i + self.time*3)*0.2, 0, 0]))

        self.play(Write(longitudinal_wave_label))
        self.add(dots)
        dots.add_updater(update_dots)
        self.wait(4)
        dots.remove_updater(update_dots)
        self.play(FadeOut(dots), FadeOut(longitudinal_wave_label))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Wave Interference Patterns""
    animation:  animate two wave sources emitting waves and show the resulting interference pattern, demonstrating both constructive and destructive interference.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaveInterference(Scene):
    def construct(self):
        title = Text(""Wave Interference Patterns"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        source1 = Dot(point=LEFT*2, color=BLUE)
        source2 = Dot(point=RIGHT*2, color=RED)
        self.play(FadeIn(source1), FadeIn(source2))
        self.wait(1)

        waves1 = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=BLUE).move_to(source1.get_center()) for i in range(1, 20)])
        waves2 = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=RED).move_to(source2.get_center()) for i in range(1, 20)])

        def update_wave1(wave, dt):
            wave.scale(1.05)
            wave.set_stroke(opacity=max(0, wave.stroke_opacity - 0.05))

        def update_wave2(wave, dt):
            wave.scale(1.05)
            wave.set_stroke(opacity=max(0, wave.stroke_opacity - 0.05))

        for wave in waves1:
            wave.add_updater(update_wave1)
            self.add(wave)
            self.wait(0.1)
            wave.remove_updater(update_wave1)

        for wave in waves2:
            wave.add_updater(update_wave2)
            self.add(wave)
            self.wait(0.1)
            wave.remove_updater(update_wave2)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Coulomb's Law Visualization""
animation:  animate two charged particles with opposite charges to demonstrate the force of attraction between them. Next, animate two charged particles with the same charge to demonstrate the force of repulsion between them, illustrating Coulomb's Law.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CoulombsLawVisualization(Scene):
    def construct(self):
        title = Text(""Coulomb's Law Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Attraction
        positive_charge = Circle(color=RED, fill_opacity=1).shift(LEFT*2)
        positive_text = Text(""+"", color=WHITE).scale(2).move_to(positive_charge.get_center())
        negative_charge = Circle(color=BLUE, fill_opacity=1).shift(RIGHT*2)
        negative_text = Text(""-"", color=WHITE).scale(2).move_to(negative_charge.get_center())

        self.play(GrowFromCenter(positive_charge), Write(positive_text),
                  GrowFromCenter(negative_charge), Write(negative_text))
        self.wait(1)
        self.play(positive_charge.animate.shift(RIGHT*1.5), negative_charge.animate.shift(LEFT*1.5))
        self.wait(1)
        self.play(FadeOut(positive_charge), FadeOut(positive_text),
                  FadeOut(negative_charge), FadeOut(negative_text))

        # Repulsion
        positive_charge_1 = Circle(color=RED, fill_opacity=1).shift(LEFT*2 + DOWN*2)
        positive_text_1 = Text(""+"", color=WHITE).scale(2).move_to(positive_charge_1.get_center())
        positive_charge_2 = Circle(color=RED, fill_opacity=1).shift(RIGHT*2 + DOWN*2)
        positive_text_2 = Text(""+"", color=WHITE).scale(2).move_to(positive_charge_2.get_center())

        self.play(GrowFromCenter(positive_charge_1), Write(positive_text_1),
                  GrowFromCenter(positive_charge_2), Write(positive_text_2))
        self.wait(1)
        self.play(positive_charge_1.animate.shift(RIGHT*0.5), positive_charge_2.animate.shift(LEFT*0.5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Number Line Arithmetic""
    animation:  animate a point moving along a number line to the right for addition and to the left for subtraction, illustrating basic arithmetic operations.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NumberLineArithmetic(Scene):
    def construct(self):
        title = Text(""Number Line Arithmetic"").scale(0.9)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[-5, 5, 1], length=10, color=WHITE, include_numbers=True)
        self.play(Create(number_line))
        dot = Dot(point=number_line.n2p(0), color=YELLOW)
        self.play(FadeIn(dot))

        # Addition
        self.play(dot.animate.move_to(number_line.n2p(2)))
        self.wait(1)

        # Subtraction
        self.play(dot.animate.move_to(number_line.n2p(-1)))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Angles""
animation:  animate the formation of angles by rotating one line around a fixed point where it intersects another line. Highlight acute, obtuse, and right angles to illustrate the concept of angles.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class UnderstandingAngles(Scene):
    def construct(self):
        title = Text(""Understanding Angles"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create lines
        line1 = Line(ORIGIN, 2*RIGHT, color=WHITE)
        line2 = Line(ORIGIN, 2*UP, color=WHITE).rotate_about_origin(PI/4)
        dot = Dot(ORIGIN, color=YELLOW)

        self.play(Create(line1), Create(dot))
        self.play(Rotate(line2, angle=-PI/4, about_point=ORIGIN), run_time=2)
        self.wait(1)

        # Acute angle
        acute_angle = Angle(line1, line2, radius=0.5, color=GREEN)
        self.play(Create(acute_angle))
        self.wait(1)

        # Right angle
        self.play(Rotate(line2, angle=PI/4, about_point=ORIGIN), run_time=2)
        right_angle = RightAngle(line1, line2, length=0.5, color=BLUE)
        self.play(Transform(acute_angle, right_angle))
        self.wait(1)

        # Obtuse angle
        self.play(Rotate(line2, angle=PI/2, about_point=ORIGIN), run_time=2)
        obtuse_angle = Angle(line1, line2, radius=0.5, other_angle=True, color=RED)
        self.play(Transform(acute_angle, obtuse_angle))
        self.wait(2)

        self.play(FadeOut(line1), FadeOut(line2), FadeOut(dot), FadeOut(acute_angle))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Simple Harmonic Motion""
animation:  animate a pendulum swinging back and forth or a mass on a spring oscillating to demonstrate the basic idea of periodic motion.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SimpleHarmonicMotion(Scene):
    def construct(self):
        title = Text(""Simple Harmonic Motion"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Pendulum setup
        pivot = Dot(ORIGIN).shift(UP*2)
        bob = Dot().shift(DOWN*2)
        rod = Line(pivot.get_center(), bob.get_center()).set_stroke(width=2)
        pendulum = VGroup(pivot, rod, bob)

        def update_pendulum(mob, dt):
            rate = 2  # Speed of oscillation
            mob.rotate(rate * dt, about_point=pivot.get_center())

        pendulum.add_updater(update_pendulum)
        self.add(pendulum)
        self.wait(10)  # Let it swing for 10 seconds
        pendulum.clear_updaters()
        self.play(FadeOut(pendulum))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Visualizing Prime Numbers""
animation:  display a grid of numbers where prime numbers are highlighted in one color and non-prime numbers in another color. Optionally, animate the sieve of Eratosthenes algorithm to demonstrate how prime numbers are identified.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

class PrimeVisualization(Scene):
    def construct(self):
        title = Text(""Visualizing Prime Numbers"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        grid = VGroup()
        for i in range(1, 101):
            color = GREEN if is_prime(i) else RED
            number = Text(str(i), color=color).scale(0.5)
            grid.add(number)

        grid.arrange_in_grid(rows=10, cols=10, buff=0.5)
        self.play(Write(grid), run_time=3)
        self.wait(2)

        # Optional: Animate Sieve of Eratosthenes
        primes = []
        for i in range(2, 101):
            if is_prime(i):
                primes.append(i)
                for j in range(i*2, 101, i):
                    grid[j-1].set_color(BLUE)
                self.play(*[grid[j-1].animate.set_color(BLUE) for j in range(i*2, 101, i)], run_time=0.5)
                self.wait(0.5)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""The Water Cycle in Nature""
    animation:  animate clouds forming, raining, and the rainwater collecting back into a body of water, illustrating the process of evaporation, condensation, precipitation, and collection in the water cycle.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaterCycleScene(Scene):
    def construct(self):
        # Title
        title = Text(""The Water Cycle in Nature"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Clouds forming (Condensation)
        cloud1 = Circle(color=WHITE).shift(LEFT*2)
        cloud2 = Circle(color=WHITE).shift(LEFT*2 + UP*0.5)
        cloud3 = Circle(color=WHITE).shift(RIGHT*2)
        cloud4 = Circle(color=WHITE).shift(RIGHT*2 + UP*0.5)
        clouds = VGroup(cloud1, cloud2, cloud3, cloud4).scale(0.5)
        self.play(FadeIn(clouds))
        self.wait(2)

        # Rain (Precipitation)
        raindrops = VGroup(*[Line(start=3*UP + i*RIGHT*0.5, end=2*DOWN + i*RIGHT*0.5) for i in range(-5, 6)])
        self.play(ShowCreation(raindrops), run_time=2)
        self.wait(1)
        self.play(FadeOut(raindrops))

        # Water collection (Collection)
        water = Rectangle(width=FRAME_WIDTH, height=1, color=BLUE).shift(DOWN*1.5)
        self.play(FadeIn(water))
        self.wait(1)

        # Evaporation
        evaporation = Text(""Evaporation"", font_size=24).shift(UP*3)
        self.play(Write(evaporation))
        self.wait(2)
        self.play(FadeOut(evaporation), FadeOut(water), FadeOut(clouds))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Electric Circuit Demonstration""
animation:  animate a basic electrical circuit consisting of a battery, resistor, and a light bulb. Show the flow of current from the battery through the resistor, lighting up the bulb to demonstrate the circuit in action.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ElectricCircuitDemo(Scene):
    def construct(self):
        title = Text(""Electric Circuit Demonstration"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Drawing the circuit components
        battery = Rectangle(height=1, width=0.5).set_fill(BLUE, opacity=0.5)
        battery_text = Text(""Battery"", font_size=24).next_to(battery, UP)
        resistor = Rectangle(height=0.5, width=1).set_fill(RED, opacity=0.5)
        resistor_text = Text(""Resistor"", font_size=24).next_to(resistor, UP)
        bulb = Circle(radius=0.5).set_fill(YELLOW, opacity=0.5)
        bulb_text = Text(""Bulb"", font_size=24).next_to(bulb, UP)

        # Positioning
        battery.shift(LEFT * 3)
        resistor.next_to(battery, RIGHT, buff=1)
        bulb.next_to(resistor, RIGHT, buff=1)

        # Drawing wires
        wire1 = Line(battery.get_right(), resistor.get_left())
        wire2 = Line(resistor.get_right(), bulb.get_center())
        wire3 = Line(bulb.get_center(), battery.get_left())

        self.play(FadeIn(battery, battery_text, resistor, resistor_text, bulb, bulb_text, wire1, wire2, wire3))

        # Animate current flow
        current_dots = [Dot(color=RED).move_to(wire1.get_start()) for _ in range(5)]
        for dot in current_dots:
            self.add(dot)
            self.play(dot.animate(rate_func=linear).move_to(wire2.get_end()), run_time=2)
            self.play(dot.animate(rate_func=linear).move_to(wire3.get_end()), run_time=2)
            self.remove(dot)

        # Light up the bulb
        self.play(bulb.animate.set_fill(YELLOW, opacity=1))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Gravity in Action""
animation:  animate objects of different masses falling towards the Earth at the same rate, disregarding air resistance, to illustrate the concept of gravity.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class GravityInAction(Scene):
    def construct(self):
        title = Text(""Gravity in Action"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        earth = Circle(color=BLUE, fill_opacity=1).scale(0.5).shift(DOWN*3)
        earth_text = Text(""Earth"", color=WHITE).scale(0.5).next_to(earth, DOWN)
        self.add(earth, earth_text)

        # Objects with different masses
        object1 = Circle(color=RED, fill_opacity=1).scale(0.2).shift(UP*3 + LEFT*3)
        object2 = Square(color=YELLOW, fill_opacity=1).scale(0.3).shift(UP*3)
        object3 = Triangle(color=GREEN, fill_opacity=1).scale(0.25).shift(UP*3 + RIGHT*3)

        self.play(FadeIn(object1, object2, object3))
        self.wait(1)

        # Animate objects falling at the same rate
        self.play(object1.animate.shift(DOWN*6), object2.animate.shift(DOWN*6), object3.animate.shift(DOWN*6), run_time=2, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Seasons Explained""
    animation:  animate the Earth's tilt and orbit around the Sun, demonstrating how the angle of sunlight changes over the course of a year and how this leads to the occurrence of seasons.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SeasonsExplained(Scene):
    def construct(self):
        # Title
        title = Text(""Seasons Explained"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup
        sun = Circle(radius=0.5, color=YELLOW).shift(LEFT*3)
        earth = Circle(radius=0.2, color=BLUE).shift(RIGHT*3)
        orbit_path = Ellipse(width=6, height=3, color=WHITE).shift(LEFT*3)

        # Earth's tilt
        tilt_line = Line(earth.get_top(), earth.get_bottom(), color=WHITE)
        earth.add(tilt_line)
        earth_tilt = earth.copy().rotate(23.5 * DEGREES, about_point=earth.get_center())

        # Animation
        self.play(Create(sun), Create(orbit_path), Transform(earth, earth_tilt))
        self.play(earth.animate.move_to(orbit_path.point_from_proportion(0)))
        self.play(MoveAlongPath(earth, orbit_path), rate_func=linear, run_time=8)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Decimal to Binary Conversion""
animation:  animate the conversion of decimal numbers to binary by lighting up bits (0s and 1s) in a row to represent different decimal values.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DecimalToBinary(Scene):
    def construct(self):
        title = Text(""Decimal to Binary Conversion"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        numbers = [1, 2, 3, 4, 5, 6, 7, 8]
        for number in numbers:
            binary_string = format(number, 'b')
            binary_text = Text(binary_string, font_size=64)
            self.play(Write(binary_text))
            self.wait(1)
            self.play(FadeOut(binary_text))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Caesar Cipher Encryption and Decryption""
animation:  animate the process of encrypting a message using a Caesar cipher by shifting letters in the alphabet to the right, and decrypting the message by shifting letters to the left, visualizing simple data encryption and decryption.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CaesarCipher(Scene):
    def construct(self):
        title = Text(""Caesar Cipher Encryption and Decryption"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Encryption
        plaintext = Text(""HELLO"", font_size=48)
        self.play(Write(plaintext))
        self.wait(1)

        shift_text = Text(""Shift: 3"", font_size=36).next_to(plaintext, DOWN)
        self.play(Write(shift_text))
        self.wait(1)

        encrypted_text = Text(""KHOOR"", font_size=48).next_to(shift_text, DOWN)
        self.play(Transform(plaintext, encrypted_text))
        self.wait(2)

        # Decryption
        decrypt_text = Text(""Decrypt"", font_size=36).next_to(encrypted_text, DOWN)
        self.play(Write(decrypt_text))
        self.wait(1)

        decrypted_text = Text(""HELLO"", font_size=48).move_to(plaintext.get_center())
        self.play(Transform(encrypted_text, decrypted_text))
        self.wait(2)

        self.play(FadeOut(plaintext), FadeOut(shift_text), FadeOut(decrypted_text), FadeOut(decrypt_text))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Pythagorean Theorem Visualization""
animation:  animate a right-angled triangle with squares drawn on each side. As the triangle changes size, show that the sum of the areas of the squares on the two shorter sides always equals the area of the square on the longest side, illustrating the Pythagorean Theorem.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PythagoreanTheorem(Scene):
    def construct(self):
        title = Text(""Pythagorean Theorem Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a right-angled triangle
        triangle = Polygon(ORIGIN, 4*RIGHT, 3*UP, color=WHITE)
        square_hypotenuse = Square(side_length=5).move_to(triangle.get_center(), aligned_edge=DL).rotate_about_origin(triangle.get_angle()).set_color(BLUE)
        square_adjacent = Square(side_length=4).next_to(triangle, DOWN, buff=0).set_color(RED)
        square_opposite = Square(side_length=3).next_to(triangle, LEFT, buff=0).set_color(GREEN)

        self.play(Create(triangle))
        self.play(Create(square_hypotenuse), Create(square_adjacent), Create(square_opposite))
        self.wait(2)

        # Animate the triangle changing size
        for factor in [0.8, 1.2, 1.0]:
            new_triangle = Polygon(ORIGIN, 4*RIGHT*factor, 3*UP*factor, color=WHITE)
            new_square_hypotenuse = Square(side_length=5*factor).move_to(new_triangle.get_center(), aligned_edge=DL).rotate_about_origin(new_triangle.get_angle()).set_color(BLUE)
            new_square_adjacent = Square(side_length=4*factor).next_to(new_triangle, DOWN, buff=0).set_color(RED)
            new_square_opposite = Square(side_length=3*factor).next_to(new_triangle, LEFT, buff=0).set_color(GREEN)

            self.play(Transform(triangle, new_triangle), Transform(square_hypotenuse, new_square_hypotenuse), Transform(square_adjacent, new_square_adjacent), Transform(square_opposite, new_square_opposite), run_time=2)
            self.wait(1)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Doppler Effect Simulation""
animation:  animate a sound source (e.g., an ambulance) moving past an observer. Show the sound waves being compressed in front of the source and stretched out behind it, illustrating the change in pitch heard by the observer.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DopplerEffectSimulation(Scene):
    def construct(self):
        title = Text(""Doppler Effect Simulation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Sound source - Ambulance
        ambulance = Circle(color=RED, fill_opacity=1).scale(0.5)
        ambulance_text = Text(""Ambulance"", font_size=24).next_to(ambulance, DOWN)
        ambulance_group = VGroup(ambulance, ambulance_text)

        # Observer
        observer = Dot(color=BLUE).shift(4*RIGHT)
        observer_text = Text(""Observer"", font_size=24).next_to(observer, DOWN)
        observer_group = VGroup(observer, observer_text)

        self.play(FadeIn(ambulance_group), FadeIn(observer_group))
        self.wait(1)

        # Sound waves
        waves = VGroup()
        for i in range(5):
            wave = Circle(color=BLUE, fill_opacity=0.2).scale(i*0.5)
            wave.move_to(ambulance.get_center())
            waves.add(wave)

        def update_waves(waves):
            new_waves = VGroup()
            for wave in waves:
                new_wave = wave.copy()
                new_wave.scale(1.1, about_point=ambulance.get_center())
                if new_wave.width < 0.1 or new_wave.height < 0.1:
                    continue
                new_waves.add(new_wave)
            return new_waves

        self.play(ambulance_group.animate.shift(8*LEFT), UpdateFromFunc(waves, update_waves), run_time=4, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Magnetic Fields Interaction""
animation:  animate a bar magnet with field lines surrounding it. Introduce a second magnet and show how the field lines interact, demonstrating attraction and repulsion between the two magnets.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MagneticFieldsInteraction(Scene):
    def construct(self):
        title = Text(""Magnetic Fields Interaction"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Magnet 1
        magnet1 = Rectangle(color=RED, height=1, width=2).shift(LEFT*3)
        magnet1_label_n = Text(""N"", color=WHITE).scale(0.5).next_to(magnet1, UP, buff=0.1)
        magnet1_label_s = Text(""S"", color=WHITE).scale(0.5).next_to(magnet1, DOWN, buff=0.1)
        self.play(GrowFromCenter(magnet1), Write(magnet1_label_n), Write(magnet1_label_s))

        # Field lines for Magnet 1
        field_lines1 = VGroup(*[ArcBetweenPoints(start_point=magnet1.get_top() + UP*0.2 + LEFT*0.2*i,
                                                 end_point=magnet1.get_bottom() + DOWN*0.2 + LEFT*0.2*i,
                                                 angle=-TAU/4) for i in range(6)])
        self.play(ShowCreation(field_lines1))

        # Magnet 2
        magnet2 = Rectangle(color=BLUE, height=1, width=2).shift(RIGHT*3)
        magnet2_label_n = Text(""N"", color=WHITE).scale(0.5).next_to(magnet2, UP, buff=0.1)
        magnet2_label_s = Text(""S"", color=WHITE).scale(0.5).next_to(magnet2, DOWN, buff=0.1)
        self.play(GrowFromCenter(magnet2), Write(magnet2_label_n), Write(magnet2_label_s))

        # Field lines for Magnet 2
        field_lines2 = VGroup(*[ArcBetweenPoints(start_point=magnet2.get_top() + UP*0.2 + RIGHT*0.2*i,
                                                 end_point=magnet2.get_bottom() + DOWN*0.2 + RIGHT*0.2*i,
                                                 angle=TAU/4) for i in range(6)])
        self.play(ShowCreation(field_lines2))

        # Interaction
        self.play(magnet2.animate.shift(LEFT*2.5), rate_func=there_and_back, run_time=2)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Projectile Motion Simulation""
    animation:  animate an object being launched at an angle, showing its path as a parabola. The horizontal motion should be constant, while the vertical motion should be affected by gravity, causing the object to follow a curved trajectory.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ProjectileMotion(Scene):
    def construct(self):
        title = Text(""Projectile Motion Simulation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Constants for the projectile motion
        velocity = 5
        angle = 45
        gravity = 9.8
        time_of_flight = 2 * velocity * np.sin(np.radians(angle)) / gravity
        max_height = (velocity**2) * (np.sin(np.radians(angle))**2) / (2 * gravity)
        range = velocity * np.cos(np.radians(angle)) * time_of_flight

        # Creating the trajectory path
        trajectory = FunctionGraph(
            lambda x: x * np.tan(np.radians(angle)) - (gravity * x**2) / (2 * velocity**2 * np.cos(np.radians(angle))**2),
            x_range=[0, range],
            color=BLUE
        )

        # Creating the object
        object = Dot(radius=0.1, color=YELLOW)
        object.move_to(trajectory.points[0])

        # Animating the object along the path
        self.play(MoveAlongPath(object, trajectory, rate_func=linear), run_time=time_of_flight)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Photosynthesis in Action""
    animation:  animate a plant absorbing sunlight, CO2, and water to produce glucose and oxygen. Show the chloroplasts in the leaves and the chemical reaction taking place, illustrating the process of photosynthesis.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PhotosynthesisInAction(Scene):
    def construct(self):
        # Title
        title = Text(""Photosynthesis in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Elements of Photosynthesis
        sun = Circle(color=YELLOW, fill_opacity=1).scale(0.5).shift(UP*3 + LEFT*4)
        sun_text = Text(""Sunlight"", color=BLACK).scale(0.3).next_to(sun, DOWN)
        co2 = Text(""CO2"", color=WHITE).scale(0.5).shift(UP*3 + RIGHT*4)
        water = SVGMobject().set(width=0.5).move_to(DOWN*2 + LEFT*4)
        water_text = Text(""H2O"", color=WHITE).scale(0.5).next_to(water, DOWN)

        # Plant
        plant = Line(ORIGIN, DOWN*2, color=GREEN).shift(DOWN)
        leaf_left = Ellipse(width=1.5, height=1, color=GREEN, fill_opacity=1).shift(DOWN + LEFT*0.75)
        leaf_right = Ellipse(width=1.5, height=1, color=GREEN, fill_opacity=1).shift(DOWN + RIGHT*0.75)
        chloroplasts = VGroup(*[Dot(color=DARK_GREEN).move_to(leaf_left.get_center() + point) for point in [UP*0.3, DOWN*0.3, LEFT*0.3, RIGHT*0.3]])

        # Chemical Reaction
        reactants = Text(""6CO2 + 6H2O + Light -> C6H12O6 + 6O2"", color=WHITE).scale(0.5).shift(DOWN*3)

        # Animation
        self.play(FadeIn(sun), FadeIn(sun_text), FadeIn(co2), FadeIn(water), FadeIn(water_text))
        self.play(GrowFromCenter(plant), GrowFromCenter(leaf_left), GrowFromCenter(leaf_right), FadeIn(chloroplasts))
        self.wait(1)
        self.play(ReplacementTransform(co2.copy(), chloroplasts), ReplacementTransform(water_text.copy(), chloroplasts), ReplacementTransform(sun_text.copy(), chloroplasts))
        self.wait(1)
        self.play(Write(reactants))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Archimedes' Principle Illustrated""
animation:  animate an object being submerged in water. Show the water level rising and a force (buoyant force) pushing up on the object. Illustrate that the buoyant force equals the weight of the water displaced by the object.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ArchimedesPrinciple(Scene):
    def construct(self):
        title = Text(""Archimedes' Principle Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Water container
        container = Rectangle(height=4, width=6).set_fill(BLUE, opacity=0.5).set_stroke(width=2)
        self.play(Create(container))

        # Object
        object = Square(side_length=1).set_fill(GRAY, opacity=1).move_to(3*UP)
        self.play(Create(object))
        self.play(object.animate.shift(2.5*DOWN), run_time=2)

        # Water level rise animation
        displaced_water = Rectangle(height=0.3, width=6).set_fill(BLUE, opacity=0.8).next_to(container, UP, buff=0)
        self.play(container.animate.set_fill(BLUE, opacity=0.8), GrowFromCenter(displaced_water))

        # Buoyant force arrow
        buoyant_force = Arrow(start=object.get_center(), end=object.get_center() + 1*UP, buff=0.1, color=YELLOW)
        buoyant_force_label = Text(""Buoyant Force"", font_size=24).next_to(buoyant_force, UP, buff=0.1)
        self.play(GrowArrow(buoyant_force), Write(buoyant_force_label))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Balancing Chemical Equations""
animation:  animate reactant molecules combining to form product molecules, while ensuring that the number of each type of atom remains constant throughout the reaction.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class BalancingChemicalEquations(Scene):
    def construct(self):
        title = Text(""Balancing Chemical Equations"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Reactants
        reactant1 = Circle(color=BLUE).scale(0.5)
        reactant1_text = Text(""H"", color=WHITE).scale(0.5)
        reactant1_group = VGroup(reactant1, reactant1_text)

        reactant2 = Circle(color=RED).scale(0.5).next_to(reactant1, RIGHT, buff=0.1)
        reactant2_text = Text(""O"", color=WHITE).scale(0.5)
        reactant2_group = VGroup(reactant2, reactant2_text)

        reactants = VGroup(reactant1_group, reactant2_group).move_to(LEFT*3)

        # Products
        product1 = Circle(color=GREEN).scale(0.5)
        product1_text = Text(""H2O"", color=WHITE).scale(0.5)
        product1_group = VGroup(product1, product1_text).move_to(RIGHT*3)

        self.play(ShowCreation(reactant1), Write(reactant1_text), ShowCreation(reactant2), Write(reactant2_text))
        self.wait(1)
        self.play(Transform(reactant1_group, product1_group), Transform(reactant2_group, product1_group.copy().next_to(product1_group, RIGHT, buff=0.1)))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Centripetal Force in Action""
    animation:  animate an object moving in a circular path, with a force constantly pulling it towards the center of the circle, demonstrating the concept of centripetal force.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CentripetalForceScene(Scene):
    def construct(self):
        title = Text(""Centripetal Force in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        circle = Circle(radius=2)
        dot = Dot(circle.get_start())
        arrow = Arrow(dot.get_center(), circle.get_center(), buff=0)

        self.play(Create(circle))
        self.play(FadeIn(dot))
        self.play(ShowCreation(arrow))
        self.play(MoveAlongPath(dot, circle), rate_func=linear, run_time=4)
        self.play(FadeOut(dot), FadeOut(circle), FadeOut(arrow))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Resonance Phenomenon""
animation:  animate a tuning fork vibrating at its natural frequency. Next, introduce a second tuning fork of the same frequency nearby and show it starting to vibrate due to resonance between the two forks.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ResonancePhenomenon(Scene):
    def construct(self):
        # Title slide
        title = Text(""Resonance Phenomenon"", font_size=48)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # First tuning fork
        fork1 = Line(ORIGIN, UP * 2).shift(LEFT * 2)
        fork1_head = VGroup(
            Line(fork1.get_end(), fork1.get_end() + RIGHT * 0.5),
            Line(fork1.get_end(), fork1.get_end() + LEFT * 0.5)
        )
        tuning_fork1 = VGroup(fork1, fork1_head)

        # Second tuning fork
        fork2 = Line(ORIGIN, UP * 2).shift(RIGHT * 2)
        fork2_head = VGroup(
            Line(fork2.get_end(), fork2.get_end() + RIGHT * 0.5),
            Line(fork2.get_end(), fork2.get_end() + LEFT * 0.5)
        )
        tuning_fork2 = VGroup(fork2, fork2_head)

        self.play(ShowCreation(tuning_fork1), ShowCreation(tuning_fork2))
        self.wait(1)

        # Animate first tuning fork vibrating
        for _ in range(4):
            self.play(tuning_fork1.animate.shift(RIGHT * 0.1), run_time=0.1)
            self.play(tuning_fork1.animate.shift(LEFT * 0.2), run_time=0.2)
            self.play(tuning_fork1.animate.shift(RIGHT * 0.1), run_time=0.1)

        self.wait(1)

        # Animate second tuning fork starting to vibrate due to resonance
        for _ in range(4):
            self.play(tuning_fork2.animate.shift(RIGHT * 0.1), run_time=0.1)
            self.play(tuning_fork2.animate.shift(LEFT * 0.2), run_time=0.2)
            self.play(tuning_fork2.animate.shift(RIGHT * 0.1), run_time=0.1)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Ohm's Law Illustrated""
animation:  animate a circuit with a battery, a resistor, and current flowing through the circuit. Show that the current is directly proportional to the voltage and inversely proportional to the resistance, as per Ohm's Law.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class OhmsLaw(Scene):
    def construct(self):
        title = Text(""Ohm's Law Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Circuit components
        battery = Line(ORIGIN, UP).set_color(YELLOW)
        battery.shift(LEFT*2)
        resistor = Rectangle(width=1, height=0.5).set_color(RED)
        resistor.next_to(battery, RIGHT, buff=1)
        wire1 = Line(battery.get_right(), resistor.get_left()).set_color(GREY)
        wire2 = Line(resistor.get_right(), resistor.get_right() + RIGHT).set_color(GREY)
        wire3 = Line(battery.get_left(), battery.get_left() + LEFT).set_color(GREY)
        wire4 = Line(battery.get_left() + LEFT, resistor.get_right() + RIGHT).set_color(GREY)
        circuit = VGroup(battery, resistor, wire1, wire2, wire3, wire4)

        # Current flow
        current_dots = VGroup(*[Dot(radius=0.05, color=BLUE).move_to(wire4.get_start() + RIGHT*i*0.2) for i in range(5)])
        current_animation = Succession(*[ApplyMethod(dot.move_to, wire4.get_start() + RIGHT*(i+1)*0.2) for i, dot in enumerate(current_dots)], lag_ratio=1)

        self.play(FadeIn(circuit))
        self.wait(1)
        self.play(ShowCreation(current_dots), run_time=1)
        self.play(current_animation, run_time=2, rate_func=linear)
        self.wait(1)

        # Ohm's Law Visualization
        ohms_law_text = Text(""V = I * R"", font_size=36)
        ohms_law_text.to_edge(UP)

        increasing_voltage = Text(""Increasing Voltage"", font_size=24).next_to(battery, DOWN, buff=0.5)
        decreasing_resistance = Text(""Decreasing Resistance"", font_size=24).next_to(resistor, DOWN, buff=0.5)

        self.play(Write(ohms_law_text))
        self.wait(1)
        self.play(Write(increasing_voltage))
        self.play(battery.stretch, 1.5, 0, {""about_edge"": UP})
        self.wait(1)
        self.play(ReplacementTransform(increasing_voltage, decreasing_resistance))
        self.play(resistor.stretch, 0.5, 0, {""about_edge"": RIGHT})
        self.wait(2)

        self.play(FadeOut(VGroup(circuit, current_dots, ohms_law_text, decreasing_resistance)))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Electromagnetic Induction Demonstration""
    animation:  animate a magnet moving through a coil of wire, showing the induced current flowing in the coil as a result of electromagnetic induction.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ElectromagneticInduction(Scene):
    def construct(self):
        title = Text(""Electromagnetic Induction Demonstration"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Coil
        coil = VGroup(*[Circle(arc_center=[i*0.2, 0, 0], radius=0.5) for i in range(-10, 11)])
        coil.set_color(BLUE)
        self.play(ShowCreation(coil))
        
        # Magnet
        magnet = Rectangle(width=1, height=0.5, color=RED)
        magnet_text = Text(""N"", font_size=24).next_to(magnet, LEFT, buff=0.1)
        magnet_text2 = Text(""S"", font_size=24).next_to(magnet, RIGHT, buff=0.1)
        magnet_group = VGroup(magnet, magnet_text, magnet_text2)
        self.play(FadeIn(magnet_group))
        
        # Animate magnet moving through the coil
        self.play(magnet_group.animate.shift(RIGHT*4), rate_func=there_and_back, run_time=4)
        
        # Induced current flow
        current_flow = CurvedArrow(start_point=[-2, 0.5, 0], end_point=[2, 0.5, 0], color=YELLOW)
        self.play(ShowCreation(current_flow))
        self.wait(2)
        self.play(FadeOut(coil), FadeOut(magnet_group), FadeOut(current_flow))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Newton's Third Law Illustrated""
animation:  animate two objects, such as a book and a table, interacting with each other. Show equal and opposite forces acting on both objects, demonstrating Newton's Third Law of motion.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NewtonsThirdLaw(Scene):
    def construct(self):
        title = Text(""Newton's Third Law Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create objects
        book = Square(color=BLUE, fill_opacity=1).scale(0.5)
        table = Rectangle(width=3, height=0.5, color=GREEN, fill_opacity=1).next_to(book, DOWN, buff=0)

        book_text = Text(""Book"", color=WHITE).scale(0.5).move_to(book)
        table_text = Text(""Table"", color=WHITE).scale(0.5).move_to(table)

        # Add objects to scene
        self.play(FadeIn(book), FadeIn(table), FadeIn(book_text), FadeIn(table_text))
        self.wait(1)

        # Forces
        force_book = Arrow(book.get_top(), book.get_top() + UP, buff=0, color=RED)
        force_table = Arrow(table.get_top(), table.get_top() + DOWN, buff=0, color=YELLOW)

        force_book_label = Text(""Force on Book"", color=RED).scale(0.5).next_to(force_book, UP, buff=0.1)
        force_table_label = Text(""Force on Table"", color=YELLOW).scale(0.5).next_to(force_table, DOWN, buff=0.1)

        self.play(GrowArrow(force_book), GrowArrow(force_table), Write(force_book_label), Write(force_table_label))
        self.wait(2)

        # Demonstrating Newton's Third Law
        self.play(book.shift, UP*0.5, table.shift, DOWN*0.5)
        self.wait(1)

        self.play(book.shift, DOWN*0.5, table.shift, UP*0.5)
        self.wait(2)

        self.play(FadeOut(book), FadeOut(table), FadeOut(book_text), FadeOut(table_text),
                  FadeOut(force_book), FadeOut(force_table), FadeOut(force_book_label), FadeOut(force_table_label))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Normal Distribution Visualization""
animation:  animate a normal distribution curve with the mean at the center and the standard deviations marked off. Show a point moving along the curve to represent a value and its corresponding probability.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NormalDistributionVisualization(Scene):
    def construct(self):
        title = Text(""Normal Distribution Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        axes = Axes(
            x_range=[-4, 4, 1],
            y_range=[0, 0.5, 0.1],
            axis_config={""color"": BLUE},
        )

        mean = 0
        std_dev = 1
        curve = axes.plot(lambda x: np.exp(-0.5 * ((x - mean) / std_dev) ** 2) / (std_dev * np.sqrt(2 * np.pi)), color=WHITE)
        curve_label = axes.get_graph_label(curve, label='\\sigma')

        self.play(Create(axes), Write(curve_label))
        self.play(Create(curve))
        self.wait(1)

        dot = Dot(color=RED).move_to(axes.c2p(0, 0))
        self.play(FadeIn(dot))

        def update_dot(mob, alpha):
            x = interpolate(-3, 3, alpha)
            y = np.exp(-0.5 * ((x - mean) / std_dev) ** 2) / (std_dev * np.sqrt(2 * np.pi))
            mob.move_to(axes.c2p(x, y))

        self.play(UpdateFromAlphaFunc(dot, update_dot), run_time=4, rate_func=there_and_back)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Radioactive Decay Simulation""
animation:  animate a group of unstable nuclei decaying over time, with the number of undecayed nuclei decreasing exponentially to illustrate radioactive decay.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RadioactiveDecaySimulation(Scene):
    def construct(self):
        title = Text(""Radioactive Decay Simulation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parameters
        start_nuclei = 50
        half_life = 2  # seconds
        decay_rate = 0.5  # half per half_life
        simulation_time = 8  # seconds

        # Create initial nuclei
        nuclei = VGroup(*[Dot(radius=0.05, color=BLUE) for _ in range(start_nuclei)])
        nuclei.arrange_in_grid(rows=5, buff=0.5)
        self.play(ShowCreation(nuclei))
        self.wait(1)

        # Simulate decay
        for t in range(1, simulation_time + 1):
            decayed = int(start_nuclei * (decay_rate ** (t / half_life)))
            to_decay = start_nuclei - decayed
            start_nuclei = decayed

            if to_decay > 0:
                decaying_nuclei = nuclei[:to_decay]
                self.play(decaying_nuclei.animate.set_opacity(0.2), rate_func=linear, run_time=1)
            self.wait(1)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Electric Field Visualization""
animation:  animate a positive charge and a negative charge on the screen, with electric field lines emanating from the positive charge and terminating on the negative charge, visually illustrating the concept of an electric field.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ElectricFieldVisualization(Scene):
    def construct(self):
        title = Text(""Electric Field Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Charges
        positive_charge = Circle(color=RED, fill_opacity=1).scale(0.5)
        positive_charge_text = Text(""+"", font_size=48).move_to(positive_charge)
        positive_charge_group = VGroup(positive_charge, positive_charge_text).shift(LEFT*2)

        negative_charge = Circle(color=BLUE, fill_opacity=1).scale(0.5)
        negative_charge_text = Text(""-"", font_size=48).move_to(negative_charge)
        negative_charge_group = VGroup(negative_charge, negative_charge_text).shift(RIGHT*2)

        self.play(FadeIn(positive_charge_group), FadeIn(negative_charge_group))
        self.wait(1)

        # Electric field lines
        field_lines = []
        for angle in np.linspace(0, 2*np.pi, 16, endpoint=False):
            start_point = positive_charge.get_center() + np.array([np.cos(angle), np.sin(angle), 0])
            end_point = negative_charge.get_center() + np.array([np.cos(angle+np.pi), np.sin(angle+np.pi), 0])*0.5
            line = Arrow(start_point, end_point, buff=0.1)
            field_lines.append(line)

        self.play(*[GrowArrow(line) for line in field_lines], run_time=2)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Torque""
animation:  animate a wrench turning a bolt, with the force applied at a distance from the axis of rotation. Show how the concept of torque is calculated as the product of force and distance.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class TorqueAnimation(Scene):
    def construct(self):
        title = Text(""Understanding Torque"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup wrench and bolt
        wrench = Line(ORIGIN, RIGHT * 2, color=BLUE).shift(LEFT)
        bolt = Circle(radius=0.2, color=WHITE).shift(RIGHT * 2)
        force_arrow = Arrow(start=wrench.get_end(), end=wrench.get_end() + UP * 1, buff=0, color=YELLOW)
        distance_line = DashedLine(start=bolt.get_center(), end=wrench.get_end(), color=PURPLE)

        # Labels
        force_label = MathTex(""F"", color=YELLOW).next_to(force_arrow, UP, buff=0.1)
        distance_label = MathTex(""d"", color=PURPLE).next_to(distance_line, DOWN, buff=0.1)
        torque_label = MathTex(r""\tau = F \times d"", color=GREEN).shift(DOWN * 2)

        self.play(FadeIn(bolt), GrowFromPoint(wrench, point=wrench.get_start()))
        self.play(ShowCreation(force_arrow), Write(force_label))
        self.play(ShowCreation(distance_line), Write(distance_label))
        self.wait(1)
        self.play(Write(torque_label))
        self.wait(1)

        # Animate wrench turning
        wrench_turn = Rotating(wrench, about_point=bolt.get_center(), radians=PI/2)
        bolt_turn = Rotating(bolt, about_point=bolt.get_center(), radians=PI/2)
        self.play(wrench_turn, bolt_turn, run_time=2)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Wave Interference Demonstration""
animation:  animate two wave sources producing waves that overlap and form an interference pattern. Show areas of constructive interference where waves amplify each other, and areas of destructive interference where waves cancel each other out.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaveInterference(Scene):
    def construct(self):
        title = Text(""Wave Interference Demonstration"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parameters for wave sources and waves
        source_a = Dot(point=LEFT*2, color=BLUE)
        source_b = Dot(point=RIGHT*2, color=RED)
        waves_a = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=BLUE).move_to(source_a.get_center()) for i in range(1, 20)])
        waves_b = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=RED).move_to(source_b.get_center()) for i in range(1, 20)])
        
        self.play(FadeIn(source_a), FadeIn(source_b))
        self.play(AnimationGroup(*[GrowFromCenter(wave) for wave in waves_a], lag_ratio=0.1),
                  AnimationGroup(*[GrowFromCenter(wave) for wave in waves_b], lag_ratio=0.1),
                  run_time=4, rate_func=linear)
        
        interference_text = Text(""Interference Pattern"", color=YELLOW).to_edge(UP)
        self.play(Write(interference_text))
        self.wait(2)

        # Highlight areas of constructive and destructive interference
        constructive_area = Circle(radius=1, color=YELLOW).move_to(0.5*LEFT)
        destructive_area = Circle(radius=1, color=WHITE).move_to(1.5*RIGHT)
        self.play(ShowCreation(constructive_area), ShowCreation(destructive_area))
        self.wait(2)

        self.play(FadeOut(constructive_area), FadeOut(destructive_area), FadeOut(interference_text),
                  FadeOut(waves_a), FadeOut(waves_b), FadeOut(source_a), FadeOut(source_b))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Bernoulli's Principle in Action""
    animation:  animate fluid flowing through a constricted pipe. Show the velocity increasing and the pressure decreasing in the constricted area, illustrating Bernoulli's Principle in action.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class BernoullisPrinciple(Scene):
    def construct(self):
        title = Text(""Bernoulli's Principle in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Pipe
        pipe_start = Rectangle(width=6, height=1, color=BLUE)
        pipe_constriction = Rectangle(width=2, height=0.5, color=BLUE)
        pipe_end = Rectangle(width=6, height=1, color=BLUE)

        pipe_constriction.next_to(pipe_start, RIGHT, buff=0)
        pipe_end.next_to(pipe_constriction, RIGHT, buff=0)

        self.play(DrawBorderThenFill(pipe_start), DrawBorderThenFill(pipe_constriction), DrawBorderThenFill(pipe_end))
        
        # Fluid flow
        fluid_particles_start = VGroup(*[Circle(radius=0.1, color=WHITE).move_to(pipe_start.get_left() + RIGHT * x + 0.2 * UP * np.random.rand()) for x in np.linspace(0.5, 5.5, 20)])
        fluid_particles_constriction = VGroup(*[Circle(radius=0.05, color=WHITE).move_to(pipe_constriction.get_left() + RIGHT * x + 0.1 * UP * np.random.rand()) for x in np.linspace(0.5, 1.5, 20)])
        fluid_particles_end = VGroup(*[Circle(radius=0.1, color=WHITE).move_to(pipe_end.get_left() + RIGHT * x + 0.2 * UP * np.random.rand()) for x in np.linspace(0.5, 5.5, 20)])

        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 6 * RIGHT)) for particle in fluid_particles_start], lag_ratio=0.1))
        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 2 * RIGHT)) for particle in fluid_particles_constriction], lag_ratio=0.05))
        self.play(LaggedStart(*[MoveAlongPath(particle, Line(particle.get_center(), particle.get_center() + 6 * RIGHT)) for particle in fluid_particles_end], lag_ratio=0.1))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Polarization of Light""
animation:  animate a light wave passing through a polarizing filter. Show the wave being blocked when the filter is rotated perpendicular to the plane of polarization, demonstrating the concept of polarization.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PolarizationOfLight(Scene):
    def construct(self):
        title = Text(""Polarization of Light"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a light wave
        light_wave = FunctionGraph(lambda x: np.sin(x), x_range=[-PI, PI], color=YELLOW)
        light_wave.move_to(3*LEFT)
        self.play(ShowCreation(light_wave))
        self.wait(1)

        # Create a polarizing filter
        filter_rect = Rectangle(height=2, width=0.2, fill_opacity=1, color=GREY)
        filter_rect.next_to(light_wave, RIGHT, buff=1)
        self.play(ShowCreation(filter_rect))
        self.wait(1)

        # Animate light wave passing through the filter
        passed_wave = FunctionGraph(lambda x: np.sin(x), x_range=[-PI, PI], color=YELLOW)
        passed_wave.next_to(filter_rect, RIGHT, buff=1)
        self.play(Transform(light_wave, passed_wave))
        self.wait(1)

        # Rotate filter to block the wave
        self.play(Rotate(filter_rect, angle=PI/2))
        blocked_wave = FunctionGraph(lambda x: 0*x, x_range=[-PI, PI], color=RED)
        blocked_wave.next_to(filter_rect, RIGHT, buff=1)
        self.play(Transform(light_wave, blocked_wave))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Odd and Even Numbers on a Number Line""
animation:  animate a number line with even numbers on one side and odd numbers on the other, visually distinguishing between them.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class OddEvenNumberLine(Scene):
    def construct(self):
        title = Text(""Odd and Even Numbers on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[-10, 10, 2], length=10, color=BLUE, include_numbers=True)
        self.play(Create(number_line))
        self.wait(1)

        even_numbers = VGroup()
        odd_numbers = VGroup()

        for x in range(-10, 11, 2):
            if x % 2 == 0:
                even_dot = Dot(number_line.n2p(x), color=GREEN)
                even_numbers.add(even_dot)
            else:
                odd_dot = Dot(number_line.n2p(x), color=RED)
                odd_numbers.add(odd_dot)

        self.play(FadeIn(even_numbers), FadeIn(odd_numbers))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Counting by Tens""
animation:  show a number line with multiples of ten highlighted, and animate a point jumping from one multiple to the next, demonstrating counting by tens.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CountingByTens(Scene):
    def construct(self):
        title = Text(""Counting by Tens"").scale(1.5)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        number_line = NumberLine(
            x_range=[0, 100, 10],
            length=10,
            color=BLUE,
            include_numbers=True,
            label_direction=DOWN,
        )

        self.play(Create(number_line))
        self.wait(1)

        for x in range(0, 101, 10):
            dot = Dot(point=number_line.number_to_point(x), color=YELLOW)
            self.play(MoveAlongPath(dot, Line(start=dot.get_center(), end=number_line.number_to_point(x))), run_time=0.5)
            self.wait(0.5)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Triangle Types""
    animation:  animate and display an equilateral triangle, an isosceles triangle, and a scalene triangle, highlighting their differences in side lengths and angles.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class TriangleTypes(Scene):
    def construct(self):
        title = Text(""Exploring Triangle Types"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Equilateral Triangle
        equilateral_triangle = Polygon([0, 0, 0], [2, 0, 0], [1, np.sqrt(3), 0])
        equilateral_label = Text(""Equilateral"", font_size=24).next_to(equilateral_triangle, DOWN)
        self.play(Create(equilateral_triangle))
        self.play(Write(equilateral_label))
        self.wait(2)
        self.play(FadeOut(equilateral_triangle), FadeOut(equilateral_label))

        # Isosceles Triangle
        isosceles_triangle = Polygon([0, 0, 0], [2, 0, 0], [1, 1.5, 0])
        isosceles_label = Text(""Isosceles"", font_size=24).next_to(isosceles_triangle, DOWN)
        self.play(Create(isosceles_triangle))
        self.play(Write(isosceles_label))
        self.wait(2)
        self.play(FadeOut(isosceles_triangle), FadeOut(isosceles_label))

        # Scalene Triangle
        scalene_triangle = Polygon([0, 0, 0], [2.5, 0, 0], [2, 1.5, 0])
        scalene_label = Text(""Scalene"", font_size=24).next_to(scalene_triangle, DOWN)
        self.play(Create(scalene_triangle))
        self.play(Write(scalene_label))
        self.wait(2)
        self.play(FadeOut(scalene_triangle), FadeOut(scalene_label))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Complementary Colors and Neutral Tones""
    animation:  show a color wheel with complementary colors positioned opposite each other. Next, animate the mixing of these complementary colors to create neutral tones, demonstrating how they cancel each other out.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ComplementaryColors(Scene):
    def construct(self):
        title = Text(""Complementary Colors and Neutral Tones"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create color wheel
        colors = [RED, YELLOW, BLUE, ORANGE, GREEN, PURPLE]
        wheel = VGroup(*[AnnularSector(inner_radius=0.5, outer_radius=1, angle=PI/3, start_angle=PI/3 * i, color=color) for i, color in enumerate(colors)])
        self.play(Create(wheel))
        self.wait(2)

        # Highlight complementary colors
        comp_pairs = [(RED, GREEN), (YELLOW, PURPLE), (BLUE, ORANGE)]
        for color1, color2 in comp_pairs:
            self.play(wheel.animate.set_color_by_gradient(color1, color2))
            self.wait(1)

        # Mix to neutral tones
        neutral_wheel = wheel.copy()
        neutral_color = GREY
        for sector in neutral_wheel:
            sector.set_color(neutral_color)

        self.play(Transform(wheel, neutral_wheel))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""The Power of the Lever""
animation:  animate a lever with a fulcrum, effort, and load, demonstrating how applying a small force at one end can lift a heavy load at the other end, showcasing the mechanical advantage of the lever.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LeverAnimation(Scene):
    def construct(self):
        # Title
        title = Text(""The Power of the Lever"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Lever setup
        lever = Line(LEFT * 5, RIGHT * 5, color=WHITE)
        fulcrum = Triangle().scale(0.5).rotate(PI).move_to(DOWN * 0.25)
        load = Square().scale(0.5).set_fill(BLUE, opacity=0.8).move_to(lever.get_start() + DOWN * 0.5)
        effort_point = Circle(radius=0.2, color=YELLOW).move_to(lever.get_end() + DOWN * 0.2)

        self.play(Create(lever), GrowFromPoint(fulcrum, point=lever.get_center()), FadeIn(load), FadeIn(effort_point))
        self.wait(1)

        # Demonstrate lever principle
        for _ in range(2):
            self.play(lever.animate.rotate(PI/6, about_point=fulcrum.get_center()), rate_func=there_and_back, run_time=2)
            self.play(load.animate.shift(UP * 0.5), effort_point.animate.shift(DOWN * 0.5))
            self.play(load.animate.shift(DOWN * 0.5), effort_point.animate.shift(UP * 0.5))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""States of Matter Visualization""
    animation:  animate molecules in solid, liquid, and gas states, showing their different movement patterns and densities. The solid state should show molecules in a fixed position, the liquid state should show molecules moving around but staying close together, and the gas state should show molecules moving freely and far apart from each other.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class StatesOfMatter(Scene):
    def construct(self):
        title = Text(""States of Matter Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Solid state
        solid_molecules = VGroup(*[Dot(radius=0.05, color=BLUE) for _ in range(25)])
        solid_molecules.arrange_in_grid(rows=5, cols=5, buff=0.2)
        self.play(ShowCreation(solid_molecules))
        self.wait(2)

        # Transition to liquid state
        self.play(solid_molecules.animate.arrange_in_grid(rows=5, cols=5, buff=0.5), run_time=2)
        for molecule in solid_molecules:
            self.play(molecule.animate.shift(UP*0.1 + RIGHT*0.1), run_time=0.5, rate_func=there_and_back)
            self.play(molecule.animate.shift(DOWN*0.1 + LEFT*0.1), run_time=0.5, rate_func=there_and_back)
        self.wait(2)

        # Transition to gas state
        self.play(FadeOut(solid_molecules))
        gas_molecules = VGroup(*[Dot(radius=0.05, color=RED) for _ in range(15)])
        self.play(ShowCreation(gas_molecules))
        for molecule in gas_molecules:
            self.play(molecule.animate.shift(UP*3 + RIGHT*3), run_time=3, rate_func=linear)
            self.play(molecule.animate.shift(DOWN*3 + LEFT*3), run_time=3, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Fractions on a Number Line""
animation:  animate a number line divided into equal parts, highlighting fractions such as 1/2, 1/3, and 1/4 to visually represent their positions on the number line.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FractionsOnNumberLine(Scene):
    def construct(self):
        title = Text(""Fractions on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[0, 1, 0.25], length=10, include_numbers=True, label_direction=DOWN)
        self.play(Create(number_line))
        self.wait(1)

        fractions = [1/2, 1/3, 1/4]
        colors = [RED, GREEN, BLUE]

        for fraction, color in zip(fractions, colors):
            dot = Dot(color=color).move_to(number_line.number_to_point(fraction))
            self.play(GrowFromCenter(dot))
            self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Polygons""
animation:  animate different polygons such as triangles, quadrilaterals, pentagons, etc., highlighting their number of sides and angles.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ExploringPolygons(Scene):
    def construct(self):
        title = Text(""Exploring Polygons"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        polygons = [
            (Triangle(), ""Triangle"", 3),
            (Square(), ""Quadrilateral"", 4),
            (RegularPolygon(5), ""Pentagon"", 5),
            (RegularPolygon(6), ""Hexagon"", 6),
            (RegularPolygon(7), ""Heptagon"", 7),
            (RegularPolygon(8), ""Octagon"", 8),
        ]

        for poly, name, sides in polygons:
            poly_text = Text(name, font_size=24).next_to(poly, UP)
            sides_text = Text(f""Sides: {sides}"", font_size=24).next_to(poly, DOWN)
            self.play(Create(poly), Write(poly_text), Write(sides_text))
            self.wait(2)
            self.play(FadeOut(poly), FadeOut(poly_text), FadeOut(sides_text))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Symmetry in Shapes""
animation:  animate shapes with reflectional and rotational symmetry. Show the reflection lines for shapes with reflectional symmetry and the rotation points for shapes with rotational symmetry.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SymmetryInShapes(Scene):
    def construct(self):
        title = Text(""Symmetry in Shapes"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Reflectional Symmetry
        square = Square(side_length=2).shift(LEFT*3)
        line_of_symmetry = DashedLine(start=square.get_top(), end=square.get_bottom()).shift(LEFT*3)
        self.play(Create(square), Create(line_of_symmetry))
        self.wait(1)

        # Rotational Symmetry
        circle = Circle(radius=1).shift(RIGHT*3)
        dot = Dot(point=circle.get_center()).shift(RIGHT*3)
        self.play(Create(circle), FadeIn(dot))
        self.wait(1)

        # Animate rotation to show rotational symmetry
        self.play(Rotate(circle, angle=PI/2, about_point=circle.get_center()), Rotate(dot, angle=PI/2, about_point=dot.get_center()))
        self.wait(1)

        self.play(FadeOut(square), FadeOut(line_of_symmetry), FadeOut(circle), FadeOut(dot))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Parallel and Perpendicular Lines""
animation:  animate two sets of parallel lines and two sets of perpendicular lines, emphasizing their constant distance or 90-degree angle respectively.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ParallelPerpendicular(Scene):
    def construct(self):
        title = Text(""Exploring Parallel and Perpendicular Lines"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parallel lines
        parallel_lines_1 = VGroup(*[Line(UP*3 + LEFT*4 + RIGHT*x, DOWN*3 + LEFT*4 + RIGHT*x) for x in range(0, 3)])
        parallel_lines_2 = VGroup(*[Line(UP*3 + RIGHT*4 + LEFT*x, DOWN*3 + RIGHT*4 + LEFT*x) for x in range(0, 3)])
        self.play(ShowCreation(parallel_lines_1), ShowCreation(parallel_lines_2))
        self.wait(2)
        self.play(FadeOut(parallel_lines_1), FadeOut(parallel_lines_2))

        # Perpendicular lines
        perpendicular_lines_1 = VGroup(Line(UP*3, DOWN*3), Line(LEFT*3, RIGHT*3))
        perpendicular_lines_2 = VGroup(Line(UP*2 + LEFT*2, DOWN*2 + LEFT*2), Line(UP*2 + LEFT*2, UP*2 + RIGHT*2))
        self.play(ShowCreation(perpendicular_lines_1), ShowCreation(perpendicular_lines_2))
        self.wait(2)
        self.play(FadeOut(perpendicular_lines_1), FadeOut(perpendicular_lines_2))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Varieties of Leaves""
animation:  animate simple, compound, and needle-like leaves, highlighting their differences in shape and structure.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LeavesAnimation(Scene):
    def construct(self):
        title = Text(""Varieties of Leaves"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Simple Leaf
        simple_leaf = Ellipse(width=2.0, height=1.0, color=GREEN).shift(LEFT*4)
        simple_leaf_label = Text(""Simple Leaf"", font_size=24).next_to(simple_leaf, DOWN)
        self.play(Create(simple_leaf), Write(simple_leaf_label))
        self.wait(1)

        # Compound Leaf
        compound_leaf = VGroup(
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(LEFT*0.5 + UP*0.75),
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(RIGHT*0.5 + UP*0.75),
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(LEFT*0.5 + DOWN*0.75),
            Ellipse(width=0.5, height=0.25, color=GREEN).shift(RIGHT*0.5 + DOWN*0.75),
            Line(ORIGIN, UP*0.75, color=WHITE),
        ).shift(RIGHT*0)
        compound_leaf_label = Text(""Compound Leaf"", font_size=24).next_to(compound_leaf, DOWN)
        self.play(Create(compound_leaf), Write(compound_leaf_label))
        self.wait(1)

        # Needle-like Leaf
        needle_leaf = Line(UP*0.5, DOWN*0.5, color=GREEN).shift(RIGHT*4)
        needle_leaf_label = Text(""Needle-like Leaf"", font_size=24).next_to(needle_leaf, DOWN)
        self.play(Create(needle_leaf), Write(needle_leaf_label))
        self.wait(2)

        # Grouping all leaves
        all_leaves = VGroup(simple_leaf, simple_leaf_label, compound_leaf, compound_leaf_label, needle_leaf, needle_leaf_label)
        self.play(all_leaves.animate.scale(0.6).arrange(RIGHT, buff=1).to_edge(DOWN))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Law of Reflection""
animation:  animate a light ray hitting a flat surface and reflecting off it, with the angle of incidence equal to the angle of reflection, demonstrating the law of reflection.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LawOfReflection(Scene):
    def construct(self):
        title = Text(""Law of Reflection"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create surface
        surface = Line(LEFT * 5, RIGHT * 5)
        self.play(Create(surface))

        # Create incident ray
        incident_ray = Arrow(start=LEFT * 3 + UP * 2, end=ORIGIN, buff=0, color=YELLOW)
        self.play(GrowArrow(incident_ray))

        # Create reflected ray
        reflected_ray = Arrow(start=ORIGIN, end=RIGHT * 3 + UP * 2, buff=0, color=YELLOW)
        self.play(GrowArrow(reflected_ray))

        # Angles
        angle_of_incidence = Angle(incident_ray, surface, radius=0.5, other_angle=True, color=WHITE)
        angle_of_reflection = Angle(surface, reflected_ray, radius=0.5, color=WHITE)
        self.play(Create(angle_of_incidence), Create(angle_of_reflection))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Mixtures and Solutions""
animation:  animate a mixture of different substances being poured into a container, followed by the substances dissolving into a solution, demonstrating the process of dissolution.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MixturesAndSolutions(Scene):
    def construct(self):
        # Title
        title = Text(""Mixtures and Solutions"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Container
        container = Rectangle(height=4, width=3, color=WHITE)
        self.play(Create(container))
        self.wait(1)

        # Substances
        substance1 = Circle(radius=0.2, color=BLUE).move_to(3*UP + 2*LEFT)
        substance2 = Circle(radius=0.2, color=RED).move_to(3*UP + 2*RIGHT)
        self.play(FadeIn(substance1), FadeIn(substance2))
        self.wait(1)

        # Pouring substances
        self.play(substance1.animate.move_to(container.get_top() + 0.5*DOWN), 
                  substance2.animate.move_to(container.get_top() + 0.5*DOWN))
        self.wait(1)

        # Dissolving substances
        dissolved_substance1 = substance1.copy().set_opacity(0.2)
        dissolved_substance2 = substance2.copy().set_opacity(0.2)
        self.play(Transform(substance1, dissolved_substance1), 
                  Transform(substance2, dissolved_substance2),
                  substance1.animate.scale(5),
                  substance2.animate.scale(5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Magnetic Poles Interaction""
    animation:  animate a bar magnet with clearly labeled north and south poles. Show the attraction between the north and south poles of two magnets, and the repulsion between like poles.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MagneticPolesInteraction(Scene):
    def construct(self):
        title = Text(""Magnetic Poles Interaction"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Magnet 1
        magnet1 = Rectangle(color=BLUE, height=1, width=2)
        north1 = Text(""N"", color=WHITE).move_to(magnet1.get_left() + RIGHT * 0.3)
        south1 = Text(""S"", color=WHITE).move_to(magnet1.get_right() + LEFT * 0.3)
        magnet1_group = VGroup(magnet1, north1, south1).shift(LEFT*3)

        # Magnet 2
        magnet2 = Rectangle(color=RED, height=1, width=2)
        north2 = Text(""N"", color=WHITE).move_to(magnet2.get_left() + RIGHT * 0.3)
        south2 = Text(""S"", color=WHITE).move_to(magnet2.get_right() + LEFT * 0.3)
        magnet2_group = VGroup(magnet2, north2, south2).shift(RIGHT*3)

        self.play(FadeIn(magnet1_group), FadeIn(magnet2_group))
        self.wait(1)

        # Attraction
        self.play(magnet1_group.animate.shift(RIGHT*2), magnet2_group.animate.shift(LEFT*2))
        self.wait(1)

        # Repulsion setup
        magnet2_group.generate_target()
        magnet2_group.target.rotate(PI).move_to(RIGHT*3)

        self.play(MoveToTarget(magnet2_group))
        self.wait(1)

        # Repulsion
        self.play(magnet1_group.animate.shift(RIGHT*0.5), magnet2_group.animate.shift(LEFT*0.5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Rectangles: Area and Perimeter""
    animation:  animate rectangles with different dimensions, calculating and displaying their area (length x width) and perimeter (2 x length + 2 x width) in a visually engaging way.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RectangleAnimation(Scene):
    def construct(self):
        title = Text(""Exploring Rectangles: Area and Perimeter"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        rectangles = [
            (4, 2),
            (3, 3),
            (6, 1),
        ]

        for length, width in rectangles:
            rectangle = Rectangle(width=width, height=length)
            area_text = Text(f""Area: {length * width}"", font_size=24).next_to(rectangle, DOWN)
            perimeter_text = Text(f""Perimeter: {2 * (length + width)}"", font_size=24).next_to(area_text, DOWN)

            self.play(Create(rectangle))
            self.play(Write(area_text), Write(perimeter_text))
            self.wait(2)
            self.play(FadeOut(rectangle), FadeOut(area_text), FadeOut(perimeter_text))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Water Displacement Demonstration""
animation:  animate an object being submerged in water, with the water level rising by an amount equal to the volume of the object, illustrating the principle of water displacement.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaterDisplacement(Scene):
    def construct(self):
        title = Text(""Water Displacement Demonstration"").scale(0.5)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        # Container
        container = Rectangle(height=6, width=4).set_fill(BLUE, opacity=0.5).set_stroke(width=2)
        self.play(Create(container))

        # Water
        water = Rectangle(height=2, width=3.8).set_fill(BLUE, opacity=0.7).set_stroke(width=0)
        water.shift(DOWN * 1)
        self.play(Create(water))

        # Object
        object = Circle(radius=0.5).set_fill(GRAY, opacity=1).set_stroke(width=2)
        object.move_to(UP * 3)
        self.play(Create(object))

        # Animate object submersion
        self.play(object.animate.shift(DOWN * 4))

        # Animate water displacement
        displaced_water = water.copy().stretch_to_fit_height(water.height + 0.5)
        self.play(Transform(water, displaced_water))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Multiplication as Repeated Addition""
animation:  animate groups of objects being added together repeatedly, transitioning to multiplication by showing the equation 3 + 3 + 3 = 3 × 3.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplicationScene(Scene):
    def construct(self):
        title = Text(""Multiplication as Repeated Addition"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create groups of objects (circles in this case)
        group1 = VGroup(*[Circle(radius=0.2, color=BLUE) for _ in range(3)])
        group1.arrange(RIGHT, buff=0.5)
        group2 = group1.copy().next_to(group1, DOWN, buff=1)
        group3 = group1.copy().next_to(group2, DOWN, buff=1)

        # Animate groups appearing one after the other
        self.play(ShowCreation(group1))
        self.wait(0.5)
        self.play(ShowCreation(group2))
        self.wait(0.5)
        self.play(ShowCreation(group3))
        self.wait(1)

        # Transition to multiplication
        equals_text = Text(""="").next_to(group3, RIGHT, buff=1)
        multiplication_text = Text(""3 × 3"").next_to(equals_text, RIGHT, buff=0.5)
        plus_signs = VGroup(
            *[Text(""+"").next_to(group1, RIGHT, buff=0.2).shift(0.5*DOWN),
              Text(""+"").next_to(group2, RIGHT, buff=0.2).shift(0.5*DOWN)]
        )

        self.play(Write(plus_signs))
        self.wait(0.5)
        self.play(Write(equals_text), Write(multiplication_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Divisibility Rules Explained""
animation:  animate the process of checking if a number is divisible by 2, 3, 5, or 10 based on its last digit or sum of digits, illustrating the different rules visually.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DivisibilityRules(Scene):
    def construct(self):
        # Title
        title = Text(""Divisibility Rules Explained"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Divisible by 2
        divisible_by_2 = Text(""Divisible by 2: Last digit is even"", font_size=24)
        self.play(Write(divisible_by_2))
        self.wait(2)
        self.play(FadeOut(divisible_by_2))

        # Divisible by 3
        divisible_by_3 = Text(""Divisible by 3: Sum of digits is divisible by 3"", font_size=24)
        self.play(Write(divisible_by_3))
        self.wait(2)
        self.play(FadeOut(divisible_by_3))

        # Divisible by 5
        divisible_by_5 = Text(""Divisible by 5: Last digit is 0 or 5"", font_size=24)
        self.play(Write(divisible_by_5))
        self.wait(2)
        self.play(FadeOut(divisible_by_5))

        # Divisible by 10
        divisible_by_10 = Text(""Divisible by 10: Last digit is 0"", font_size=24)
        self.play(Write(divisible_by_10))
        self.wait(2)
        self.play(FadeOut(divisible_by_10))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Scaling on a Coordinate Plane""
    animation:  show a shape on a coordinate plane, and animate it being scaled by a factor of 2 or 3, visually demonstrating the concept of scaling in a geometric context.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ScalingAnimation(Scene):
    def construct(self):
        title = Text(""Scaling on a Coordinate Plane"")
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        axes = Axes(
            x_range=[-5, 5],
            y_range=[-5, 5],
            axis_config={""color"": BLUE},
        )
        self.play(Create(axes))

        square = Square(color=RED).move_to(axes.c2p(0, 0))
        self.play(Create(square))
        self.wait(1)

        scaled_square = square.copy().scale(2)
        self.play(Transform(square, scaled_square))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Complementary and Supplementary Angles""
animation:  animate two angles adding up to 90° (complementary) and 180° (supplementary), showcasing their relationship and how they form a straight line or a right angle.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ComplementaryAndSupplementary(Scene):
    def construct(self):
        title = Text(""Complementary and Supplementary Angles"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Complementary angles
        line1 = Line(ORIGIN, 2*RIGHT)
        line2 = Line(ORIGIN, 2*UP).rotate_about_origin(PI/4)
        angle1 = Angle(line1, line2, radius=0.5, color=YELLOW)
        self.play(Create(line1), Create(line2), GrowFromCenter(angle1))
        self.wait(1)

        comp_text = Text(""Complementary"", font_size=24).next_to(angle1, UP)
        self.play(Write(comp_text))
        self.wait(2)
        self.play(FadeOut(line1), FadeOut(line2), FadeOut(angle1), FadeOut(comp_text))

        # Supplementary angles
        line3 = Line(ORIGIN, 2*RIGHT)
        line4 = Line(ORIGIN, 2*LEFT)
        angle2 = Angle(line3, line4, radius=0.5, other_angle=True, color=GREEN)
        self.play(Create(line3), Create(line4), GrowFromCenter(angle2))
        self.wait(1)

        supp_text = Text(""Supplementary"", font_size=24).next_to(angle2, UP, buff=0.5)
        self.play(Write(supp_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Circle Diameter and Radius Relationship""
animation:  animate a circle with its diameter and radius labeled, showing the relationship between them (diameter = 2 × radius).
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CircleDiameterRadius(Scene):
    def construct(self):
        title = Text(""Circle Diameter and Radius Relationship"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        circle = Circle(radius=2)
        diameter = Line(start=circle.get_left(), end=circle.get_right(), color=BLUE)
        radius = Line(start=circle.get_center(), end=circle.get_right(), color=RED)

        diameter_label = Tex(""Diameter = 2 $\\times$ Radius"").next_to(circle, DOWN)
        radius_label = Tex(""Radius"", color=RED).next_to(radius, DOWN)

        self.play(Create(circle))
        self.play(ShowCreation(diameter), ShowCreation(radius))
        self.play(Write(diameter_label), Write(radius_label))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Fraction of a Whole Number""
    animation:  animate dividing a whole number into equal parts to find a fraction of it, such as showing 1/4 of 20 by dividing 20 into 4 equal parts.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FractionOfWhole(Scene):
    def construct(self):
        title = Text(""Fraction of a Whole Number"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        whole_number = 20
        fraction = 1/4
        parts = int(1/fraction)

        number_line = NumberLine(x_range=[0, whole_number+1, 1], length=10, include_numbers=True, numbers_to_exclude=[whole_number+1])
        self.play(Create(number_line))
        self.wait(1)

        divisions = [number_line.number_to_point(i) for i in range(0, whole_number+1, whole_number//parts)]
        rects = [
            Rectangle(width=number_line.number_to_point(1)[0] - number_line.number_to_point(0)[0], height=0.5)
            .move_to(number_line.number_to_point(i) + UP * 0.25)
            for i in range(0, whole_number, whole_number//parts)
        ]

        for rect in rects:
            self.play(Create(rect), run_time=0.5)
        self.wait(1)

        highlight_rect = Rectangle(
            width=(number_line.number_to_point(whole_number//parts)[0] - number_line.number_to_point(0)[0]) * fraction,
            height=0.75, color=YELLOW
        ).move_to(number_line.number_to_point((whole_number//parts) * fraction / 2) + UP * 0.25)

        self.play(Create(highlight_rect))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Area of Rectangles""
    animation:  animate displaying rectangles with varying lengths and widths. Show the calculation of their areas using the formula A = L × W for each rectangle.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RectangleArea(Scene):
    def construct(self):
        title = Text(""Calculating Area of Rectangles"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        rectangles = [
            (4, 2),
            (3, 3),
            (5, 1)
        ]

        for length, width in rectangles:
            rectangle = Rectangle(width=width, height=length, color=BLUE)
            area_text = Text(f""A = {length} × {width} = {length * width}"", font_size=24)
            area_calculation = VGroup(rectangle, area_text).arrange(DOWN)

            self.play(Create(rectangle))
            self.wait(1)
            self.play(Write(area_text))
            self.wait(2)
            self.play(FadeOut(area_calculation))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""The Inclined Plane in Action""
animation:  animate an object being pushed up an inclined plane, demonstrating how the incline reduces the force required to move the object uphill.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class InclinedPlane(Scene):
    def construct(self):
        title = Text(""The Inclined Plane in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create inclined plane
        plane = Polygon([0, 0, 0], [3, 0, 0], [3, 1.5, 0], [0, 0, 0], color=WHITE)
        self.play(Create(plane))
        
        # Create object
        obj = Dot([2.5, 0.75, 0], color=RED)
        self.play(FadeIn(obj))
        
        # Animate object moving up the plane
        self.play(obj.animate.shift([-2, 1, 0]), run_time=2, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Converting Fractions to Decimals""
animation:  animate showing a fraction on the screen and demonstrate the process of converting it to a decimal by dividing the numerator by the denominator.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ConvertFractionsToDecimals(Scene):
    def construct(self):
        title = Text(""Converting Fractions to Decimals"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        fraction = MathTex(r""\frac{3}{4}"")
        self.play(Write(fraction))
        self.wait(1)

        equals = MathTex(""="")
        equals.next_to(fraction, RIGHT)
        self.play(Write(equals))

        decimal = DecimalNumber(3/4, num_decimal_places=2)
        decimal.next_to(equals, RIGHT)
        self.play(TransformFromCopy(fraction, decimal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Reflection and Rotation of Shapes""
animation:  display a shape and animate its reflection across a line followed by its rotation around a point, showcasing the transformation of the shape.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ReflectionAndRotation(Scene):
    def construct(self):
        title = Text(""Reflection and Rotation of Shapes"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a shape
        square = Square(color=BLUE, fill_opacity=0.5)
        self.play(Create(square))
        self.wait(1)

        # Reflection line
        line = DashedLine(start=3*UP, end=3*DOWN, color=WHITE)
        self.play(ShowCreation(line))
        self.wait(1)

        # Reflect the square across the line
        reflected_square = square.copy()
        self.play(reflected_square.animate.apply_function(lambda p: np.array([-p[0], p[1], p[2]])))
        self.wait(1)

        # Rotation around a point
        self.play(Rotate(square, angle=PI/2), Rotate(reflected_square, angle=-PI/2))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Energy Conversion in a Roller Coaster""
    animation:  animate a roller coaster track with a cart moving along it. Show the cart at the top of a hill with high potential energy, then descending down the hill converting potential energy into kinetic energy as it gains speed.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RollerCoaster(Scene):
    def construct(self):
        title = Text(""Energy Conversion in a Roller Coaster"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Roller Coaster Track
        track_start = 3 * UP + 5 * LEFT
        track_end = 3 * UP + 5 * RIGHT
        track = VMobject()
        track.set_points_as_corners([track_start, [0, 3, 0], [0, 0, 0], [3, 0, 0], track_end])
        track.make_smooth()
        self.play(Create(track))

        # Cart
        cart = Dot(track_start, color=RED)
        self.play(FadeIn(cart))

        # Potential Energy at the top
        potential_energy_text = Text(""High Potential Energy"", font_size=24).next_to(cart, UP)
        self.play(Write(potential_energy_text))
        self.wait(1)
        self.play(FadeOut(potential_energy_text))

        # Move the cart along the track
        self.play(MoveAlongPath(cart, track), rate_func=linear, run_time=4)

        # Kinetic Energy at the bottom
        kinetic_energy_text = Text(""High Kinetic Energy"", font_size=24).next_to(cart, DOWN)
        self.play(Write(kinetic_energy_text))
        self.wait(2)
        self.play(FadeOut(kinetic_energy_text), FadeOut(cart), FadeOut(track))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Multiplying Fractions Illustrated""
animation:  animate two fractions side by side. Show the multiplication process by separately animating the multiplication of their numerators and denominators, illustrating how the fractions are multiplied together.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingFractions(Scene):
    def construct(self):
        title = Text(""Multiplying Fractions Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        fraction1 = MathTex(r""\frac{2}{3}"").scale(2)
        fraction2 = MathTex(r""\frac{4}{5}"").scale(2).next_to(fraction1, RIGHT, buff=1)

        self.play(Write(fraction1), Write(fraction2))
        self.wait(1)

        times = MathTex(r""\times"").scale(2).next_to(fraction1, RIGHT, buff=0.2)
        self.play(Write(times))
        self.wait(1)

        equals = MathTex(r""="").scale(2).next_to(fraction2, RIGHT, buff=0.2)
        self.play(Write(equals))
        self.wait(1)

        result_fraction = MathTex(r""\frac{2 \times 4}{3 \times 5}"").scale(2).next_to(equals, RIGHT, buff=0.2)
        self.play(Write(result_fraction))
        self.wait(1)

        simplified_fraction = MathTex(r""\frac{8}{15}"").scale(2).next_to(equals, RIGHT, buff=0.2)
        self.play(ReplacementTransform(result_fraction, simplified_fraction))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Balancing Equations: Isolating Variables""
animation:  display a simple equation (e.g., x + 3 = 7), and animate the process of subtracting 3 from both sides to isolate the variable x, demonstrating the concept of balancing equations.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class BalancingEquations(Scene):
    def construct(self):
        title = Text(""Balancing Equations: Isolating Variables"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        equation = Text(""x + 3 = 7"")
        self.play(Write(equation))
        self.wait(1)

        subtract_text = Text(""-3"", color=RED).next_to(equation, DOWN)
        self.play(Write(subtract_text))
        self.wait(1)

        equation_transformed = Text(""x = 4"")
        self.play(ReplacementTransform(equation, equation_transformed), FadeOut(subtract_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Probability of Coin Flips""
animation:  animate flipping a coin multiple times and visually represent the probability of getting heads or tails. Show a bar graph or pie chart to illustrate the distribution of outcomes.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *
import random

class CoinFlipProbability(Scene):
    def construct(self):
        title = Text(""Probability of Coin Flips"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        outcomes = {""Heads"": 0, ""Tails"": 0}
        coins = VGroup()
        for i in range(5):
            coin = Circle().scale(0.5)
            if random.random() < 0.5:
                outcomes[""Heads""] += 1
                coin.set_fill(WHITE, opacity=1)
                heads_text = Text(""H"", font_size=36).move_to(coin)
                coin.add(heads_text)
            else:
                outcomes[""Tails""] += 1
                coin.set_fill(BLACK, opacity=1)
                tails_text = Text(""T"", color=WHITE, font_size=36).move_to(coin)
                coin.add(tails_text)
            coins.add(coin)
        
        coins.arrange_in_grid(rows=1)
        self.play(AnimationGroup(*[DrawBorderThenFill(coin) for coin in coins], lag_ratio=0.5))
        self.wait(2)

        bars = VGroup()
        for outcome, count in outcomes.items():
            bar = Rectangle(height=count, width=0.5, fill_opacity=1)
            if outcome == ""Heads"":
                bar.set_fill(WHITE)
                bar.set_stroke(WHITE)
            else:
                bar.set_fill(BLACK)
                bar.set_stroke(BLACK)
            bars.add(bar)

        bars.arrange(buff=1).to_edge(DOWN)
        self.play(AnimationGroup(*[GrowFromCenter(bar) for bar in bars], lag_ratio=0.5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Factors and Multiples""
animation:  display a number on the screen and animate finding its factors (numbers that divide into it evenly) and multiples (products of the number and integers) in a visually engaging way.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FactorsAndMultiples(Scene):
    def construct(self):
        title = Text(""Exploring Factors and Multiples"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number = 12
        number_text = Text(str(number), font_size=72)
        self.play(Write(number_text))
        self.wait(1)

        factors = []
        multiples = [number * i for i in range(1, 6)]

        for i in range(1, number + 1):
            if number % i == 0:
                factors.append(i)

        factors_group = VGroup(*[Text(str(factor), font_size=36) for factor in factors])
        multiples_group = VGroup(*[Text(str(multiple), font_size=36) for multiple in multiples])

        factors_group.arrange(DOWN, center=False, aligned_edge=LEFT).to_edge(LEFT, buff=1)
        multiples_group.arrange(DOWN, center=False, aligned_edge=RIGHT).to_edge(RIGHT, buff=1)

        self.play(Transform(number_text, factors_group))
        self.wait(1)
        self.play(Transform(number_text, multiples_group))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Measuring Length in Metric Units""
animation:  animate showing objects of different lengths being measured in millimeters, centimeters, and meters, highlighting the conversion between the units.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MeasureLength(Scene):
    def construct(self):
        title = Text(""Measuring Length in Metric Units"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Millimeters example
        mm_line = Line(ORIGIN, RIGHT * 0.5, color=BLUE)
        mm_text = Text(""50mm"").next_to(mm_line, DOWN)
        self.play(GrowFromCenter(mm_line), Write(mm_text))
        self.wait(2)
        self.play(FadeOut(mm_line), FadeOut(mm_text))

        # Centimeters to millimeters conversion
        cm_line = Line(ORIGIN, RIGHT * 2, color=GREEN)
        cm_text = Text(""2cm = 20mm"").next_to(cm_line, DOWN)
        self.play(GrowFromCenter(cm_line), Write(cm_text))
        self.wait(2)
        self.play(FadeOut(cm_line), FadeOut(cm_text))

        # Meters example
        m_line = Line(ORIGIN, RIGHT * 5, color=RED)
        m_text = Text(""1m = 100cm"").next_to(m_line, DOWN)
        self.play(GrowFromCenter(m_line), Write(m_text))
        self.wait(2)
        self.play(FadeOut(m_line), FadeOut(m_text))

        # Conversion between units
        conversion_text = Text(""1m = 100cm = 1000mm"").scale(0.7)
        self.play(Write(conversion_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Volumes of Cubes""
    animation:  animate displaying cubes with different side lengths, followed by animating the calculation of their volumes using the formula V = s³.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CubeVolume(Scene):
    def construct(self):
        title = Text(""Calculating Volumes of Cubes"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        side_lengths = [1, 2, 3]
        for side_length in side_lengths:
            cube = Cube(side_length=side_length).set_fill(BLUE, opacity=0.5)
            formula = MathTex(f""V = {side_length}^3 = {side_length ** 3}"")
            formula.next_to(cube, DOWN)

            self.play(Create(cube))
            self.play(Write(formula))
            self.wait(2)
            self.play(FadeOut(cube), FadeOut(formula))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Equivalent Ratios""
    animation:  show two sets of numbers representing equivalent ratios (e.g., 2:3 and 4:6) and animate their proportional relationship by visually demonstrating how they are equal in value.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class EquivalentRatios(Scene):
    def construct(self):
        title = Text(""Exploring Equivalent Ratios"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        ratio1 = Text(""2:3"", color=BLUE).shift(UP*2)
        ratio2 = Text(""4:6"", color=YELLOW).next_to(ratio1, DOWN, buff=1.5)

        self.play(Write(ratio1), Write(ratio2))
        self.wait(1)

        # Visual demonstration of equivalence
        rect1 = Rectangle(height=2, width=3, color=BLUE).next_to(ratio1, DOWN, buff=0.5)
        rect2 = Rectangle(height=4, width=6, color=YELLOW).next_to(ratio2, DOWN, buff=0.5).scale(0.5)

        self.play(DrawBorderThenFill(rect1), DrawBorderThenFill(rect2))
        self.wait(1)

        equivalence = Text(""These ratios are equivalent!"", color=GREEN).scale(0.7).next_to(rect2, DOWN, buff=0.5)
        self.play(Write(equivalence))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Newton's First Law in Action""
    animation:  animate a stationary object remaining at rest, and a moving object continuing its motion at a constant velocity in a straight line, unless acted upon by an external force.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NewtonsFirstLaw(Scene):
    def construct(self):
        title = Text(""Newton's First Law in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Stationary object
        stationary_square = Square(color=BLUE, fill_opacity=1).shift(LEFT*3)
        self.play(FadeIn(stationary_square))
        self.wait(2)

        # Moving object
        moving_circle = Circle(color=RED, fill_opacity=1).shift(RIGHT*3)
        self.play(FadeIn(moving_circle))
        self.play(moving_circle.animate.shift(LEFT*6), run_time=2, rate_func=linear)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Subtracting Integers on a Number Line""
animation:  animate a number line with integers marked on it. Show the process of subtracting positive and negative integers by moving left or right along the number line.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SubtractingIntegers(Scene):
    def construct(self):
        # Title
        title = Text(""Subtracting Integers on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Number line
        number_line = NumberLine(
            x_range=[-10, 10, 1],
            length=10,
            color=WHITE,
            include_numbers=True,
            label_direction=DOWN,
        )
        self.play(Create(number_line))
        self.wait(1)

        # Example of subtracting positive integer (e.g., 3 - 2)
        start_point = number_line.number_to_point(3)
        end_point = number_line.number_to_point(1)
        pointer = Triangle().move_to(start_point).set_color(RED)
        self.play(FadeIn(pointer))
        self.wait(1)
        self.play(pointer.animate.move_to(end_point))
        self.wait(2)

        # Clearing for next example
        self.play(FadeOut(pointer))
        
        # Example of subtracting negative integer (e.g., -2 - (-3))
        start_point = number_line.number_to_point(-2)
        end_point = number_line.number_to_point(1)
        pointer = Triangle().move_to(start_point).set_color(BLUE)
        self.play(FadeIn(pointer))
        self.wait(1)
        self.play(pointer.animate.move_to(end_point))
        self.wait(2)

        # End
        self.play(FadeOut(pointer), FadeOut(number_line))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Exploring Quadrilaterals""
animation:  animate examples of parallelograms, rhombuses, rectangles, squares, and trapezoids, highlighting their properties such as angles, sides, and symmetry.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class Quadrilaterals(Scene):
    def construct(self):
        title = Text(""Exploring Quadrilaterals"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parallelogram
        parallelogram = Polygon([-1, 1, 0], [1, 1, 0], [2, -1, 0], [0, -1, 0], color=BLUE)
        self.play(Create(parallelogram))
        self.wait(1)
        self.play(FadeOut(parallelogram))

        # Rhombus
        rhombus = Polygon([-1, 1, 0], [1, 1, 0], [2, -1, 0], [0, -1, 0], color=GREEN)
        rhombus.scale(0.5).rotate(PI/4)
        self.play(Create(rhombus))
        self.wait(1)
        self.play(FadeOut(rhombus))

        # Rectangle
        rectangle = Rectangle(height=2, width=3, color=ORANGE)
        self.play(Create(rectangle))
        self.wait(1)
        self.play(FadeOut(rectangle))

        # Square
        square = Square(side_length=2, color=RED)
        self.play(Create(square))
        self.wait(1)
        self.play(FadeOut(square))

        # Trapezoid
        trapezoid = Polygon([-2, -1, 0], [2, -1, 0], [1, 1, 0], [-1, 1, 0], color=PURPLE)
        self.play(Create(trapezoid))
        self.wait(1)
        self.play(FadeOut(trapezoid))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Comparing Fractions with Cross Multiplication""
    animation:  animate two fractions displayed side by side, each with different numerators and denominators. Show the process of cross multiplication to compare their values and determine which fraction is greater.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CompareFractions(Scene):
    def construct(self):
        title = Text(""Comparing Fractions with Cross Multiplication"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        fraction1 = MathTex(r""\frac{3}{4}"").shift(LEFT*2)
        fraction2 = MathTex(r""\frac{5}{6}"").shift(RIGHT*2)
        self.play(Write(fraction1), Write(fraction2))
        self.wait(1)

        cross1 = MathTex(r""3 \times 6"").next_to(fraction1, DOWN)
        cross2 = MathTex(r""5 \times 4"").next_to(fraction2, DOWN)
        self.play(Write(cross1), Write(cross2))
        self.wait(1)

        result1 = MathTex(r""18"").next_to(cross1, DOWN)
        result2 = MathTex(r""20"").next_to(cross2, DOWN)
        self.play(Transform(cross1, result1), Transform(cross2, result2))
        self.wait(1)

        greater_than = MathTex(r""18 < 20"").move_to(DOWN*2)
        self.play(Write(greater_than))
        self.wait(2)

        self.play(FadeOut(fraction1), FadeOut(fraction2), FadeOut(cross1), FadeOut(cross2), FadeOut(greater_than))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Reciprocals Exploration""
animation:  animate displaying a fraction on the screen. Show the process of finding its reciprocal by flipping the numerator and denominator, visually demonstrating the concept of reciprocals.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ReciprocalsExploration(Scene):
    def construct(self):
        title = Text(""Reciprocals Exploration"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        fraction = MathTex(r""\frac{2}{3}"").scale(2)
        reciprocal = MathTex(r""\frac{3}{2}"").scale(2)
        arrow = Arrow(UP, DOWN).next_to(fraction, DOWN)

        self.play(Write(fraction))
        self.wait(1)
        self.play(GrowArrow(arrow))
        self.play(ReplacementTransform(fraction, reciprocal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Perimeter of Polygons""
    animation:  animate different polygons with labeled side lengths. Show the process of calculating the perimeter of each polygon by adding all the side lengths together.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PerimeterOfPolygons(Scene):
    def construct(self):
        title = Text(""Calculating Perimeter of Polygons"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Triangle
        triangle = Polygon([-1, 1, 0], [1, 1, 0], [0, -1, 0], color=WHITE)
        triangle_sides = VGroup(
            Tex(""5"").next_to(triangle, UP),
            Tex(""4"").next_to(triangle, RIGHT),
            Tex(""3"").next_to(triangle, LEFT)
        )
        triangle_perimeter = Tex(""Perimeter = 5 + 4 + 3 = 12"").next_to(triangle, DOWN)
        self.play(Create(triangle), Write(triangle_sides))
        self.wait(1)
        self.play(Write(triangle_perimeter))
        self.wait(2)
        self.play(FadeOut(triangle), FadeOut(triangle_sides), FadeOut(triangle_perimeter))

        # Square
        square = Square(side_length=2).shift(DOWN)
        square_sides = VGroup(
            Tex(""4"").next_to(square, UP),
            Tex(""4"").next_to(square, RIGHT),
            Tex(""4"").next_to(square, DOWN),
            Tex(""4"").next_to(square, LEFT)
        )
        square_perimeter = Tex(""Perimeter = 4 + 4 + 4 + 4 = 16"").next_to(square, DOWN)
        self.play(Create(square), Write(square_sides))
        self.wait(1)
        self.play(Write(square_perimeter))
        self.wait(2)
        self.play(FadeOut(square), FadeOut(square_sides), FadeOut(square_perimeter))

        # Pentagon
        pentagon = RegularPolygon(n=5, color=WHITE).scale(1.2).shift(DOWN)
        pentagon_sides = VGroup(
            *[Tex(""3"").next_to(pentagon, direction) for direction in [UP, UR, DR, DL, LEFT]]
        )
        pentagon_perimeter = Tex(""Perimeter = 3 + 3 + 3 + 3 + 3 = 15"").next_to(pentagon, DOWN)
        self.play(Create(pentagon), Write(pentagon_sides))
        self.wait(1)
        self.play(Write(pentagon_perimeter))
        self.wait(2)
        self.play(FadeOut(pentagon), FadeOut(pentagon_sides), FadeOut(pentagon_perimeter))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Measuring Angles in Radians""
    animation:  animate displaying an angle in a circle and measuring it in radians by showing the ratio of arc length to radius.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MeasureRadians(Scene):
    def construct(self):
        title = Text(""Measuring Angles in Radians"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        circle = Circle(radius=2)
        angle = ValueTracker(0)
        arc = always_redraw(lambda: Arc(radius=2, angle=angle.get_value()))
        line1 = Line(start=[0,0,0], end=[2,0,0])
        line2 = always_redraw(lambda: Line(start=[0,0,0], end=[2*np.cos(angle.get_value()), 2*np.sin(angle.get_value()), 0]))
        radius_text = Text(""Radius"", font_size=24).next_to(line1, DOWN)
        arc_length_text = always_redraw(lambda: Text(f""Arc length\n{np.round(arc.get_arc_length(),2)}"", font_size=24).next_to(arc, RIGHT, buff=0.1))
        angle_measure = always_redraw(lambda: DecimalNumber(angle.get_value() / PI, num_decimal_places=2).next_to(arc.get_arc_center(), UP+LEFT))

        self.play(Create(circle), Create(line1), Create(line2), Write(radius_text))
        self.play(angle.animate.set_value(2*PI), run_time=4, rate_func=linear)
        self.play(Create(arc), Write(arc_length_text), Write(angle_measure))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Density, Mass, and Volume""
    animation:  animate objects of different sizes and materials, illustrating the relationship between density, mass, and volume using the formula D = M / V.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DensityMassVolume(Scene):
    def construct(self):
        title = Text(""Density, Mass, and Volume"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Formula
        formula = MathTex(""D = \\frac{M}{V}"").to_edge(UP)
        self.play(Write(formula))
        self.wait(1)

        # Objects
        square = Square(color=BLUE).shift(LEFT*3)
        circle = Circle(color=GREEN).shift(RIGHT*3)
        square_text = Text(""High Density"", font_size=24).next_to(square, DOWN)
        circle_text = Text(""Low Density"", font_size=24).next_to(circle, DOWN)

        # Mass and Volume indicators
        square_mass = Text(""High M"", font_size=24).next_to(square, LEFT)
        square_volume = Text(""Low V"", font_size=24).next_to(square, RIGHT)
        circle_mass = Text(""Low M"", font_size=24).next_to(circle, LEFT)
        circle_volume = Text(""High V"", font_size=24).next_to(circle, RIGHT)

        self.play(DrawBorderThenFill(square), DrawBorderThenFill(circle))
        self.wait(1)
        self.play(Write(square_text), Write(circle_text))
        self.wait(1)
        self.play(Write(square_mass), Write(square_volume), Write(circle_mass), Write(circle_volume))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Prime Factorization Explained""
animation:  animate a composite number being displayed, followed by the number breaking down into its prime factors, illustrating the process of prime factorization.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PrimeFactorization(Scene):
    def construct(self):
        title = Text(""Prime Factorization Explained"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number = 12
        number_text = Text(str(number), font_size=72)
        self.play(Write(number_text))
        self.wait(1)

        factors = self.prime_factors(number)
        factors_text = VGroup(*[Text(str(factor), font_size=72) for factor in factors])
        factors_text.arrange(RIGHT, buff=0.5)

        self.play(Transform(number_text, factors_text))
        self.wait(2)

    def prime_factors(self, n):
        i = 2
        factors = []
        while i * i <= n:
            if n % i:
                i += 1
            else:
                n //= i
                factors.append(i)
        if n > 1:
            factors.append(n)
        return factors"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Elastic vs. Inelastic Collisions""
    animation:  animate two objects colliding. Show the difference between an elastic collision where kinetic energy is conserved, and an inelastic collision where kinetic energy is lost during the collision.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CollisionAnimation(Scene):
    def construct(self):
        title = Text(""Elastic vs. Inelastic Collisions"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Elastic Collision
        ball1 = Circle(color=BLUE).shift(LEFT*3)
        ball2 = Circle(color=RED).shift(RIGHT*3)
        self.play(FadeIn(ball1), FadeIn(ball2))
        self.play(ball1.animate.shift(RIGHT*2), ball2.animate.shift(LEFT*2))
        self.play(ball1.animate.shift(RIGHT*2), ball2.animate.shift(LEFT*2))
        self.wait(1)

        self.play(FadeOut(ball1), FadeOut(ball2))

        # Inelastic Collision
        ball1 = Circle(color=BLUE).shift(LEFT*3)
        ball2 = Circle(color=RED).shift(RIGHT*3)
        self.play(FadeIn(ball1), FadeIn(ball2))
        self.play(ball1.animate.shift(RIGHT*1.5), ball2.animate.shift(LEFT*1.5))
        merged_ball = Circle(color=PURPLE, fill_opacity=1).scale(1.5).shift(RIGHT*0.25)
        self.play(ReplacementTransform(ball1, merged_ball), ReplacementTransform(ball2, merged_ball))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Multiplying Decimals""
    animation:  animate two decimals being multiplied together, emphasizing the placement of the decimal point in the product.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingDecimals(Scene):
    def construct(self):
        title = Text(""Multiplying Decimals"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup numbers for multiplication
        decimal_1 = DecimalNumber(0.75, num_decimal_places=2).scale(2)
        decimal_2 = DecimalNumber(0.4, num_decimal_places=1).next_to(decimal_1, DOWN).scale(2)
        multiply_sign = Text(""*"").scale(2).next_to(decimal_1, LEFT)
        equals_sign = Text(""="").scale(2).next_to(decimal_1, RIGHT)

        # Group for alignment
        equation = VGroup(multiply_sign, decimal_1, decimal_2, equals_sign)

        # Result of multiplication
        result = DecimalNumber(0.75 * 0.4, num_decimal_places=2).scale(2).next_to(equals_sign, RIGHT)

        # Animate the multiplication process
        self.play(Write(multiply_sign), Write(decimal_1), Write(decimal_2))
        self.wait(1)
        self.play(Write(equals_sign))
        self.wait(1)
        self.play(TransformFromCopy(equation, result))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Balancing Act: Center of Mass""
animation:  animate a flat object (like a ruler) being balanced on a finger, demonstrating the concept of the center of mass and how it affects the object's stability.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CenterOfMass(Scene):
    def construct(self):
        title = Text(""Balancing Act: Center of Mass"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a flat object (ruler)
        ruler = Rectangle(color=BLUE, height=0.2, width=3)
        finger = Dot(color=RED)
        finger.move_to(ruler.get_bottom())

        self.play(FadeIn(ruler), FadeIn(finger))
        self.wait(1)

        # Animate the ruler balancing on the finger
        for _ in range(2):
            self.play(
                ruler.animate.rotate_about_origin(PI/12).move_to(finger.get_center() + UP * 0.1),
                run_time=1,
                rate_func=there_and_back
            )
            self.play(
                ruler.animate.rotate_about_origin(-PI/12).move_to(finger.get_center() + UP * 0.1),
                run_time=1,
                rate_func=there_and_back
            )

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Rotational Symmetry in Shapes""
animation:  animate shapes with different orders of rotational symmetry (e.g., square, pentagon) rotating around their center to demonstrate their rotational symmetry properties.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RotationalSymmetry(Scene):
    def construct(self):
        title = Text(""Rotational Symmetry in Shapes"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Square rotation
        square = Square(color=BLUE)
        self.play(Create(square))
        for _ in range(4):
            self.play(Rotate(square, angle=PI/2), run_time=1)
            self.wait(0.5)
        self.play(FadeOut(square))

        # Pentagon rotation
        pentagon = RegularPolygon(5, color=GREEN)
        self.play(Create(pentagon))
        for _ in range(5):
            self.play(Rotate(pentagon, angle=TAU/5), run_time=1)
            self.wait(0.5)
        self.play(FadeOut(pentagon))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Speed, Distance, and Time Relationship""
animation:  animate an object moving at a constant speed, illustrating the relationship between speed, distance, and time by showing how speed is calculated as distance divided by time.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SpeedDistanceTime(Scene):
    def construct(self):
        title = Text(""Speed, Distance, and Time Relationship"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup
        start_point = LEFT * 4
        end_point = RIGHT * 4
        object = Dot(start_point, color=RED)
        distance_line = Line(start_point, end_point).set_color(WHITE)
        distance_text = Text(""Distance"", color=WHITE).scale(0.5).next_to(distance_line, DOWN)
        
        # Time tracker
        time_tracker = ValueTracker(0)
        time_text = Text(""Time: "", color=WHITE).scale(0.5).to_edge(UP)
        time_value = DecimalNumber(time_tracker.get_value(), num_decimal_places=2).next_to(time_text, RIGHT)
        time_value.add_updater(lambda m: m.set_value(time_tracker.get_value()))

        # Speed calculation
        speed_text = Text(""Speed = Distance / Time"", color=WHITE).scale(0.5).next_to(time_text, DOWN)
        
        # Animation
        self.play(ShowCreation(distance_line), Write(distance_text))
        self.play(FadeIn(object))
        self.play(Write(time_text), Write(time_value), Write(speed_text))
        self.play(
            object.animate.move_to(end_point),
            time_tracker.animate.set_value(5),  # Assuming it takes 5 seconds to move
            run_time=5,
            rate_func=linear
        )

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Absolute Value""
animation:  animate a number line with zero at the center, and show how the absolute value of a number is represented as the distance from zero on the number line, emphasizing the concept of magnitude without direction.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class AbsoluteValueScene(Scene):
    def construct(self):
        # Title
        title = Text(""Understanding Absolute Value"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Number line
        number_line = NumberLine(x_range=[-5, 5, 1], length=10, include_numbers=True, include_tip=True)
        self.play(Create(number_line))
        self.wait(1)

        # Absolute value demonstration
        dot = Dot(color=RED).move_to(number_line.n2p(0))
        self.play(FadeIn(dot))

        # Animate absolute value of -3
        negative_three = number_line.n2p(-3)
        self.play(dot.animate.move_to(negative_three))
        self.wait(1)
        distance_line = DashedLine(start=number_line.n2p(0), end=negative_three, color=YELLOW)
        self.play(Create(distance_line))
        self.wait(2)
        self.play(FadeOut(distance_line), dot.animate.move_to(number_line.n2p(0)))

        # Animate absolute value of 3
        three = number_line.n2p(3)
        self.play(dot.animate.move_to(three))
        self.wait(1)
        distance_line = DashedLine(start=number_line.n2p(0), end=three, color=YELLOW)
        self.play(Create(distance_line))
        self.wait(2)

        # Cleanup
        self.play(FadeOut(dot), FadeOut(distance_line), FadeOut(number_line))
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Solving Proportions with Cross-Multiplication""
    animation:  display a proportion such as 2/3 = x/6 on the screen. Animate the process of cross-multiplying and dividing to solve for the unknown value of x.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SolveProportion(Scene):
    def construct(self):
        title = Text(""Solving Proportions with Cross-Multiplication"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        proportion = Text(""2/3 = x/6"").scale(1)
        self.play(Write(proportion))
        self.wait(2)

        cross_multiply = Text(""2 * 6 = 3 * x"", color=BLUE).next_to(proportion, DOWN)
        self.play(Transform(proportion, cross_multiply))
        self.wait(2)

        solve_for_x = Text(""x = 12 / 3"", color=GREEN).next_to(cross_multiply, DOWN)
        self.play(Write(solve_for_x))
        self.wait(2)

        x_value = Text(""x = 4"", color=RED).next_to(solve_for_x, DOWN)
        self.play(Transform(solve_for_x, x_value))
        self.wait(2)

        self.play(FadeOut(proportion), FadeOut(solve_for_x))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Projectile Motion Simulation""
    animation:  animate an object being launched at an angle, showing its parabolic path and the effects of gravity on its trajectory.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ProjectileMotionSimulation(Scene):
    def construct(self):
        title = Text(""Projectile Motion Simulation"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Parameters for the projectile motion
        velocity = 5
        angle = 45
        g = 9.8
        time_of_flight = 2 * velocity * np.sin(np.radians(angle)) / g
        max_height = (velocity**2) * (np.sin(np.radians(angle))**2) / (2 * g)
        range_projectile = (velocity**2) * np.sin(2 * np.radians(angle)) / g

        # Creating the trajectory path
        trajectory = FunctionGraph(
            lambda x: x * np.tan(np.radians(angle)) - (g * x**2) / (2 * velocity**2 * np.cos(np.radians(angle))**2),
            x_range=[0, range_projectile],
            color=BLUE
        )

        # Creating the object
        projectile = Dot(radius=0.2, color=RED)
        projectile.move_to(trajectory.points[0])

        # Animate the projectile along the path
        self.play(MoveAlongPath(projectile, trajectory, rate_func=linear), run_time=time_of_flight)
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exponents and Square Roots""
    animation:  animate a number being multiplied by itself to demonstrate an exponent operation. Next, animate finding the square root as the inverse operation, showing the original number being reconstructed from the squared result.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ExponentsAndSquareRoots(Scene):
    def construct(self):
        # Title
        title = Text(""Exponents and Square Roots"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Exponent operation
        number = Text(""3"")
        times = Text(""×"")
        number2 = Text(""3"")
        equals = Text(""="")
        result = Text(""9"")

        exponent_group = VGroup(number, times, number2, equals, result)
        exponent_group.arrange(RIGHT)

        self.play(Write(number), Write(times), Write(number2))
        self.wait(1)
        self.play(Write(equals), Write(result))
        self.wait(2)
        self.play(FadeOut(exponent_group))

        # Square root operation
        sqrt_sign = Text(""√"")
        squared_result = Text(""9"")
        equals_sqrt = Text(""="")
        original_number = Text(""3"")

        sqrt_group = VGroup(sqrt_sign, squared_result, equals_sqrt, original_number)
        sqrt_group.arrange(RIGHT)

        self.play(Write(sqrt_sign), Write(squared_result))
        self.wait(1)
        self.play(Write(equals_sqrt), Write(original_number))
        self.wait(2)
        self.play(FadeOut(sqrt_group))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Associative Property of Multiplication""
    animation:  animate multiplying three numbers in different groupings, such as (2 × 3) × 4 and 2 × (3 × 4), and show that the product remains the same in each case, illustrating the associative property of multiplication.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class AssociativeProperty(Scene):
    def construct(self):
        title = Text(""Associative Property of Multiplication"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # First grouping (2 × 3) × 4
        first_group = MathTex(""(2 \\times 3) \\times 4 = 6 \\times 4 = 24"").scale(0.7)
        self.play(Write(first_group))
        self.wait(2)
        self.play(FadeOut(first_group))

        # Second grouping 2 × (3 × 4)
        second_group = MathTex(""2 \\times (3 \\times 4) = 2 \\times 12 = 24"").scale(0.7)
        self.play(Write(second_group))
        self.wait(2)

        # Conclusion
        conclusion = Text(""The product remains the same!"").scale(0.7)
        self.play(ReplacementTransform(second_group, conclusion))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Rounding Numbers on a Number Line""
animation:  animate a number line with a number displayed on it. Show the number being rounded to the nearest ten, hundred, or thousand with a visual representation of the rounding process.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class RoundingNumbers(Scene):
    def construct(self):
        title = Text(""Rounding Numbers on a Number Line"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        number_line = NumberLine(x_range=[-1000, 1000, 100], length=10, include_numbers=True, numbers_to_exclude=[0])
        self.play(Create(number_line))
        self.wait(1)

        # Example number to round
        number = 253
        point = Dot(number_line.n2p(number), color=YELLOW)
        number_label = MathTex(str(number)).next_to(point, UP)
        self.play(FadeIn(point), Write(number_label))
        self.wait(1)

        # Rounding to the nearest ten
        rounded_ten = round(number, -1)
        rounded_ten_point = Dot(number_line.n2p(rounded_ten), color=GREEN)
        rounded_ten_label = MathTex(str(rounded_ten)).next_to(rounded_ten_point, UP)
        self.play(Transform(point, rounded_ten_point), Transform(number_label, rounded_ten_label))
        self.wait(1)

        # Rounding to the nearest hundred
        rounded_hundred = round(number, -2)
        rounded_hundred_point = Dot(number_line.n2p(rounded_hundred), color=BLUE)
        rounded_hundred_label = MathTex(str(rounded_hundred)).next_to(rounded_hundred_point, UP)
        self.play(Transform(point, rounded_hundred_point), Transform(number_label, rounded_hundred_label))
        self.wait(1)

        # Rounding to the nearest thousand
        rounded_thousand = round(number, -3)
        if rounded_thousand == 0:  # Avoid placing a dot at the origin if rounded to 0
            rounded_thousand_point = Dot(number_line.n2p(1), color=RED).move_to(number_line.n2p(rounded_thousand))
        else:
            rounded_thousand_point = Dot(number_line.n2p(rounded_thousand), color=RED)
        rounded_thousand_label = MathTex(str(rounded_thousand)).next_to(rounded_thousand_point, UP)
        self.play(Transform(point, rounded_thousand_point), Transform(number_label, rounded_thousand_label))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Complementary and Supplementary Angles in a Triangle""
animation:  animate a triangle with one 90° angle, and demonstrate how the other two angles are complementary, summing up to 90°.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ComplementaryAndSupplementary(Scene):
    def construct(self):
        title = Text(""Complementary and Supplementary Angles in a Triangle"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a right-angled triangle
        right_triangle = Polygon(ORIGIN, 4*RIGHT, 4*RIGHT+3*UP, color=WHITE)
        right_angle_marker = RightAngle(right_triangle, 1, length=0.3, quadrant=(-1,1))
        self.play(Create(right_triangle), Create(right_angle_marker))
        self.wait(1)

        # Labels for the angles
        angle_90 = MathTex(""90^\\circ"").next_to(right_angle_marker, DOWN, buff=0.1)
        self.play(Write(angle_90))

        # Other two angles
        angle_a = Angle(right_triangle[2], right_triangle[0], right_triangle[1], radius=0.5, color=YELLOW)
        angle_b = Angle(right_triangle[0], right_triangle[1], right_triangle[2], radius=0.5, color=BLUE)
        angle_a_label = MathTex(""\\alpha"").move_to(angle_a.point_from_proportion(0.5))
        angle_b_label = MathTex(""\\beta"").move_to(angle_b.point_from_proportion(0.5))
        self.play(Create(angle_a), Write(angle_a_label), Create(angle_b), Write(angle_b_label))
        self.wait(1)

        # Complementary angles text
        complementary_text = Text(""α + β = 90°"", font_size=36).to_edge(DOWN)
        self.play(Write(complementary_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Multiplying Powers with the Same Base""
    animation:  display two powers with the same base side by side, and animate multiplying them by adding their exponents to show the result.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingPowers(Scene):
    def construct(self):
        title = Text(""Multiplying Powers with the Same Base"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        power1 = MathTex(""a^m"").shift(LEFT)
        times = MathTex(""\\times"").next_to(power1, RIGHT)
        power2 = MathTex(""a^n"").next_to(times, RIGHT)
        equals = MathTex(""="").next_to(power2, RIGHT)
        result = MathTex(""a^{m+n}"").next_to(equals, RIGHT)

        self.play(Write(power1), Write(times), Write(power2))
        self.wait(1)
        self.play(TransformMatchingTex(power1.copy(), result[0][0]), 
                  TransformMatchingTex(power2.copy(), result[0][2:]),
                  Write(equals))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Dividing Fractions Illustrated""
animation:  animate two fractions side by side, and show the process of dividing them by multiplying the first fraction by the reciprocal of the second fraction.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DividingFractions(Scene):
    def construct(self):
        title = Text(""Dividing Fractions Illustrated"")
        title.scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Fractions
        fraction1 = MathTex(r""\frac{3}{4}"")
        fraction2 = MathTex(r""\frac{5}{6}"")
        times = MathTex(r""\times"")
        equals = MathTex(r""="")
        reciprocal = MathTex(r""\frac{6}{5}"")

        fraction_group = VGroup(fraction1, times, fraction2, equals, reciprocal).arrange(RIGHT)

        self.play(Write(fraction1), Write(fraction2))
        self.wait(1)
        self.play(Write(times))
        self.wait(1)
        self.play(Transform(fraction2.copy(), reciprocal))
        self.wait(1)
        self.play(Write(equals))
        self.wait(1)
        self.play(Write(reciprocal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Statistical Measures Visualization""
animation:  display a set of numbers and animate finding the mean (average), median (middle value), and mode (most frequent value) of the set.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class StatisticalMeasuresVisualization(Scene):
    def construct(self):
        title = Text(""Statistical Measures Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        numbers = [1, 2, 3, 4, 5, 3, 3]
        numbers_text = Text(str(numbers)).scale(0.8)
        self.play(Write(numbers_text))
        self.wait(2)

        mean_value = sum(numbers) / len(numbers)
        mean_text = Text(f""Mean: {mean_value}"").to_edge(DOWN)
        self.play(Transform(numbers_text, mean_text))
        self.wait(2)

        numbers.sort()
        if len(numbers) % 2 == 0:
            median_value = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2
        else:
            median_value = numbers[len(numbers) // 2]
        median_text = Text(f""Median: {median_value}"").to_edge(DOWN)
        self.play(Transform(numbers_text, median_text))
        self.wait(2)

        mode_value = max(set(numbers), key=numbers.count)
        mode_text = Text(f""Mode: {mode_value}"").to_edge(DOWN)
        self.play(Transform(numbers_text, mode_text))
        self.wait(2)

        self.play(FadeOut(numbers_text))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Friction and Sliding Objects""
animation:  animate an object sliding on a surface. Show how friction acts in the opposite direction to the object's motion, slowing it down and eventually bringing it to a stop.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class FrictionAnimation(Scene):
    def construct(self):
        # Title
        title = Text(""Friction and Sliding Objects"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Surface
        surface = Line(LEFT * 5, RIGHT * 5)
        self.play(Create(surface))

        # Object
        object = Square(color=BLUE).scale(0.5)
        object.move_to(LEFT * 4)
        self.play(FadeIn(object))

        # Motion and Friction
        friction_arrow = Arrow(object.get_center(), object.get_center() + LEFT, buff=0, color=RED)
        motion_arrow = Arrow(object.get_center(), object.get_center() + RIGHT, buff=0, color=GREEN)

        self.play(ShowCreation(motion_arrow), GrowArrow(friction_arrow))
        for _ in range(5):
            self.play(object.animate.shift(RIGHT * 0.8), run_time=0.5)
            self.play(object.animate.shift(LEFT * 0.2), run_time=0.5)
            motion_arrow.scale(0.8, about_point=object.get_center())
            friction_arrow.scale(0.8, about_point=object.get_center())

        self.play(FadeOut(object), FadeOut(motion_arrow), FadeOut(friction_arrow), FadeOut(surface))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Simplifying Ratios""
    animation:  display a ratio on the screen and animate simplifying it by dividing both terms by their greatest common factor, showing the process of reducing the ratio to its simplest form.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SimplifyingRatios(Scene):
    def construct(self):
        title = Text(""Simplifying Ratios"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Display the initial ratio
        ratio = Text(""12:36"").scale(1.5)
        self.play(Write(ratio))
        self.wait(2)

        # Show the process of simplifying the ratio
        simplified_ratio = Text(""= 1:3"", color=BLUE).next_to(ratio, DOWN)
        self.play(TransformMatchingShapes(ratio.copy(), simplified_ratio))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Symmetry in Polygons""
animation:  animate examples of polygons with line symmetry (e.g., equilateral triangle) and rotational symmetry (e.g., square), showcasing their symmetrical properties.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SymmetryInPolygons(Scene):
    def construct(self):
        title = Text(""Symmetry in Polygons"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Line symmetry in an equilateral triangle
        triangle = RegularPolygon(n=3).scale(2)
        line_of_symmetry = Line(start=triangle.get_top(), end=triangle.get_bottom(), color=RED)
        self.play(Create(triangle))
        self.wait(1)
        self.play(ShowCreation(line_of_symmetry))
        self.wait(2)
        self.play(FadeOut(triangle), FadeOut(line_of_symmetry))

        # Rotational symmetry in a square
        square = Square().scale(2)
        dot_center = Dot(square.get_center(), color=RED)
        self.play(Create(square))
        self.wait(1)
        self.play(FadeIn(dot_center))
        self.play(Rotate(square, angle=PI/2), Rotate(dot_center, angle=PI/2))
        self.wait(1)
        self.play(FadeOut(square), FadeOut(dot_center))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Converting Between Percentages and Decimals""
    animation:  animate displaying a percentage value and show the process of converting it to a decimal by dividing by 100.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ConvertPercentageToDecimal(Scene):
    def construct(self):
        title = Text(""Converting Between Percentages and Decimals"").scale(0.7)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        percentage = Text(""75%"", font_size=72)
        equals = Text(""="", font_size=72).next_to(percentage, RIGHT)
        division = Text(""/ 100 = ?"", font_size=72).next_to(equals, RIGHT)
        self.play(Write(percentage))
        self.play(Write(equals), Write(division))
        self.wait(2)

        decimal = Text(""0.75"", font_size=72).next_to(equals, RIGHT)
        self.play(ReplacementTransform(division, decimal))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Calculating Work Done""
    animation:  animate an object being pushed or lifted, and show the calculation of work done as force multiplied by distance.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WorkDone(Scene):
    def construct(self):
        title = Text(""Calculating Work Done"").scale(0.9)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        # Object
        box = Square(color=BLUE, fill_opacity=1).scale(0.5)
        self.play(FadeIn(box))
        self.wait(0.5)

        # Force arrow
        force_arrow = Arrow(start=box.get_center(), end=box.get_center() + RIGHT * 2, buff=0, color=YELLOW)
        force_text = Text(""Force"", color=YELLOW).next_to(force_arrow, UP, buff=0.1)
        self.play(GrowArrow(force_arrow), Write(force_text))
        self.wait(0.5)

        # Movement
        path = Line(start=box.get_center(), end=box.get_center() + RIGHT * 3)
        self.play(MoveAlongPath(box, path), run_time=2)
        self.play(FadeOut(force_arrow), FadeOut(force_text))

        # Distance
        distance_line = Line(start=box.get_center() + DOWN * 0.5 + LEFT * 1.5, end=box.get_center() + DOWN * 0.5 + RIGHT * 1.5)
        distance_text = Text(""Distance"", color=GREEN).next_to(distance_line, DOWN, buff=0.1)
        self.play(ShowCreation(distance_line), Write(distance_text))
        self.wait(0.5)

        # Work done calculation
        work_done = Text(""Work = Force × Distance"", color=RED).to_edge(DOWN)
        self.play(Write(work_done))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Distributive Property Visualization""
animation:  animate a number being multiplied by a sum (e.g., 2(x + 3)) and show the distribution of the multiplication over the addition, visually illustrating the distributive property in action.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DistributiveProperty(Scene):
    def construct(self):
        title = Text(""Distributive Property Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        equation = Text(""2(x + 3) = 2x + 6"").scale(1.2)
        highlight1 = SurroundingRectangle(equation[0][2:9], color=YELLOW)
        highlight2 = SurroundingRectangle(equation[0][12:], color=YELLOW)

        self.play(Write(equation))
        self.wait(1)
        self.play(Create(highlight1))
        self.wait(1)
        self.play(ReplacementTransform(highlight1, highlight2))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Solving Equations with Inverse Operations""
animation:  display an equation (e.g., x + 5 = 10) and animate the process of using the inverse operation (subtraction) to solve for the variable x.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SolveEquation(Scene):
    def construct(self):
        title = Text(""Solving Equations with Inverse Operations"").scale(0.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        equation = Text(""x + 5 = 10"").scale(0.7)
        self.play(Write(equation))
        self.wait(1)

        subtract_5 = Text(""-5"", color=RED).next_to(equation, DOWN)
        self.play(Write(subtract_5))
        self.wait(1)

        equation_solved = Text(""x = 5"").scale(0.7).next_to(equation, DOWN, buff=1)
        self.play(ReplacementTransform(equation.copy(), equation_solved), FadeOut(subtract_5))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Velocity and Acceleration Illustrated""
animation:  animate an object moving with changing speed, clearly showing the difference between velocity (speed with direction) and acceleration (change in velocity) through visual representations.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class VelocityAcceleration(Scene):
    def construct(self):
        title = Text(""Velocity and Acceleration Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a dot to represent the object
        dot = Dot(color=BLUE).move_to(3*LEFT)
        path = VMobject(color=WHITE)
        path.set_points_as_corners([dot.get_center(), dot.get_center()])

        def update_path(path):
            previous_path = path.copy()
            previous_path.add_points_as_corners([dot.get_center()])
            path.become(previous_path)

        path.add_updater(update_path)
        self.add(path, dot)

        # Animate the dot with changing velocity and show acceleration vector
        self.play(dot.animate.shift(4*RIGHT), rate_func=there_and_back, run_time=4)
        acceleration_arrow = Arrow(dot.get_center(), dot.get_center() + RIGHT, buff=0, color=YELLOW)
        acceleration_arrow.add_updater(lambda m: m.put_start_and_end_on(dot.get_center(), dot.get_center() + RIGHT*dot.get_center()[0]*0.2))

        self.add(acceleration_arrow)
        self.wait(2)

        # Show velocity vector
        velocity_arrow = Arrow(dot.get_center(), dot.get_center() + RIGHT, buff=0, color=GREEN)
        velocity_arrow.add_updater(lambda m: m.put_start_and_end_on(dot.get_center(), dot.get_center() + RIGHT if dot.get_center()[0] < 0 else dot.get_center() + LEFT))

        self.add(velocity_arrow)
        self.wait(4)

        self.play(FadeOut(velocity_arrow), FadeOut(acceleration_arrow), FadeOut(dot), FadeOut(path))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Properties of Parallelograms""
    animation:  animate a parallelogram displaying its properties - opposite sides are parallel and equal in length, and opposite angles are equal in measure.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class ParallelogramProperties(Scene):
    def construct(self):
        title = Text(""Properties of Parallelograms"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create a parallelogram
        parallelogram = Polygon(
            np.array([-2, 1, 0]),
            np.array([2, 1, 0]),
            np.array([3, -1, 0]),
            np.array([-1, -1, 0]),
            color=BLUE
        )
        self.play(Create(parallelogram))
        self.wait(1)

        # Annotations for parallel and equal sides
        parallel_sign = Tex(""||"").scale(0.5)
        parallel_sign.move_to(np.array([-1.5, 0, 0]))
        self.play(Write(parallel_sign))

        parallel_sign_2 = parallel_sign.copy()
        parallel_sign_2.move_to(np.array([2.5, 0, 0]))
        self.play(Write(parallel_sign_2))

        equal_length = Tex(""=="").scale(0.5)
        equal_length.move_to(np.array([0.5, 1.2, 0]))
        self.play(Write(equal_length))

        equal_length_2 = equal_length.copy()
        equal_length_2.move_to(np.array([0.5, -1.2, 0]))
        self.play(Write(equal_length_2))

        # Annotations for angles
        angle_a = Angle(parallelogram.get_vertices()[0], parallelogram.get_vertices()[1], parallelogram.get_vertices()[3], radius=0.3, color=YELLOW)
        angle_b = angle_a.copy()
        angle_b.move_to(parallelogram.get_vertices()[2], aligned_edge=DOWN)
        self.play(Create(angle_a), Create(angle_b))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Calculating Simple Interest""
animation:  animate showing a principal amount, interest rate, and time values on the screen. Calculate the simple interest earned by multiplying the principal amount, interest rate, and time, and display the result.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class SimpleInterest(Scene):
    def construct(self):
        title = Text(""Calculating Simple Interest"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Displaying principal amount, interest rate, and time
        principal_text = Text(""Principal: $1000"", font_size=24)
        interest_text = Text(""Interest Rate: 5%"", font_size=24).next_to(principal_text, DOWN)
        time_text = Text(""Time: 3 years"", font_size=24).next_to(interest_text, DOWN)

        self.play(Write(principal_text), Write(interest_text), Write(time_text))
        self.wait(2)

        # Calculating simple interest
        simple_interest = 1000 * 0.05 * 3
        result_text = Text(f""Simple Interest: ${simple_interest}"", font_size=24).next_to(time_text, DOWN)

        self.play(Write(result_text))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Types of Levers""
animation:  animate examples of first, second, and third-class levers in action, demonstrating how they balance effort and load. Show how each type of lever functions and the mechanical advantage it provides.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LeversAnimation(Scene):
    def create_lever(self, fulcrum_position, effort_position, load_position, lever_length=6):
        # Base line for the lever
        lever = Line(start=LEFT*lever_length/2, end=RIGHT*lever_length/2, color=WHITE)
        lever.move_to(UP*0.5)
        
        # Fulcrum
        fulcrum = Triangle().scale(0.2).set_fill(ORANGE, opacity=1)
        fulcrum.next_to(lever, DOWN, buff=0).shift(fulcrum_position*RIGHT)
        
        # Effort
        effort = Circle(color=BLUE, fill_opacity=1).scale(0.2)
        effort.next_to(lever, UP, buff=0).shift(effort_position*RIGHT)
        
        # Load
        load = Square(color=RED, fill_opacity=1).scale(0.4)
        load.next_to(lever, UP, buff=0).shift(load_position*RIGHT)
        
        return VGroup(lever, fulcrum, effort, load)

    def construct(self):
        title = Text(""Understanding Types of Levers"", font_size=24)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))
        
        # First-class lever
        first_class_lever = self.create_lever(fulcrum_position=0, effort_position=-2, load_position=2)
        self.play(ShowCreation(first_class_lever))
        self.wait(2)
        self.play(FadeOut(first_class_lever))
        
        # Second-class lever
        second_class_lever = self.create_lever(fulcrum_position=-3, effort_position=2, load_position=1)
        self.play(ShowCreation(second_class_lever))
        self.wait(2)
        self.play(FadeOut(second_class_lever))
        
        # Third-class lever
        third_class_lever = self.create_lever(fulcrum_position=-3, effort_position=1, load_position=2)
        self.play(ShowCreation(third_class_lever))
        self.wait(2)
        self.play(FadeOut(third_class_lever))"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Multiplying Mixed Numbers""
animation:  display two mixed numbers and animate converting them to improper fractions. Next, show the multiplication of the two improper fractions and simplify the result.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class MultiplyingMixedNumbers(Scene):
    def construct(self):
        # Title
        title = Text(""Multiplying Mixed Numbers"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Mixed numbers
        mixed_number_1 = Text(""2 1/3"").scale(1)
        mixed_number_2 = Text(""1 3/4"").next_to(mixed_number_1, DOWN, buff=0.5).scale(1)

        self.play(Write(mixed_number_1), Write(mixed_number_2))
        self.wait(2)

        # Convert to improper fractions
        improper_fraction_1 = Text(""7/3"").next_to(mixed_number_1, RIGHT, buff=1)
        improper_fraction_2 = Text(""7/4"").next_to(mixed_number_2, RIGHT, buff=1)

        self.play(Transform(mixed_number_1, improper_fraction_1))
        self.play(Transform(mixed_number_2, improper_fraction_2))
        self.wait(2)

        # Multiplication
        multiplication = Text(""="").next_to(improper_fraction_1, RIGHT, buff=0.5)
        result_fraction = Text(""49/12"").next_to(multiplication, RIGHT, buff=0.5)

        self.play(Write(multiplication))
        self.play(Write(result_fraction))
        self.wait(2)

        # Simplify
        simplified_fraction = Text(""= 4 1/12"").next_to(result_fraction, RIGHT, buff=0.5)

        self.play(Write(simplified_fraction))
        self.wait(2)

        # Clear
        self.play(FadeOut(mixed_number_1), FadeOut(mixed_number_2), FadeOut(improper_fraction_1), FadeOut(improper_fraction_2), FadeOut(multiplication), FadeOut(result_fraction), FadeOut(simplified_fraction))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Average Acceleration Calculation""
animation:  animate an object changing its velocity over time. Show the calculation of its average acceleration as the change in velocity divided by time.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class AverageAcceleration(Scene):
    def construct(self):
        title = Text(""Average Acceleration Calculation"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Animate object moving with changing velocity
        object = Circle().set_fill(PINK, opacity=0.5)
        start_point = LEFT * 4
        end_point = RIGHT * 4
        self.play(FadeIn(object.move_to(start_point)))
        self.wait(1)
        self.play(object.animate.shift(RIGHT * 2).set_fill(GREEN, opacity=0.5), run_time=2, rate_func=linear)
        self.wait(1)
        self.play(object.animate.shift(RIGHT * 2).set_fill(BLUE, opacity=0.5), run_time=1, rate_func=linear)
        self.wait(1)

        # Calculation of average acceleration
        formula = MathTex(r""a_{avg} = \frac{\Delta v}{\Delta t}"")
        self.play(Write(formula))
        self.wait(2)

        # Show change in velocity and time
        delta_v = MathTex(r""\Delta v = v_f - v_i = 4\,m/s - 2\,m/s = 2\,m/s"")
        delta_t = MathTex(r""\Delta t = 3\,s"")
        calculation = MathTex(r""a_{avg} = \frac{2\,m/s}{3\,s} = \frac{2}{3}\,m/s^2"")
        delta_v.next_to(formula, DOWN)
        delta_t.next_to(delta_v, DOWN)
        calculation.next_to(delta_t, DOWN)

        self.play(ReplacementTransform(formula, delta_v))
        self.wait(1)
        self.play(Write(delta_t))
        self.wait(1)
        self.play(Write(calculation))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Uniform Motion""
animation: Start with a title slide with the title, then animate an object moving in a straight line at a constant speed, illustrating the concept of uniform motion.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class UniformMotion(Scene):
    def construct(self):
        title = Text(""Uniform Motion"").scale(1.5)
        self.play(Write(title))
        self.wait(1)
        self.play(FadeOut(title))

        line = Line(LEFT*4, RIGHT*4)
        dot = Dot(LEFT*4)
        self.add(line, dot)
        self.play(MoveAlongPath(dot, line), run_time=4, rate_func=linear)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Newton's Second Law in Action""
    animation:  animate an object being pushed with a force and accelerating in the direction of the force, demonstrating the relationship F = ma as described by Newton's Second Law of Motion.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class NewtonSecondLaw(Scene):
    def construct(self):
        title = Text(""Newton's Second Law in Action"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Setup
        ground = Line(start=3*LEFT, end=3*RIGHT, color=WHITE)
        self.play(Create(ground))
        box = Square(side_length=0.5, color=BLUE)
        box.move_to(2.5*LEFT)
        self.play(Create(box))

        # Force arrow
        force_arrow = Arrow(start=box.get_center(), end=box.get_center() + RIGHT, buff=0, color=YELLOW)
        force_text = Text(""F"", font_size=24).next_to(force_arrow, UP, buff=0.1)
        self.play(GrowArrow(force_arrow), Write(force_text))

        # Acceleration
        self.play(box.animate.shift(4*RIGHT), run_time=2, rate_func=linear)
        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Understanding Inertia""
animation:  animate an object at rest remaining stationary, and another object in motion continuing its motion at a constant velocity, both resisting changes to their state of motion when acted upon by external forces.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class UnderstandingInertia(Scene):
    def construct(self):
        title = Text(""Understanding Inertia"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Object at rest
        square_rest = Square(color=BLUE, fill_opacity=1).shift(LEFT*3)
        text_rest = Text(""Rest"", font_size=24).next_to(square_rest, DOWN)
        self.play(FadeIn(square_rest), Write(text_rest))
        self.wait(2)

        # Object in motion
        square_motion = Square(color=GREEN, fill_opacity=1).shift(RIGHT*3)
        text_motion = Text(""Motion"", font_size=24).next_to(square_motion, DOWN)
        self.play(FadeIn(square_motion), Write(text_motion))
        self.play(square_motion.animate.shift(RIGHT*2), run_time=2, rate_func=linear)
        self.wait(2)

        # Show resistance to change
        arrow = Arrow(start=ORIGIN, end=UP*1, buff=0, color=YELLOW)
        arrow_rest = arrow.copy().next_to(square_rest, UP)
        arrow_motion = arrow.copy().next_to(square_motion, UP)
        self.play(GrowArrow(arrow_rest), GrowArrow(arrow_motion))
        self.wait(2)

        self.play(FadeOut(square_rest, square_motion, text_rest, text_motion, arrow_rest, arrow_motion))"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Hooke's Law Illustrated""
    animation:  animate a spring being stretched or compressed, demonstrating how the force applied is proportional to the displacement according to Hooke's Law (F = kx).
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class HookesLaw(Scene):
    def construct(self):
        title = Text(""Hooke's Law Illustrated"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Spring setup
        spring = Spring().shift(LEFT*2)
        block = Square().next_to(spring, RIGHT)
        equilibrium = Text(""Equilibrium"", font_size=24).next_to(spring, UP, buff=0.1)

        self.play(FadeIn(spring, shift=RIGHT), FadeIn(block, shift=LEFT))
        self.play(Write(equilibrium))
        self.wait(1)

        # Stretching and compressing
        for _ in range(2):
            self.play(spring.stretch, 1.5, {""dim"": 0}, rate_func=there_and_back, run_time=2)
            self.play(block.shift, RIGHT*1.5, rate_func=there_and_back, run_time=2)
            self.play(spring.stretch, 0.5, {""dim"": 0}, rate_func=there_and_back, run_time=2)
            self.play(block.shift, LEFT*0.5, rate_func=there_and_back, run_time=2)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Calculating Pressure""
animation:  animate a force acting on a surface and show the calculation of pressure as the force divided by the area (P = F / A).
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class PressureCalculation(Scene):
    def construct(self):
        title = Text(""Calculating Pressure"", font_size=40)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Animate force arrow
        force_arrow = Arrow(start=2*LEFT, end=2*RIGHT, color=RED)
        force_label = MathTex(""F"", color=RED).next_to(force_arrow, UP)
        self.play(GrowArrow(force_arrow), Write(force_label))
        self.wait(1)

        # Animate surface
        surface = Line(start=3*DOWN + 2*LEFT, end=3*DOWN + 2*RIGHT)
        area_label = MathTex(""A"", color=BLUE).next_to(surface, DOWN)
        self.play(Write(surface), Write(area_label))
        self.wait(1)

        # Show calculation of pressure
        pressure_formula = MathTex(r""P = \frac{F}{A}"").shift(UP)
        self.play(Write(pressure_formula))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Heat Transfer Mechanisms""
animation:  animate examples of heat transfer through conduction, convection, and radiation. Show conduction with a hot object touching a cold object, convection with fluid motion transferring heat, and radiation with electromagnetic waves emitting heat.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class HeatTransferMechanisms(Scene):
    def construct(self):
        title = Text(""Heat Transfer Mechanisms"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Conduction
        hot_obj = Square(color=RED).shift(LEFT)
        cold_obj = Square(color=BLUE).shift(RIGHT)
        self.play(GrowFromCenter(hot_obj), GrowFromCenter(cold_obj))
        self.wait(1)
        heat_transfer = Line(LEFT, RIGHT).set_color(YELLOW)
        self.play(ShowCreation(heat_transfer))
        self.wait(2)
        self.play(FadeOut(hot_obj), FadeOut(cold_obj), FadeOut(heat_transfer))

        # Convection
        fluid = Rectangle(height=2, width=4, color=BLUE).shift(DOWN*0.5)
        arrows = VGroup(
            Arrow(ORIGIN, UP*0.5).shift(LEFT*1.5 + DOWN*0.5),
            Arrow(ORIGIN, UP*0.5).shift(LEFT*0.5 + DOWN*0.5),
            Arrow(ORIGIN, UP*0.5).shift(RIGHT*0.5 + DOWN*0.5),
            Arrow(ORIGIN, UP*0.5).shift(RIGHT*1.5 + DOWN*0.5),
        )
        self.play(ShowCreation(fluid))
        self.play(ShowCreation(arrows))
        self.wait(2)
        self.play(FadeOut(fluid), FadeOut(arrows))

        # Radiation
        source = Circle(color=YELLOW).scale(0.5)
        waves = VGroup(
            CurvedArrow(0.6*UP, 0.6*RIGHT, angle=-TAU/4),
            CurvedArrow(0.6*RIGHT, 0.6*DOWN, angle=-TAU/4),
            CurvedArrow(0.6*DOWN, 0.6*LEFT, angle=-TAU/4),
            CurvedArrow(0.6*LEFT, 0.6*UP, angle=-TAU/4),
        ).set_color(ORANGE)
        self.play(ShowCreation(source))
        self.play(ShowCreation(waves))
        self.wait(2)
        self.play(FadeOut(source), FadeOut(waves))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Light Reflection and Refraction""
animation:  animate a light ray reflecting off a mirror and refracting as it passes through a lens, demonstrating the principles of reflection and refraction of light.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class LightReflectionRefraction(Scene):
    def construct(self):
        title = Text(""Light Reflection and Refraction"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Mirror
        mirror = Line(UP, DOWN).set_color(WHITE)
        mirror.shift(LEFT * 2)
        self.play(Create(mirror))

        # Lens
        lens = Ellipse(width=1.5, height=3, stroke_color=WHITE).shift(RIGHT * 2)
        self.play(Create(lens))

        # Incident Ray (towards mirror)
        incident_ray = Arrow(start=LEFT * 4 + UP * 2, end=LEFT * 2 + UP * 0.5, buff=0, color=YELLOW)
        self.play(Create(incident_ray))

        # Reflected Ray
        reflected_ray = Arrow(start=LEFT * 2 + UP * 0.5, end=LEFT * 0 + UP * 2, buff=0, color=YELLOW)
        self.play(Create(reflected_ray))

        # Refracted Ray (through lens)
        refracted_ray = Arrow(start=RIGHT * 2 + UP * 0.5, end=RIGHT * 4 + UP * 1, buff=0, color=YELLOW)
        self.play(Create(refracted_ray))

        # Incident Ray (towards lens)
        self.play(Transform(incident_ray, Arrow(start=LEFT * 0 + UP * 2, end=RIGHT * 2 + UP * 0.5, buff=0, color=YELLOW)))

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Dispersion of Light""
    animation:  animate a prism splitting white light into its component colors, creating a rainbow effect.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class DispersionOfLight(Scene):
    def construct(self):
        title = Text(""Dispersion of Light"").scale(1.5)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Create prism and light
        prism = Polygon([-1, 2, 0], [1, 2, 0], [0, -1, 0], color=WHITE).scale(1.5)
        light = Line([-7, 0, 0], [-2, 0, 0], color=WHITE)
        self.play(ShowCreation(prism), ShowCreation(light))
        self.wait(1)

        # Create rainbow effect
        colors = [RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, VIOLET]
        rays = VGroup()
        for i, color in enumerate(colors):
            angle = i * 10 - 30
            ray = Line([-2, 0, 0], [3 * np.cos(np.radians(angle)), 3 * np.sin(np.radians(angle)), 0], color=color)
            rays.add(ray)

        self.play(Transform(light, rays))
        self.wait(2)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Exploring Wave Types""
    animation:  animate examples of transverse waves (e.g., light) and longitudinal waves (e.g., sound), showcasing their distinct characteristics and motion patterns.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaveTypes(Scene):
    def construct(self):
        title = Text(""Exploring Wave Types"").scale(1.2)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Transverse Wave
        transverse_wave = FunctionGraph(
            lambda x: np.sin(x), x_range=[-3, 3], color=BLUE
        )
        transverse_wave_label = Text(""Transverse Wave (e.g., light)"").to_edge(UP)
        self.play(Create(transverse_wave), Write(transverse_wave_label))
        self.play(transverse_wave.animate.shift(UP*2).set_color(BLUE))
        self.play(transverse_wave.animate.shift(DOWN*4).set_color(BLUE))
        self.play(FadeOut(transverse_wave), FadeOut(transverse_wave_label))

        self.wait(1)

        # Longitudinal Wave
        dots = VGroup(*[Dot(radius=0.1).shift(RIGHT*i*0.5) for i in range(-6, 7)])
        original_positions = [dot.get_center() for dot in dots]
        longitudinal_wave_label = Text(""Longitudinal Wave (e.g., sound)"").to_edge(UP)

        def update_dots(dots):
            for i, dot in enumerate(dots):
                dot.move_to(original_positions[i] + np.array([np.sin(i + self.time*3)*0.2, 0, 0]))

        self.play(Write(longitudinal_wave_label))
        self.add(dots)
        dots.add_updater(update_dots)
        self.wait(4)
        dots.remove_updater(update_dots)
        self.play(FadeOut(dots), FadeOut(longitudinal_wave_label))

        self.wait(1)"
"You are an expert Python developer experienced with the Manim package.You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
    title: ""Wave Interference Patterns""
    animation:  animate two wave sources emitting waves and show the resulting interference pattern, demonstrating both constructive and destructive interference.
    important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class WaveInterference(Scene):
    def construct(self):
        title = Text(""Wave Interference Patterns"")
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        source1 = Dot(point=LEFT*2, color=BLUE)
        source2 = Dot(point=RIGHT*2, color=RED)
        self.play(FadeIn(source1), FadeIn(source2))
        self.wait(1)

        waves1 = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=BLUE).move_to(source1.get_center()) for i in range(1, 20)])
        waves2 = VGroup(*[Circle(radius=i*0.2, stroke_width=2, color=RED).move_to(source2.get_center()) for i in range(1, 20)])

        def update_wave1(wave, dt):
            wave.scale(1.05)
            wave.set_stroke(opacity=max(0, wave.stroke_opacity - 0.05))

        def update_wave2(wave, dt):
            wave.scale(1.05)
            wave.set_stroke(opacity=max(0, wave.stroke_opacity - 0.05))

        for wave in waves1:
            wave.add_updater(update_wave1)
            self.add(wave)
            self.wait(0.1)
            wave.remove_updater(update_wave1)

        for wave in waves2:
            wave.add_updater(update_wave2)
            self.add(wave)
            self.wait(0.1)
            wave.remove_updater(update_wave2)

        self.wait(2)"
"You are an expert Python developer experienced with the Manim package. You should only give the code delimited by ```, do not give any descriptions or how to run it. Give me Python code that creates a Manim animation with the specifications below:
title: ""Coulomb's Law Visualization""
animation:  animate two charged particles with opposite charges to demonstrate the force of attraction between them. Next, animate two charged particles with the same charge to demonstrate the force of repulsion between them, illustrating Coulomb's Law.
important note: The code for the animation should be very simple. The animation should have little text if at all. There should not be any use of svgs or external files.","from manim import *

class CoulombsLawVisualization(Scene):
    def construct(self):
        title = Text(""Coulomb's Law Visualization"").scale(0.9)
        self.play(Write(title))
        self.wait(2)
        self.play(FadeOut(title))

        # Attraction
        positive_charge = Circle(color=RED, fill_opacity=1).shift(LEFT*2)
        positive_text = Text(""+"", color=WHITE).scale(2).move_to(positive_charge.get_center())
        negative_charge = Circle(color=BLUE, fill_opacity=1).shift(RIGHT*2)
        negative_text = Text(""-"", color=WHITE).scale(2).move_to(negative_charge.get_center())

        self.play(GrowFromCenter(positive_charge), Write(positive_text),
                  GrowFromCenter(negative_charge), Write(negative_text))
        self.wait(1)
        self.play(positive_charge.animate.shift(RIGHT*1.5), negative_charge.animate.shift(LEFT*1.5))
        self.wait(1)
        self.play(FadeOut(positive_charge), FadeOut(positive_text),
                  FadeOut(negative_charge), FadeOut(negative_text))

        # Repulsion
        positive_charge_1 = Circle(color=RED, fill_opacity=1).shift(LEFT*2 + DOWN*2)
        positive_text_1 = Text(""+"", color=WHITE).scale(2).move_to(positive_charge_1.get_center())
        positive_charge_2 = Circle(color=RED, fill_opacity=1).shift(RIGHT*2 + DOWN*2)
        positive_text_2 = Text(""+"", color=WHITE).scale(2).move_to(positive_charge_2.get_center())

        self.play(GrowFromCenter(positive_charge_1), Write(positive_text_1),
                  GrowFromCenter(positive_charge_2), Write(positive_text_2))
        self.wait(1)
        self.play(positive_charge_1.animate.shift(RIGHT*0.5), positive_charge_2.animate.shift(LEFT*0.5))
        self.wait(2)"
